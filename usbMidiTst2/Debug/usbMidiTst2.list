
usbMidiTst2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ae8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08008c74  08008c74  00018c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cfc  08008cfc  00020130  2**0
                  CONTENTS
  4 .ARM          00000000  08008cfc  08008cfc  00020130  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008cfc  08008cfc  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cfc  08008cfc  00018cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d00  08008d00  00018d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08008d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000245c  20000130  08008e34  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000258c  08008e34  0002258c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a212  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000350f  00000000  00000000  0003a372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  0003d888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  0003e820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c462  00000000  00000000  0003f640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a92  00000000  00000000  0005baa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1ea4  00000000  00000000  0006f534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001113d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e7c  00000000  00000000  0011142c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000130 	.word	0x20000130
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08008c5c 	.word	0x08008c5c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000134 	.word	0x20000134
 80001c8:	08008c5c 	.word	0x08008c5c

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b08a      	sub	sp, #40	; 0x28
 80001d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fc0a 	bl	80009ea <HAL_Init>

  /* USER CODE BEGIN Init */
  uint32_t idPart1 = (STM32_UUID[0]&0x0008F000)>>12;
 80001d6:	4b80      	ldr	r3, [pc, #512]	; (80003d8 <main+0x20c>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	0b1b      	lsrs	r3, r3, #12
 80001dc:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 80001e0:	613b      	str	r3, [r7, #16]
    uint32_t idPart2 = (STM32_UUID[1]&0x00FFF000)>>12;
 80001e2:	4b7e      	ldr	r3, [pc, #504]	; (80003dc <main+0x210>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	0b1b      	lsrs	r3, r3, #12
 80001e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80001ec:	60fb      	str	r3, [r7, #12]
    uint32_t idPart3 = (STM32_UUID[2]&0x00000F00)>>8;
 80001ee:	4b7c      	ldr	r3, [pc, #496]	; (80003e0 <main+0x214>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	0a1b      	lsrs	r3, r3, #8
 80001f4:	f003 030f 	and.w	r3, r3, #15
 80001f8:	60bb      	str	r3, [r7, #8]

  	uint8_t data[3];

    data[0] = 0;     // 0x0C in your example
 80001fa:	2300      	movs	r3, #0
 80001fc:	703b      	strb	r3, [r7, #0]
    data[1] = 0;    // MSB byte of 16bit data
 80001fe:	2300      	movs	r3, #0
 8000200:	707b      	strb	r3, [r7, #1]
  	data[2] = 0;
 8000202:	2300      	movs	r3, #0
 8000204:	70bb      	strb	r3, [r7, #2]

  	int count = 0;
 8000206:	2300      	movs	r3, #0
 8000208:	607b      	str	r3, [r7, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020a:	f000 f9af 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020e:	f000 fa5f 	bl	80006d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000212:	f000 fa1d 	bl	8000650 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000216:	f007 fff5 	bl	8008204 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(4000);
 800021a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800021e:	f000 fc59 	bl	8000ad4 <HAL_Delay>

//--------------------------------------
//------- MASTER MODE ------------------
//--------------------------------------
	if(hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED){
 8000222:	4b70      	ldr	r3, [pc, #448]	; (80003e4 <main+0x218>)
 8000224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8000228:	b2db      	uxtb	r3, r3
 800022a:	2b03      	cmp	r3, #3
 800022c:	d150      	bne.n	80002d0 <main+0x104>
		module_mode = 1;
 800022e:	4b6e      	ldr	r3, [pc, #440]	; (80003e8 <main+0x21c>)
 8000230:	2201      	movs	r2, #1
 8000232:	601a      	str	r2, [r3, #0]
		int i = 0;
 8000234:	2300      	movs	r3, #0
 8000236:	61fb      	str	r3, [r7, #28]
	  while(i<2)
 8000238:	e012      	b.n	8000260 <main+0x94>
		{
			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 800023a:	2108      	movs	r1, #8
 800023c:	486b      	ldr	r0, [pc, #428]	; (80003ec <main+0x220>)
 800023e:	f000 ff21 	bl	8001084 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8000242:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000246:	f000 fc45 	bl	8000ad4 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 800024a:	2108      	movs	r1, #8
 800024c:	4867      	ldr	r0, [pc, #412]	; (80003ec <main+0x220>)
 800024e:	f000 ff19 	bl	8001084 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8000252:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000256:	f000 fc3d 	bl	8000ad4 <HAL_Delay>
			i++;
 800025a:	69fb      	ldr	r3, [r7, #28]
 800025c:	3301      	adds	r3, #1
 800025e:	61fb      	str	r3, [r7, #28]
	  while(i<2)
 8000260:	69fb      	ldr	r3, [r7, #28]
 8000262:	2b01      	cmp	r3, #1
 8000264:	dde9      	ble.n	800023a <main+0x6e>
		}
		HAL_Delay(500);
 8000266:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800026a:	f000 fc33 	bl	8000ad4 <HAL_Delay>
		i = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	61fb      	str	r3, [r7, #28]
	  while(i<127)
 8000272:	e029      	b.n	80002c8 <main+0xfc>
		{
		   if(HAL_I2C_Master_Receive(&hi2c1, i, data, 3,20)==HAL_OK)
 8000274:	69fb      	ldr	r3, [r7, #28]
 8000276:	b299      	uxth	r1, r3
 8000278:	463a      	mov	r2, r7
 800027a:	2314      	movs	r3, #20
 800027c:	9300      	str	r3, [sp, #0]
 800027e:	2303      	movs	r3, #3
 8000280:	485b      	ldr	r0, [pc, #364]	; (80003f0 <main+0x224>)
 8000282:	f000 ffa9 	bl	80011d8 <HAL_I2C_Master_Receive>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d11a      	bne.n	80002c2 <main+0xf6>
		   {
					HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 800028c:	2108      	movs	r1, #8
 800028e:	4857      	ldr	r0, [pc, #348]	; (80003ec <main+0x220>)
 8000290:	f000 fef8 	bl	8001084 <HAL_GPIO_TogglePin>
				  HAL_Delay(300);
 8000294:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000298:	f000 fc1c 	bl	8000ad4 <HAL_Delay>
				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 800029c:	2108      	movs	r1, #8
 800029e:	4853      	ldr	r0, [pc, #332]	; (80003ec <main+0x220>)
 80002a0:	f000 fef0 	bl	8001084 <HAL_GPIO_TogglePin>
				  HAL_Delay(300);
 80002a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002a8:	f000 fc14 	bl	8000ad4 <HAL_Delay>

				  slave_address[slave_number] = i;
 80002ac:	4b51      	ldr	r3, [pc, #324]	; (80003f4 <main+0x228>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4951      	ldr	r1, [pc, #324]	; (80003f8 <main+0x22c>)
 80002b2:	69fa      	ldr	r2, [r7, #28]
 80002b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  slave_number++;
 80002b8:	4b4e      	ldr	r3, [pc, #312]	; (80003f4 <main+0x228>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	3301      	adds	r3, #1
 80002be:	4a4d      	ldr	r2, [pc, #308]	; (80003f4 <main+0x228>)
 80002c0:	6013      	str	r3, [r2, #0]
			 }
			 i++;
 80002c2:	69fb      	ldr	r3, [r7, #28]
 80002c4:	3301      	adds	r3, #1
 80002c6:	61fb      	str	r3, [r7, #28]
	  while(i<127)
 80002c8:	69fb      	ldr	r3, [r7, #28]
 80002ca:	2b7e      	cmp	r3, #126	; 0x7e
 80002cc:	ddd2      	ble.n	8000274 <main+0xa8>
 80002ce:	e028      	b.n	8000322 <main+0x156>
//--------------------------------------
//-------- SLAVE MODE ------------------
//--------------------------------------
	else
	{
		I2C_address = idPart1;
 80002d0:	693b      	ldr	r3, [r7, #16]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	4b49      	ldr	r3, [pc, #292]	; (80003fc <main+0x230>)
 80002d6:	701a      	strb	r2, [r3, #0]
		MX_I2C1_Init();
 80002d8:	f000 f9ba 	bl	8000650 <MX_I2C1_Init>
		while(HAL_I2C_Slave_Transmit(&hi2c1, data, 3, 100)!=HAL_OK) {}
 80002dc:	bf00      	nop
 80002de:	4639      	mov	r1, r7
 80002e0:	2364      	movs	r3, #100	; 0x64
 80002e2:	2203      	movs	r2, #3
 80002e4:	4842      	ldr	r0, [pc, #264]	; (80003f0 <main+0x224>)
 80002e6:	f001 f86d 	bl	80013c4 <HAL_I2C_Slave_Transmit>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d1f6      	bne.n	80002de <main+0x112>
		int i = 0;
 80002f0:	2300      	movs	r3, #0
 80002f2:	61bb      	str	r3, [r7, #24]
	  while(i<2)
 80002f4:	e012      	b.n	800031c <main+0x150>
		{
			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 80002f6:	2108      	movs	r1, #8
 80002f8:	483c      	ldr	r0, [pc, #240]	; (80003ec <main+0x220>)
 80002fa:	f000 fec3 	bl	8001084 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 80002fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000302:	f000 fbe7 	bl	8000ad4 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8000306:	2108      	movs	r1, #8
 8000308:	4838      	ldr	r0, [pc, #224]	; (80003ec <main+0x220>)
 800030a:	f000 febb 	bl	8001084 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 800030e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000312:	f000 fbdf 	bl	8000ad4 <HAL_Delay>
			i++;
 8000316:	69bb      	ldr	r3, [r7, #24]
 8000318:	3301      	adds	r3, #1
 800031a:	61bb      	str	r3, [r7, #24]
	  while(i<2)
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	2b01      	cmp	r3, #1
 8000320:	dde9      	ble.n	80002f6 <main+0x12a>
	  			HAL_Delay(1000);
	  		}*/
	  //--------------------------------------
	  //------- MASTER MODE ------------------
	  //--------------------------------------
	  		if(module_mode==0)
 8000322:	4b31      	ldr	r3, [pc, #196]	; (80003e8 <main+0x21c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2b00      	cmp	r3, #0
 8000328:	f040 80a1 	bne.w	800046e <main+0x2a2>
	  		{
	  			int i =0;
 800032c:	2300      	movs	r3, #0
 800032e:	617b      	str	r3, [r7, #20]
	  			while (i<slave_number)
 8000330:	e026      	b.n	8000380 <main+0x1b4>
	  			{
	  				if(HAL_I2C_Master_Receive(&hi2c1, slave_address[i], data, 3,2)==HAL_OK)
 8000332:	4a31      	ldr	r2, [pc, #196]	; (80003f8 <main+0x22c>)
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800033a:	b299      	uxth	r1, r3
 800033c:	463a      	mov	r2, r7
 800033e:	2302      	movs	r3, #2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	2303      	movs	r3, #3
 8000344:	482a      	ldr	r0, [pc, #168]	; (80003f0 <main+0x224>)
 8000346:	f000 ff47 	bl	80011d8 <HAL_I2C_Master_Receive>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d114      	bne.n	800037a <main+0x1ae>
	  		    {
	  /*					HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
	  			    HAL_Delay(300);
	  					HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
	  			    HAL_Delay(300);*/
	  					if(data[0]==1)
 8000350:	783b      	ldrb	r3, [r7, #0]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d111      	bne.n	800037a <main+0x1ae>
	  					{
	  						exti_msg[0] = MIDI_MAKE_EVENT(0, MIDI_EVENT_NOTE_ON, slave_address[i], 100);
 8000356:	4a28      	ldr	r2, [pc, #160]	; (80003f8 <main+0x22c>)
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800035e:	041b      	lsls	r3, r3, #16
 8000360:	f043 43c8 	orr.w	r3, r3, #1677721600	; 0x64000000
 8000364:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
 8000368:	461a      	mov	r2, r3
 800036a:	4b25      	ldr	r3, [pc, #148]	; (8000400 <main+0x234>)
 800036c:	601a      	str	r2, [r3, #0]
	  		        USBD_MIDI_SendEvent(&hUsbDeviceFS, exti_msg[0]);
 800036e:	4b24      	ldr	r3, [pc, #144]	; (8000400 <main+0x234>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4619      	mov	r1, r3
 8000374:	481b      	ldr	r0, [pc, #108]	; (80003e4 <main+0x218>)
 8000376:	f006 fe02 	bl	8006f7e <USBD_MIDI_SendEvent>
	  					}
	  				}
	  				i++;
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	3301      	adds	r3, #1
 800037e:	617b      	str	r3, [r7, #20]
	  			while (i<slave_number)
 8000380:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <main+0x228>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	429a      	cmp	r2, r3
 8000388:	dbd3      	blt.n	8000332 <main+0x166>
	  			}

	  			n = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800038a:	2101      	movs	r1, #1
 800038c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000390:	f000 fe48 	bl	8001024 <HAL_GPIO_ReadPin>
 8000394:	4603      	mov	r3, r0
 8000396:	461a      	mov	r2, r3
 8000398:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <main+0x238>)
 800039a:	601a      	str	r2, [r3, #0]
	        if ((encoder0PinALast == 0) && (n == 1)) {
 800039c:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <main+0x23c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d150      	bne.n	8000446 <main+0x27a>
 80003a4:	4b17      	ldr	r3, [pc, #92]	; (8000404 <main+0x238>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d14c      	bne.n	8000446 <main+0x27a>
	          if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) {
 80003ac:	2102      	movs	r1, #2
 80003ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b2:	f000 fe37 	bl	8001024 <HAL_GPIO_ReadPin>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d129      	bne.n	8000410 <main+0x244>
	            if(encoder0Pos>0)
 80003bc:	4b13      	ldr	r3, [pc, #76]	; (800040c <main+0x240>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d040      	beq.n	8000446 <main+0x27a>
	  					{
	  						encoder0Pos--;
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <main+0x240>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	3b01      	subs	r3, #1
 80003ca:	b2da      	uxtb	r2, r3
 80003cc:	4b0f      	ldr	r3, [pc, #60]	; (800040c <main+0x240>)
 80003ce:	701a      	strb	r2, [r3, #0]
	  						HAL_Delay(10);
 80003d0:	200a      	movs	r0, #10
 80003d2:	f000 fb7f 	bl	8000ad4 <HAL_Delay>
 80003d6:	e036      	b.n	8000446 <main+0x27a>
 80003d8:	1fff7590 	.word	0x1fff7590
 80003dc:	1fff7594 	.word	0x1fff7594
 80003e0:	1fff7598 	.word	0x1fff7598
 80003e4:	20001dc8 	.word	0x20001dc8
 80003e8:	20000000 	.word	0x20000000
 80003ec:	48000400 	.word	0x48000400
 80003f0:	20001d6c 	.word	0x20001d6c
 80003f4:	2000014c 	.word	0x2000014c
 80003f8:	20001d2c 	.word	0x20001d2c
 80003fc:	20000004 	.word	0x20000004
 8000400:	20001db8 	.word	0x20001db8
 8000404:	20001d28 	.word	0x20001d28
 8000408:	20000150 	.word	0x20000150
 800040c:	20000154 	.word	0x20000154
	  					}
	          } else {
	            if(encoder0Pos<127)
 8000410:	4b4e      	ldr	r3, [pc, #312]	; (800054c <main+0x380>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b7e      	cmp	r3, #126	; 0x7e
 8000416:	d808      	bhi.n	800042a <main+0x25e>
	  					{
	  						encoder0Pos++;
 8000418:	4b4c      	ldr	r3, [pc, #304]	; (800054c <main+0x380>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	3301      	adds	r3, #1
 800041e:	b2da      	uxtb	r2, r3
 8000420:	4b4a      	ldr	r3, [pc, #296]	; (800054c <main+0x380>)
 8000422:	701a      	strb	r2, [r3, #0]
	  						HAL_Delay(10);
 8000424:	200a      	movs	r0, #10
 8000426:	f000 fb55 	bl	8000ad4 <HAL_Delay>
	  					}
	  					exti_msg[0] = MIDI_MAKE_EVENT(0, MIDI_EVENT_CC, 15, encoder0Pos);
 800042a:	4b48      	ldr	r3, [pc, #288]	; (800054c <main+0x380>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	061b      	lsls	r3, r3, #24
 8000430:	f443 237b 	orr.w	r3, r3, #1028096	; 0xfb000
 8000434:	461a      	mov	r2, r3
 8000436:	4b46      	ldr	r3, [pc, #280]	; (8000550 <main+0x384>)
 8000438:	601a      	str	r2, [r3, #0]
	  		      USBD_MIDI_SendEvent(&hUsbDeviceFS, exti_msg[0]);
 800043a:	4b45      	ldr	r3, [pc, #276]	; (8000550 <main+0x384>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4619      	mov	r1, r3
 8000440:	4844      	ldr	r0, [pc, #272]	; (8000554 <main+0x388>)
 8000442:	f006 fd9c 	bl	8006f7e <USBD_MIDI_SendEvent>
	          }
	        }
	        encoder0PinALast = n;
 8000446:	4b44      	ldr	r3, [pc, #272]	; (8000558 <main+0x38c>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a44      	ldr	r2, [pc, #272]	; (800055c <main+0x390>)
 800044c:	6013      	str	r3, [r2, #0]
	  			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 800044e:	2108      	movs	r1, #8
 8000450:	4843      	ldr	r0, [pc, #268]	; (8000560 <main+0x394>)
 8000452:	f000 fe17 	bl	8001084 <HAL_GPIO_TogglePin>
	  			HAL_Delay(3000);
 8000456:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800045a:	f000 fb3b 	bl	8000ad4 <HAL_Delay>
	  			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 800045e:	2108      	movs	r1, #8
 8000460:	483f      	ldr	r0, [pc, #252]	; (8000560 <main+0x394>)
 8000462:	f000 fe0f 	bl	8001084 <HAL_GPIO_TogglePin>
	  			HAL_Delay(300);
 8000466:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800046a:	f000 fb33 	bl	8000ad4 <HAL_Delay>
	  		}

	  //--------------------------------------
	  //-------- SLAVE MODE ------------------
	  //--------------------------------------
	  		if(module_mode==1)
 800046e:	4b3d      	ldr	r3, [pc, #244]	; (8000564 <main+0x398>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	f47f af55 	bne.w	8000322 <main+0x156>
	  			}
	  			if(HAL_I2C_Slave_Transmit(&hi2c1, data, 3, 100)==HAL_OK) {
	  				if(data[0]==1) data[0] = 0;
	  			}
	  			HAL_Delay(1);*/
	  			HAL_I2C_Slave_Transmit(&hi2c1, data, 3, 2);
 8000478:	4639      	mov	r1, r7
 800047a:	2302      	movs	r3, #2
 800047c:	2203      	movs	r2, #3
 800047e:	483a      	ldr	r0, [pc, #232]	; (8000568 <main+0x39c>)
 8000480:	f000 ffa0 	bl	80013c4 <HAL_I2C_Slave_Transmit>
	  			n = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000484:	2101      	movs	r1, #1
 8000486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048a:	f000 fdcb 	bl	8001024 <HAL_GPIO_ReadPin>
 800048e:	4603      	mov	r3, r0
 8000490:	461a      	mov	r2, r3
 8000492:	4b31      	ldr	r3, [pc, #196]	; (8000558 <main+0x38c>)
 8000494:	601a      	str	r2, [r3, #0]
	        if ((encoder0PinALast == 0) && (n == 1)) {
 8000496:	4b31      	ldr	r3, [pc, #196]	; (800055c <main+0x390>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d150      	bne.n	8000540 <main+0x374>
 800049e:	4b2e      	ldr	r3, [pc, #184]	; (8000558 <main+0x38c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	d14c      	bne.n	8000540 <main+0x374>
	          if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) {
 80004a6:	2102      	movs	r1, #2
 80004a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ac:	f000 fdba 	bl	8001024 <HAL_GPIO_ReadPin>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d11a      	bne.n	80004ec <main+0x320>
	            if(encoder0Pos>0)
 80004b6:	4b25      	ldr	r3, [pc, #148]	; (800054c <main+0x380>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d040      	beq.n	8000540 <main+0x374>
	  					{
	  						encoder0Pos--;
 80004be:	4b23      	ldr	r3, [pc, #140]	; (800054c <main+0x380>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	3b01      	subs	r3, #1
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b21      	ldr	r3, [pc, #132]	; (800054c <main+0x380>)
 80004c8:	701a      	strb	r2, [r3, #0]
	  						HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 80004ca:	2108      	movs	r1, #8
 80004cc:	4824      	ldr	r0, [pc, #144]	; (8000560 <main+0x394>)
 80004ce:	f000 fdd9 	bl	8001084 <HAL_GPIO_TogglePin>
	  			      HAL_Delay(300);
 80004d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80004d6:	f000 fafd 	bl	8000ad4 <HAL_Delay>
	  					  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 80004da:	2108      	movs	r1, #8
 80004dc:	4820      	ldr	r0, [pc, #128]	; (8000560 <main+0x394>)
 80004de:	f000 fdd1 	bl	8001084 <HAL_GPIO_TogglePin>
	  			      HAL_Delay(300);
 80004e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80004e6:	f000 faf5 	bl	8000ad4 <HAL_Delay>
 80004ea:	e029      	b.n	8000540 <main+0x374>
	  					}
	          } else {
	            if(encoder0Pos<127)
 80004ec:	4b17      	ldr	r3, [pc, #92]	; (800054c <main+0x380>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b7e      	cmp	r3, #126	; 0x7e
 80004f2:	d825      	bhi.n	8000540 <main+0x374>
	  					{
	  						encoder0Pos++;
 80004f4:	4b15      	ldr	r3, [pc, #84]	; (800054c <main+0x380>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	3301      	adds	r3, #1
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <main+0x380>)
 80004fe:	701a      	strb	r2, [r3, #0]
	  						HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8000500:	2108      	movs	r1, #8
 8000502:	4817      	ldr	r0, [pc, #92]	; (8000560 <main+0x394>)
 8000504:	f000 fdbe 	bl	8001084 <HAL_GPIO_TogglePin>
	  			      HAL_Delay(300);
 8000508:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800050c:	f000 fae2 	bl	8000ad4 <HAL_Delay>
	  					  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8000510:	2108      	movs	r1, #8
 8000512:	4813      	ldr	r0, [pc, #76]	; (8000560 <main+0x394>)
 8000514:	f000 fdb6 	bl	8001084 <HAL_GPIO_TogglePin>
	  			      HAL_Delay(300);
 8000518:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800051c:	f000 fada 	bl	8000ad4 <HAL_Delay>
	  						HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8000520:	2108      	movs	r1, #8
 8000522:	480f      	ldr	r0, [pc, #60]	; (8000560 <main+0x394>)
 8000524:	f000 fdae 	bl	8001084 <HAL_GPIO_TogglePin>
	  				    HAL_Delay(300);
 8000528:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800052c:	f000 fad2 	bl	8000ad4 <HAL_Delay>
	  				    HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8000530:	2108      	movs	r1, #8
 8000532:	480b      	ldr	r0, [pc, #44]	; (8000560 <main+0x394>)
 8000534:	f000 fda6 	bl	8001084 <HAL_GPIO_TogglePin>
	  				    HAL_Delay(300);
 8000538:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800053c:	f000 faca 	bl	8000ad4 <HAL_Delay>
	  					}
	          }
	        }
	        encoder0PinALast = n;
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <main+0x38c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a05      	ldr	r2, [pc, #20]	; (800055c <main+0x390>)
 8000546:	6013      	str	r3, [r2, #0]
	  		if(module_mode==0)
 8000548:	e6eb      	b.n	8000322 <main+0x156>
 800054a:	bf00      	nop
 800054c:	20000154 	.word	0x20000154
 8000550:	20001db8 	.word	0x20001db8
 8000554:	20001dc8 	.word	0x20001dc8
 8000558:	20001d28 	.word	0x20001d28
 800055c:	20000150 	.word	0x20000150
 8000560:	48000400 	.word	0x48000400
 8000564:	20000000 	.word	0x20000000
 8000568:	20001d6c 	.word	0x20001d6c

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b0a4      	sub	sp, #144	; 0x90
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000576:	2244      	movs	r2, #68	; 0x44
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f008 fb66 	bl	8008c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2234      	movs	r2, #52	; 0x34
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f008 fb58 	bl	8008c4c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800059c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005a0:	f002 ff9c 	bl	80034dc <HAL_PWREx_ControlVoltageScaling>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x42>
  {
    Error_Handler();
 80005aa:	f000 f8dd 	bl	8000768 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80005ae:	2312      	movs	r3, #18
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b8:	2340      	movs	r3, #64	; 0x40
 80005ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80005c4:	23b0      	movs	r3, #176	; 0xb0
 80005c6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d0:	2301      	movs	r3, #1
 80005d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005d6:	230a      	movs	r3, #10
 80005d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 ffdb 	bl	80035a8 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005f8:	f000 f8b6 	bl	8000768 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2303      	movs	r3, #3
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000610:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000614:	2104      	movs	r1, #4
 8000616:	4618      	mov	r0, r3
 8000618:	f003 fc2c 	bl	8003e74 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000622:	f000 f8a1 	bl	8000768 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8000626:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 800062a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8000630:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000634:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4618      	mov	r0, r3
 800063a:	f003 fde9 	bl	8004210 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000644:	f000 f890 	bl	8000768 <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	3790      	adds	r7, #144	; 0x90
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000656:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <MX_I2C1_Init+0x78>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_I2C1_Init+0x74>)
 800065c:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <MX_I2C1_Init+0x7c>)
 800065e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000668:	2201      	movs	r2, #1
 800066a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_I2C1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800068a:	480e      	ldr	r0, [pc, #56]	; (80006c4 <MX_I2C1_Init+0x74>)
 800068c:	f000 fd14 	bl	80010b8 <HAL_I2C_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000696:	f000 f867 	bl	8000768 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800069a:	2100      	movs	r1, #0
 800069c:	4809      	ldr	r0, [pc, #36]	; (80006c4 <MX_I2C1_Init+0x74>)
 800069e:	f001 f97b 	bl	8001998 <HAL_I2CEx_ConfigAnalogFilter>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a8:	f000 f85e 	bl	8000768 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006ac:	2100      	movs	r1, #0
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_I2C1_Init+0x74>)
 80006b0:	f001 f9bd 	bl	8001a2e <HAL_I2CEx_ConfigDigitalFilter>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ba:	f000 f855 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20001d6c 	.word	0x20001d6c
 80006c8:	40005400 	.word	0x40005400
 80006cc:	10909cec 	.word	0x10909cec

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_GPIO_Init+0x90>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	4a1d      	ldr	r2, [pc, #116]	; (8000760 <MX_GPIO_Init+0x90>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f2:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_GPIO_Init+0x90>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_GPIO_Init+0x90>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_GPIO_Init+0x90>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_GPIO_Init+0x90>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2108      	movs	r1, #8
 800071a:	4812      	ldr	r0, [pc, #72]	; (8000764 <MX_GPIO_Init+0x94>)
 800071c:	f000 fc9a 	bl	8001054 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000720:	2303      	movs	r3, #3
 8000722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	4619      	mov	r1, r3
 8000732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000736:	f000 fb03 	bl	8000d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800073a:	2308      	movs	r3, #8
 800073c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	4619      	mov	r1, r3
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_GPIO_Init+0x94>)
 8000752:	f000 faf5 	bl	8000d40 <HAL_GPIO_Init>

}
 8000756:	bf00      	nop
 8000758:	3720      	adds	r7, #32
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000
 8000764:	48000400 	.word	0x48000400

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	e7fe      	b.n	8000770 <Error_Handler+0x8>
	...

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <HAL_MspInit+0x44>)
 800077c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800077e:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <HAL_MspInit+0x44>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6613      	str	r3, [r2, #96]	; 0x60
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <HAL_MspInit+0x44>)
 8000788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_MspInit+0x44>)
 8000794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_MspInit+0x44>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6593      	str	r3, [r2, #88]	; 0x58
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_MspInit+0x44>)
 80007a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a17      	ldr	r2, [pc, #92]	; (8000838 <HAL_I2C_MspInit+0x7c>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d127      	bne.n	800082e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <HAL_I2C_MspInit+0x80>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a16      	ldr	r2, [pc, #88]	; (800083c <HAL_I2C_MspInit+0x80>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <HAL_I2C_MspInit+0x80>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007f6:	23c0      	movs	r3, #192	; 0xc0
 80007f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007fa:	2312      	movs	r3, #18
 80007fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000806:	2304      	movs	r3, #4
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	480b      	ldr	r0, [pc, #44]	; (8000840 <HAL_I2C_MspInit+0x84>)
 8000812:	f000 fa95 	bl	8000d40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_I2C_MspInit+0x80>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_I2C_MspInit+0x80>)
 800081c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000820:	6593      	str	r3, [r2, #88]	; 0x58
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_I2C_MspInit+0x80>)
 8000824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	; 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40005400 	.word	0x40005400
 800083c:	40021000 	.word	0x40021000
 8000840:	48000400 	.word	0x48000400

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000890:	f000 f900 	bl	8000a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <USB_IRQHandler+0x10>)
 800089e:	f001 fa46 	bl	8001d2e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20002298 	.word	0x20002298

080008ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <SystemInit+0x5c>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b6:	4a14      	ldr	r2, [pc, #80]	; (8000908 <SystemInit+0x5c>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <SystemInit+0x60>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a11      	ldr	r2, [pc, #68]	; (800090c <SystemInit+0x60>)
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <SystemInit+0x60>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <SystemInit+0x60>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a0d      	ldr	r2, [pc, #52]	; (800090c <SystemInit+0x60>)
 80008d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80008dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80008e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <SystemInit+0x60>)
 80008e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <SystemInit+0x60>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a07      	ldr	r2, [pc, #28]	; (800090c <SystemInit+0x60>)
 80008f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <SystemInit+0x60>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00
 800090c:	40021000 	.word	0x40021000

08000910 <MIDI_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use 
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t MIDI_Init_FS(uint32_t options)
{ 
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8000918:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <MIDI_DeInit_FS>:
  *         DeInitializes the MIDI media low layer
  * @param  options: Reserved for future use
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t MIDI_DeInit_FS(uint32_t options)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */ 
  return (USBD_OK);
 800092e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8000930:	4618      	mov	r0, r3
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <MIDI_EventOUT_FS>:

static int8_t MIDI_EventOUT_FS(USBD_MIDI_MessageTypeDef event){
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint8_t key;
  GPIO_PinState pinstate;
  switch(MIDI_GET_EVENT_ID(event)){
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	0a1b      	lsrs	r3, r3, #8
 8000948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800094c:	2b80      	cmp	r3, #128	; 0x80
 800094e:	d001      	beq.n	8000954 <MIDI_EventOUT_FS+0x18>
 8000950:	2b90      	cmp	r3, #144	; 0x90
 8000952:	d10d      	bne.n	8000970 <MIDI_EventOUT_FS+0x34>
  case MIDI_EVENT_NOTE_OFF:
  case MIDI_EVENT_NOTE_ON:
  
    key = MIDI_GET_KEY(event);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	0c1b      	lsrs	r3, r3, #16
 8000958:	73fb      	strb	r3, [r7, #15]
    pinstate = (GPIO_PinState)(MIDI_GET_EVENT_ID(event) == MIDI_EVENT_NOTE_ON);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000962:	2b90      	cmp	r3, #144	; 0x90
 8000964:	bf0c      	ite	eq
 8000966:	2301      	moveq	r3, #1
 8000968:	2300      	movne	r3, #0
 800096a:	b2db      	uxtb	r3, r3
 800096c:	73bb      	strb	r3, [r7, #14]
    }
    else if(key == 67){
      HAL_GPIO_WritePin(LD6_GPIO_Port,LD6_Pin, pinstate);
    }*/
  
    break;
 800096e:	e000      	b.n	8000972 <MIDI_EventOUT_FS+0x36>
  default:
    break;
 8000970:	bf00      	nop
  }
  
  return (USBD_OK);
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <MIDI_StatusTX_FS>:


static int8_t  MIDI_StatusTX_FS     (USBD_MIDI_TX_ConnectionTypeDef new_status){
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
  /*if(new_status == MIDI_TX_CONNECTED){
    while(1);
  }*/
  
  return (USBD_OK);
 800098a:	2300      	movs	r3, #0
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800099c:	f7ff ff86 	bl	80008ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009a2:	e003      	b.n	80009ac <LoopCopyDataInit>

080009a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009a4:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009aa:	3104      	adds	r1, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009ac:	480a      	ldr	r0, [pc, #40]	; (80009d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80009b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80009b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80009b4:	d3f6      	bcc.n	80009a4 <CopyDataInit>
	ldr	r2, =_sbss
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80009b8:	e002      	b.n	80009c0 <LoopFillZerobss>

080009ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80009ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80009bc:	f842 3b04 	str.w	r3, [r2], #4

080009c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <LoopForever+0x16>)
	cmp	r2, r3
 80009c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80009c4:	d3f9      	bcc.n	80009ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c6:	f008 f91d 	bl	8008c04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ca:	f7ff fbff 	bl	80001cc <main>

080009ce <LoopForever>:

LoopForever:
    b LoopForever
 80009ce:	e7fe      	b.n	80009ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009d0:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80009d4:	08008d04 	.word	0x08008d04
	ldr	r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009dc:	20000130 	.word	0x20000130
	ldr	r2, =_sbss
 80009e0:	20000130 	.word	0x20000130
	ldr	r3, = _ebss
 80009e4:	2000258c 	.word	0x2000258c

080009e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC1_2_IRQHandler>

080009ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009f0:	2300      	movs	r3, #0
 80009f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f000 f961 	bl	8000cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009fa:	2000      	movs	r0, #0
 80009fc:	f000 f80e 	bl	8000a1c <HAL_InitTick>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	71fb      	strb	r3, [r7, #7]
 8000a0a:	e001      	b.n	8000a10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a0c:	f7ff feb2 	bl	8000774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a10:	79fb      	ldrb	r3, [r7, #7]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <HAL_InitTick+0x6c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d023      	beq.n	8000a78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <HAL_InitTick+0x70>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <HAL_InitTick+0x6c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f96d 	bl	8000d26 <HAL_SYSTICK_Config>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d10f      	bne.n	8000a72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d809      	bhi.n	8000a6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a60:	f000 f937 	bl	8000cd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a64:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_InitTick+0x74>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
 8000a6a:	e007      	b.n	8000a7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	73fb      	strb	r3, [r7, #15]
 8000a70:	e004      	b.n	8000a7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	73fb      	strb	r3, [r7, #15]
 8000a76:	e001      	b.n	8000a7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000020 	.word	0x20000020
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	2000001c 	.word	0x2000001c

08000a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x20>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <HAL_IncTick+0x24>)
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000020 	.word	0x20000020
 8000ab8:	20001dc4 	.word	0x20001dc4

08000abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_GetTick+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20001dc4 	.word	0x20001dc4

08000ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000adc:	f7ff ffee 	bl	8000abc <HAL_GetTick>
 8000ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000aec:	d005      	beq.n	8000afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_Delay+0x44>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000afa:	bf00      	nop
 8000afc:	f7ff ffde 	bl	8000abc <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d8f7      	bhi.n	8000afc <HAL_Delay+0x28>
  {
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000020 	.word	0x20000020

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	db0b      	blt.n	8000baa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	f003 021f 	and.w	r2, r3, #31
 8000b98:	4907      	ldr	r1, [pc, #28]	; (8000bb8 <__NVIC_EnableIRQ+0x38>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	095b      	lsrs	r3, r3, #5
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0a      	blt.n	8000be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	490c      	ldr	r1, [pc, #48]	; (8000c08 <__NVIC_SetPriority+0x4c>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	440b      	add	r3, r1
 8000be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be4:	e00a      	b.n	8000bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4908      	ldr	r1, [pc, #32]	; (8000c0c <__NVIC_SetPriority+0x50>)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	3b04      	subs	r3, #4
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	761a      	strb	r2, [r3, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f1c3 0307 	rsb	r3, r3, #7
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	bf28      	it	cs
 8000c2e:	2304      	movcs	r3, #4
 8000c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3304      	adds	r3, #4
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d902      	bls.n	8000c40 <NVIC_EncodePriority+0x30>
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3b03      	subs	r3, #3
 8000c3e:	e000      	b.n	8000c42 <NVIC_EncodePriority+0x32>
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43da      	mvns	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	401a      	ands	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	43d9      	mvns	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	4313      	orrs	r3, r2
         );
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3724      	adds	r7, #36	; 0x24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c88:	d301      	bcc.n	8000c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00f      	b.n	8000cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <SysTick_Config+0x40>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c96:	210f      	movs	r1, #15
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f7ff ff8e 	bl	8000bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca8:	2207      	movs	r2, #7
 8000caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	e000e010 	.word	0xe000e010

08000cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ff29 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce4:	f7ff ff3e 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000ce8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	68b9      	ldr	r1, [r7, #8]
 8000cee:	6978      	ldr	r0, [r7, #20]
 8000cf0:	f7ff ff8e 	bl	8000c10 <NVIC_EncodePriority>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff5d 	bl	8000bbc <__NVIC_SetPriority>
}
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff31 	bl	8000b80 <__NVIC_EnableIRQ>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ffa2 	bl	8000c78 <SysTick_Config>
 8000d34:	4603      	mov	r3, r0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4e:	e14e      	b.n	8000fee <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	2101      	movs	r1, #1
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 8140 	beq.w	8000fe8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d00b      	beq.n	8000d88 <HAL_GPIO_Init+0x48>
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d007      	beq.n	8000d88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d7c:	2b11      	cmp	r3, #17
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b12      	cmp	r3, #18
 8000d86:	d130      	bne.n	8000dea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	2203      	movs	r2, #3
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	091b      	lsrs	r3, r3, #4
 8000dd4:	f003 0201 	and.w	r2, r3, #1
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2203      	movs	r2, #3
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0xea>
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b12      	cmp	r3, #18
 8000e28:	d123      	bne.n	8000e72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	08da      	lsrs	r2, r3, #3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3208      	adds	r2, #8
 8000e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	220f      	movs	r2, #15
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	691a      	ldr	r2, [r3, #16]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	08da      	lsrs	r2, r3, #3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3208      	adds	r2, #8
 8000e6c:	6939      	ldr	r1, [r7, #16]
 8000e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 0203 	and.w	r2, r3, #3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 809a 	beq.w	8000fe8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb4:	4b55      	ldr	r3, [pc, #340]	; (800100c <HAL_GPIO_Init+0x2cc>)
 8000eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb8:	4a54      	ldr	r2, [pc, #336]	; (800100c <HAL_GPIO_Init+0x2cc>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6613      	str	r3, [r2, #96]	; 0x60
 8000ec0:	4b52      	ldr	r3, [pc, #328]	; (800100c <HAL_GPIO_Init+0x2cc>)
 8000ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ecc:	4a50      	ldr	r2, [pc, #320]	; (8001010 <HAL_GPIO_Init+0x2d0>)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	089b      	lsrs	r3, r3, #2
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ef6:	d013      	beq.n	8000f20 <HAL_GPIO_Init+0x1e0>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a46      	ldr	r2, [pc, #280]	; (8001014 <HAL_GPIO_Init+0x2d4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d00d      	beq.n	8000f1c <HAL_GPIO_Init+0x1dc>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a45      	ldr	r2, [pc, #276]	; (8001018 <HAL_GPIO_Init+0x2d8>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d007      	beq.n	8000f18 <HAL_GPIO_Init+0x1d8>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a44      	ldr	r2, [pc, #272]	; (800101c <HAL_GPIO_Init+0x2dc>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d101      	bne.n	8000f14 <HAL_GPIO_Init+0x1d4>
 8000f10:	2303      	movs	r3, #3
 8000f12:	e006      	b.n	8000f22 <HAL_GPIO_Init+0x1e2>
 8000f14:	2307      	movs	r3, #7
 8000f16:	e004      	b.n	8000f22 <HAL_GPIO_Init+0x1e2>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	e002      	b.n	8000f22 <HAL_GPIO_Init+0x1e2>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <HAL_GPIO_Init+0x1e2>
 8000f20:	2300      	movs	r3, #0
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	f002 0203 	and.w	r2, r2, #3
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	4093      	lsls	r3, r2
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f32:	4937      	ldr	r1, [pc, #220]	; (8001010 <HAL_GPIO_Init+0x2d0>)
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f40:	4b37      	ldr	r3, [pc, #220]	; (8001020 <HAL_GPIO_Init+0x2e0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f64:	4a2e      	ldr	r2, [pc, #184]	; (8001020 <HAL_GPIO_Init+0x2e0>)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000f6a:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <HAL_GPIO_Init+0x2e0>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f8e:	4a24      	ldr	r2, [pc, #144]	; (8001020 <HAL_GPIO_Init+0x2e0>)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f94:	4b22      	ldr	r3, [pc, #136]	; (8001020 <HAL_GPIO_Init+0x2e0>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_GPIO_Init+0x2e0>)
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_GPIO_Init+0x2e0>)
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <HAL_GPIO_Init+0x2e0>)
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3301      	adds	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f47f aea9 	bne.w	8000d50 <HAL_GPIO_Init+0x10>
  }
}
 8000ffe:	bf00      	nop
 8001000:	bf00      	nop
 8001002:	371c      	adds	r7, #28
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	40021000 	.word	0x40021000
 8001010:	40010000 	.word	0x40010000
 8001014:	48000400 	.word	0x48000400
 8001018:	48000800 	.word	0x48000800
 800101c:	48000c00 	.word	0x48000c00
 8001020:	40010400 	.word	0x40010400

08001024 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	4013      	ands	r3, r2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d002      	beq.n	8001042 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e001      	b.n	8001046 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001046:	7bfb      	ldrb	r3, [r7, #15]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
 8001060:	4613      	mov	r3, r2
 8001062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001064:	787b      	ldrb	r3, [r7, #1]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001070:	e002      	b.n	8001078 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001072:	887a      	ldrh	r2, [r7, #2]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4013      	ands	r3, r2
 800109c:	041a      	lsls	r2, r3, #16
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	43d9      	mvns	r1, r3
 80010a2:	887b      	ldrh	r3, [r7, #2]
 80010a4:	400b      	ands	r3, r1
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e081      	b.n	80011ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d106      	bne.n	80010e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fb6c 	bl	80007bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2224      	movs	r2, #36	; 0x24
 80010e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0201 	bic.w	r2, r2, #1
 80010fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001108:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001118:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d107      	bne.n	8001132 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	e006      	b.n	8001140 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800113e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	2b02      	cmp	r3, #2
 8001146:	d104      	bne.n	8001152 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001150:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001164:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001174:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691a      	ldr	r2, [r3, #16]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	ea42 0103 	orr.w	r1, r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	021a      	lsls	r2, r3, #8
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	430a      	orrs	r2, r1
 800118e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69d9      	ldr	r1, [r3, #28]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1a      	ldr	r2, [r3, #32]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	430a      	orrs	r2, r1
 800119e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0201 	orr.w	r2, r2, #1
 80011ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2220      	movs	r2, #32
 80011ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af02      	add	r7, sp, #8
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	461a      	mov	r2, r3
 80011e4:	460b      	mov	r3, r1
 80011e6:	817b      	strh	r3, [r7, #10]
 80011e8:	4613      	mov	r3, r2
 80011ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b20      	cmp	r3, #32
 80011f6:	f040 80db 	bne.w	80013b0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001200:	2b01      	cmp	r3, #1
 8001202:	d101      	bne.n	8001208 <HAL_I2C_Master_Receive+0x30>
 8001204:	2302      	movs	r3, #2
 8001206:	e0d4      	b.n	80013b2 <HAL_I2C_Master_Receive+0x1da>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001210:	f7ff fc54 	bl	8000abc <HAL_GetTick>
 8001214:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2319      	movs	r3, #25
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f000 f9fb 	bl	800161e <I2C_WaitOnFlagUntilTimeout>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e0bf      	b.n	80013b2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2222      	movs	r2, #34	; 0x22
 8001236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2210      	movs	r2, #16
 800123e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2200      	movs	r2, #0
 8001246:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	893a      	ldrh	r2, [r7, #8]
 8001252:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2200      	movs	r2, #0
 8001258:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800125e:	b29b      	uxth	r3, r3
 8001260:	2bff      	cmp	r3, #255	; 0xff
 8001262:	d90e      	bls.n	8001282 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	22ff      	movs	r2, #255	; 0xff
 8001268:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800126e:	b2da      	uxtb	r2, r3
 8001270:	8979      	ldrh	r1, [r7, #10]
 8001272:	4b52      	ldr	r3, [pc, #328]	; (80013bc <HAL_I2C_Master_Receive+0x1e4>)
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 fb5e 	bl	800193c <I2C_TransferConfig>
 8001280:	e06d      	b.n	800135e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001286:	b29a      	uxth	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001290:	b2da      	uxtb	r2, r3
 8001292:	8979      	ldrh	r1, [r7, #10]
 8001294:	4b49      	ldr	r3, [pc, #292]	; (80013bc <HAL_I2C_Master_Receive+0x1e4>)
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f000 fb4d 	bl	800193c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80012a2:	e05c      	b.n	800135e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	6a39      	ldr	r1, [r7, #32]
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 fa75 	bl	8001798 <I2C_WaitOnRXNEFlagUntilTimeout>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e07c      	b.n	80013b2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d4:	3b01      	subs	r3, #1
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	3b01      	subs	r3, #1
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d034      	beq.n	800135e <HAL_I2C_Master_Receive+0x186>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d130      	bne.n	800135e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	2200      	movs	r2, #0
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 f989 	bl	800161e <I2C_WaitOnFlagUntilTimeout>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e04d      	b.n	80013b2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800131a:	b29b      	uxth	r3, r3
 800131c:	2bff      	cmp	r3, #255	; 0xff
 800131e:	d90e      	bls.n	800133e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	22ff      	movs	r2, #255	; 0xff
 8001324:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800132a:	b2da      	uxtb	r2, r3
 800132c:	8979      	ldrh	r1, [r7, #10]
 800132e:	2300      	movs	r3, #0
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f000 fb00 	bl	800193c <I2C_TransferConfig>
 800133c:	e00f      	b.n	800135e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001342:	b29a      	uxth	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800134c:	b2da      	uxtb	r2, r3
 800134e:	8979      	ldrh	r1, [r7, #10]
 8001350:	2300      	movs	r3, #0
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f000 faef 	bl	800193c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001362:	b29b      	uxth	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d19d      	bne.n	80012a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	6a39      	ldr	r1, [r7, #32]
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f000 f9d6 	bl	800171e <I2C_WaitOnSTOPFlagUntilTimeout>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e01a      	b.n	80013b2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2220      	movs	r2, #32
 8001382:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6859      	ldr	r1, [r3, #4]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_I2C_Master_Receive+0x1e8>)
 8001390:	400b      	ands	r3, r1
 8001392:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2220      	movs	r2, #32
 8001398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013ac:	2300      	movs	r3, #0
 80013ae:	e000      	b.n	80013b2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80013b0:	2302      	movs	r3, #2
  }
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	80002400 	.word	0x80002400
 80013c0:	fe00e800 	.word	0xfe00e800

080013c4 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	4613      	mov	r3, r2
 80013d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b20      	cmp	r3, #32
 80013de:	f040 80f5 	bne.w	80015cc <HAL_I2C_Slave_Transmit+0x208>
  {
    if ((pData == NULL) || (Size == 0U))
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <HAL_I2C_Slave_Transmit+0x2a>
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d105      	bne.n	80013fa <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e0e9      	b.n	80015ce <HAL_I2C_Slave_Transmit+0x20a>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001400:	2b01      	cmp	r3, #1
 8001402:	d101      	bne.n	8001408 <HAL_I2C_Slave_Transmit+0x44>
 8001404:	2302      	movs	r3, #2
 8001406:	e0e2      	b.n	80015ce <HAL_I2C_Slave_Transmit+0x20a>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001410:	f7ff fb54 	bl	8000abc <HAL_GetTick>
 8001414:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2221      	movs	r2, #33	; 0x21
 800141a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2220      	movs	r2, #32
 8001422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2200      	movs	r2, #0
 800142a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	88fa      	ldrh	r2, [r7, #6]
 8001436:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2200      	movs	r2, #0
 800143c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800144c:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	2200      	movs	r2, #0
 8001456:	2108      	movs	r1, #8
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f000 f8e0 	bl	800161e <I2C_WaitOnFlagUntilTimeout>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d009      	beq.n	8001478 <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001472:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e0aa      	b.n	80015ce <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2208      	movs	r2, #8
 800147e:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d118      	bne.n	80014ba <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2200      	movs	r2, #0
 8001490:	2108      	movs	r1, #8
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f000 f8c3 	bl	800161e <I2C_WaitOnFlagUntilTimeout>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d009      	beq.n	80014b2 <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014ac:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e08d      	b.n	80015ce <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2208      	movs	r2, #8
 80014b8:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f000 f8a9 	bl	800161e <I2C_WaitOnFlagUntilTimeout>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d02d      	beq.n	800152e <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014e0:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e073      	b.n	80015ce <HAL_I2C_Slave_Transmit+0x20a>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	6839      	ldr	r1, [r7, #0]
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f000 f8d7 	bl	800169e <I2C_WaitOnTXISFlagUntilTimeout>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d009      	beq.n	800150a <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001504:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e061      	b.n	80015ce <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	781a      	ldrb	r2, [r3, #0]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001524:	b29b      	uxth	r3, r3
 8001526:	3b01      	subs	r3, #1
 8001528:	b29a      	uxth	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001532:	b29b      	uxth	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1d6      	bne.n	80014e6 <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	6839      	ldr	r1, [r7, #0]
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 f8ee 	bl	800171e <I2C_WaitOnSTOPFlagUntilTimeout>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d011      	beq.n	800156c <HAL_I2C_Slave_Transmit+0x1a8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001556:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155c:	2b04      	cmp	r3, #4
 800155e:	d103      	bne.n	8001568 <HAL_I2C_Slave_Transmit+0x1a4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2200      	movs	r2, #0
 8001564:	645a      	str	r2, [r3, #68]	; 0x44
 8001566:	e001      	b.n	800156c <HAL_I2C_Slave_Transmit+0x1a8>
      }
      else
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e030      	b.n	80015ce <HAL_I2C_Slave_Transmit+0x20a>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2220      	movs	r2, #32
 8001572:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	2201      	movs	r2, #1
 800157c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f000 f84c 	bl	800161e <I2C_WaitOnFlagUntilTimeout>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d009      	beq.n	80015a0 <HAL_I2C_Slave_Transmit+0x1dc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800159a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e016      	b.n	80015ce <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2220      	movs	r2, #32
 80015b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	e000      	b.n	80015ce <HAL_I2C_Slave_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80015cc:	2302      	movs	r3, #2
  }
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d103      	bne.n	80015f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2200      	movs	r2, #0
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d007      	beq.n	8001612 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	699a      	ldr	r2, [r3, #24]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f042 0201 	orr.w	r2, r2, #1
 8001610:	619a      	str	r2, [r3, #24]
  }
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b084      	sub	sp, #16
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	4613      	mov	r3, r2
 800162c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800162e:	e022      	b.n	8001676 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001636:	d01e      	beq.n	8001676 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001638:	f7ff fa40 	bl	8000abc <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d302      	bcc.n	800164e <I2C_WaitOnFlagUntilTimeout+0x30>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d113      	bne.n	8001676 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f043 0220 	orr.w	r2, r3, #32
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2220      	movs	r2, #32
 800165e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e00f      	b.n	8001696 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	699a      	ldr	r2, [r3, #24]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4013      	ands	r3, r2
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	429a      	cmp	r2, r3
 8001684:	bf0c      	ite	eq
 8001686:	2301      	moveq	r3, #1
 8001688:	2300      	movne	r3, #0
 800168a:	b2db      	uxtb	r3, r3
 800168c:	461a      	mov	r2, r3
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	429a      	cmp	r2, r3
 8001692:	d0cd      	beq.n	8001630 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016aa:	e02c      	b.n	8001706 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	68b9      	ldr	r1, [r7, #8]
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 f8dd 	bl	8001870 <I2C_IsAcknowledgeFailed>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e02a      	b.n	8001716 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016c6:	d01e      	beq.n	8001706 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016c8:	f7ff f9f8 	bl	8000abc <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d302      	bcc.n	80016de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d113      	bne.n	8001706 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f043 0220 	orr.w	r2, r3, #32
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2220      	movs	r2, #32
 80016ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e007      	b.n	8001716 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b02      	cmp	r3, #2
 8001712:	d1cb      	bne.n	80016ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b084      	sub	sp, #16
 8001722:	af00      	add	r7, sp, #0
 8001724:	60f8      	str	r0, [r7, #12]
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800172a:	e028      	b.n	800177e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	68b9      	ldr	r1, [r7, #8]
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 f89d 	bl	8001870 <I2C_IsAcknowledgeFailed>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e026      	b.n	800178e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001740:	f7ff f9bc 	bl	8000abc <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	429a      	cmp	r2, r3
 800174e:	d302      	bcc.n	8001756 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d113      	bne.n	800177e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f043 0220 	orr.w	r2, r3, #32
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2220      	movs	r2, #32
 8001766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e007      	b.n	800178e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0320 	and.w	r3, r3, #32
 8001788:	2b20      	cmp	r3, #32
 800178a:	d1cf      	bne.n	800172c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80017a4:	e055      	b.n	8001852 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 f860 	bl	8001870 <I2C_IsAcknowledgeFailed>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e053      	b.n	8001862 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0320 	and.w	r3, r3, #32
 80017c4:	2b20      	cmp	r3, #32
 80017c6:	d129      	bne.n	800181c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d105      	bne.n	80017e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e03f      	b.n	8001862 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2220      	movs	r2, #32
 80017e8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6859      	ldr	r1, [r3, #4]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80017f6:	400b      	ands	r3, r1
 80017f8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2220      	movs	r2, #32
 8001804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e022      	b.n	8001862 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800181c:	f7ff f94e 	bl	8000abc <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	429a      	cmp	r2, r3
 800182a:	d302      	bcc.n	8001832 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10f      	bne.n	8001852 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f043 0220 	orr.w	r2, r3, #32
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2220      	movs	r2, #32
 8001842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e007      	b.n	8001862 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b04      	cmp	r3, #4
 800185e:	d1a2      	bne.n	80017a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	fe00e800 	.word	0xfe00e800

08001870 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b10      	cmp	r3, #16
 8001888:	d151      	bne.n	800192e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800188a:	e022      	b.n	80018d2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001892:	d01e      	beq.n	80018d2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001894:	f7ff f912 	bl	8000abc <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d302      	bcc.n	80018aa <I2C_IsAcknowledgeFailed+0x3a>
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d113      	bne.n	80018d2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f043 0220 	orr.w	r2, r3, #32
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2220      	movs	r2, #32
 80018ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e02e      	b.n	8001930 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0320 	and.w	r3, r3, #32
 80018dc:	2b20      	cmp	r3, #32
 80018de:	d1d5      	bne.n	800188c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2210      	movs	r2, #16
 80018e6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2220      	movs	r2, #32
 80018ee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f7ff fe70 	bl	80015d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6859      	ldr	r1, [r3, #4]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <I2C_IsAcknowledgeFailed+0xc8>)
 8001902:	400b      	ands	r3, r1
 8001904:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	f043 0204 	orr.w	r2, r3, #4
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2220      	movs	r2, #32
 8001916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	fe00e800 	.word	0xfe00e800

0800193c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	460b      	mov	r3, r1
 8001948:	817b      	strh	r3, [r7, #10]
 800194a:	4613      	mov	r3, r2
 800194c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	0d5b      	lsrs	r3, r3, #21
 8001958:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800195c:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <I2C_TransferConfig+0x58>)
 800195e:	430b      	orrs	r3, r1
 8001960:	43db      	mvns	r3, r3
 8001962:	ea02 0103 	and.w	r1, r2, r3
 8001966:	897b      	ldrh	r3, [r7, #10]
 8001968:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800196c:	7a7b      	ldrb	r3, [r7, #9]
 800196e:	041b      	lsls	r3, r3, #16
 8001970:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	431a      	orrs	r2, r3
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	431a      	orrs	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001986:	bf00      	nop
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	03ff63ff 	.word	0x03ff63ff

08001998 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b20      	cmp	r3, #32
 80019ac:	d138      	bne.n	8001a20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e032      	b.n	8001a22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2224      	movs	r2, #36	; 0x24
 80019c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0201 	bic.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6819      	ldr	r1, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e000      	b.n	8001a22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a20:	2302      	movs	r3, #2
  }
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b085      	sub	sp, #20
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b20      	cmp	r3, #32
 8001a42:	d139      	bne.n	8001ab8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e033      	b.n	8001aba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2224      	movs	r2, #36	; 0x24
 8001a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0201 	bic.w	r2, r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e000      	b.n	8001aba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ab8:	2302      	movs	r3, #2
  }
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac8:	b08b      	sub	sp, #44	; 0x2c
 8001aca:	af06      	add	r7, sp, #24
 8001acc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e104      	b.n	8001ce2 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d106      	bne.n	8001af2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f006 fcc7 	bl	8008480 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2203      	movs	r2, #3
 8001af6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 fd34 	bl	800456c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	687e      	ldr	r6, [r7, #4]
 8001b0c:	466d      	mov	r5, sp
 8001b0e:	f106 0410 	add.w	r4, r6, #16
 8001b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	602b      	str	r3, [r5, #0]
 8001b1a:	1d33      	adds	r3, r6, #4
 8001b1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b1e:	6838      	ldr	r0, [r7, #0]
 8001b20:	f002 fcfc 	bl	800451c <USB_CoreInit>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0d5      	b.n	8001ce2 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f002 fd30 	bl	80045a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]
 8001b46:	e04c      	b.n	8001be2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	440b      	add	r3, r1
 8001b58:	3301      	adds	r3, #1
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	440b      	add	r3, r1
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b72:	7bfa      	ldrb	r2, [r7, #15]
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	b298      	uxth	r0, r3
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	440b      	add	r3, r1
 8001b84:	3336      	adds	r3, #54	; 0x36
 8001b86:	4602      	mov	r2, r0
 8001b88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	3303      	adds	r3, #3
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	3338      	adds	r3, #56	; 0x38
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	333c      	adds	r3, #60	; 0x3c
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3340      	adds	r3, #64	; 0x40
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	3301      	adds	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d3ad      	bcc.n	8001b48 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]
 8001bf0:	e044      	b.n	8001c7c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bf2:	7bfa      	ldrb	r2, [r7, #15]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	440b      	add	r3, r1
 8001c00:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	440b      	add	r3, r1
 8001c16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	440b      	add	r3, r1
 8001c2c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c34:	7bfa      	ldrb	r2, [r7, #15]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	440b      	add	r3, r1
 8001c42:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c4a:	7bfa      	ldrb	r2, [r7, #15]
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	440b      	add	r3, r1
 8001c58:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d3b5      	bcc.n	8001bf2 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	687e      	ldr	r6, [r7, #4]
 8001c8e:	466d      	mov	r5, sp
 8001c90:	f106 0410 	add.w	r4, r6, #16
 8001c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	602b      	str	r3, [r5, #0]
 8001c9c:	1d33      	adds	r3, r6, #4
 8001c9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ca0:	6838      	ldr	r0, [r7, #0]
 8001ca2:	f002 fc8b 	bl	80045bc <USB_DevInit>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e014      	b.n	8001ce2 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d102      	bne.n	8001cd6 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f001 fbca 	bl	800346a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f004 fe22 	bl	8006924 <USB_DevDisconnect>

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_PCD_Start+0x16>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e012      	b.n	8001d26 <HAL_PCD_Start+0x3c>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f002 fc16 	bl	800453e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 fded 	bl	80068f6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f004 fe07 	bl	800694e <USB_ReadInterrupts>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d4a:	d102      	bne.n	8001d52 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 fb88 	bl	8002462 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 fdf9 	bl	800694e <USB_ReadInterrupts>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d66:	d112      	bne.n	8001d8e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7a:	b292      	uxth	r2, r2
 8001d7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f006 fc1e 	bl	80085c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d86:	2100      	movs	r1, #0
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f91e 	bl	8001fca <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f004 fddb 	bl	800694e <USB_ReadInterrupts>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001da2:	d10b      	bne.n	8001dbc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001db6:	b292      	uxth	r2, r2
 8001db8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f004 fdc4 	bl	800694e <USB_ReadInterrupts>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dd0:	d10b      	bne.n	8001dea <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001de4:	b292      	uxth	r2, r2
 8001de6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 fdad 	bl	800694e <USB_ReadInterrupts>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dfe:	d133      	bne.n	8001e68 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0204 	bic.w	r2, r2, #4
 8001e12:	b292      	uxth	r2, r2
 8001e14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0208 	bic.w	r2, r2, #8
 8001e2a:	b292      	uxth	r2, r2
 8001e2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d107      	bne.n	8001e4a <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e42:	2100      	movs	r1, #0
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f006 fe89 	bl	8008b5c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f006 fbf2 	bl	8008634 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e62:	b292      	uxth	r2, r2
 8001e64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f004 fd6e 	bl	800694e <USB_ReadInterrupts>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e7c:	d126      	bne.n	8001ecc <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 0208 	orr.w	r2, r2, #8
 8001e90:	b292      	uxth	r2, r2
 8001e92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ea8:	b292      	uxth	r2, r2
 8001eaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 0204 	orr.w	r2, r2, #4
 8001ec0:	b292      	uxth	r2, r2
 8001ec2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f006 fb9a 	bl	8008600 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f004 fd3c 	bl	800694e <USB_ReadInterrupts>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001edc:	2b80      	cmp	r3, #128	; 0x80
 8001ede:	d13f      	bne.n	8001f60 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ef2:	b292      	uxth	r2, r2
 8001ef4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d12b      	bne.n	8001f5a <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0204 	orr.w	r2, r2, #4
 8001f14:	b292      	uxth	r2, r2
 8001f16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0208 	orr.w	r2, r2, #8
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	089b      	lsrs	r3, r3, #2
 8001f46:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f50:	2101      	movs	r1, #1
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f006 fe02 	bl	8008b5c <HAL_PCDEx_LPM_Callback>
 8001f58:	e002      	b.n	8001f60 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f006 fb50 	bl	8008600 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f004 fcf2 	bl	800694e <USB_ReadInterrupts>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f74:	d10e      	bne.n	8001f94 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f88:	b292      	uxth	r2, r2
 8001f8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f006 fb09 	bl	80085a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f004 fcd8 	bl	800694e <USB_ReadInterrupts>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fa8:	d10b      	bne.n	8001fc2 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fbc:	b292      	uxth	r2, r2
 8001fbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_PCD_SetAddress+0x1a>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e013      	b.n	800200c <HAL_PCD_SetAddress+0x42>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	78fa      	ldrb	r2, [r7, #3]
 8001ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f004 fc66 	bl	80068ce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	4608      	mov	r0, r1
 800201e:	4611      	mov	r1, r2
 8002020:	461a      	mov	r2, r3
 8002022:	4603      	mov	r3, r0
 8002024:	70fb      	strb	r3, [r7, #3]
 8002026:	460b      	mov	r3, r1
 8002028:	803b      	strh	r3, [r7, #0]
 800202a:	4613      	mov	r3, r2
 800202c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002036:	2b00      	cmp	r3, #0
 8002038:	da0e      	bge.n	8002058 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	705a      	strb	r2, [r3, #1]
 8002056:	e00e      	b.n	8002076 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	f003 0207 	and.w	r2, r3, #7
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002076:	78fb      	ldrb	r3, [r7, #3]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	b2da      	uxtb	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002082:	883a      	ldrh	r2, [r7, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	78ba      	ldrb	r2, [r7, #2]
 800208c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	785b      	ldrb	r3, [r3, #1]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d004      	beq.n	80020a0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020a0:	78bb      	ldrb	r3, [r7, #2]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d102      	bne.n	80020ac <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_PCD_EP_Open+0xa6>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e00e      	b.n	80020d8 <HAL_PCD_EP_Open+0xc4>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68f9      	ldr	r1, [r7, #12]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f002 faaf 	bl	800462c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80020d6:	7afb      	ldrb	r3, [r7, #11]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	da0e      	bge.n	8002112 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	4413      	add	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	705a      	strb	r2, [r3, #1]
 8002110:	e00e      	b.n	8002130 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	f003 0207 	and.w	r2, r3, #7
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	b2da      	uxtb	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_PCD_EP_Close+0x6a>
 8002146:	2302      	movs	r3, #2
 8002148:	e00e      	b.n	8002168 <HAL_PCD_EP_Close+0x88>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68f9      	ldr	r1, [r7, #12]
 8002158:	4618      	mov	r0, r3
 800215a:	f002 fdd5 	bl	8004d08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	460b      	mov	r3, r1
 800217e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002180:	7afb      	ldrb	r3, [r7, #11]
 8002182:	f003 0207 	and.w	r2, r3, #7
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4413      	add	r3, r2
 8002196:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2200      	movs	r2, #0
 80021ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b0:	7afb      	ldrb	r3, [r7, #11]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021bc:	7afb      	ldrb	r3, [r7, #11]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6979      	ldr	r1, [r7, #20]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f002 ff88 	bl	80050e2 <USB_EPStartXfer>
 80021d2:	e005      	b.n	80021e0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6979      	ldr	r1, [r7, #20]
 80021da:	4618      	mov	r0, r3
 80021dc:	f002 ff81 	bl	80050e2 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	f003 0207 	and.w	r2, r3, #7
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800220c:	681b      	ldr	r3, [r3, #0]
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	460b      	mov	r3, r1
 8002228:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800222a:	7afb      	ldrb	r3, [r7, #11]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	4413      	add	r3, r2
 800223e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2200      	movs	r2, #0
 800225e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2201      	movs	r2, #1
 8002264:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002266:	7afb      	ldrb	r3, [r7, #11]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	b2da      	uxtb	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002272:	7afb      	ldrb	r3, [r7, #11]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	2b00      	cmp	r3, #0
 800227a:	d106      	bne.n	800228a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6979      	ldr	r1, [r7, #20]
 8002282:	4618      	mov	r0, r3
 8002284:	f002 ff2d 	bl	80050e2 <USB_EPStartXfer>
 8002288:	e005      	b.n	8002296 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6979      	ldr	r1, [r7, #20]
 8002290:	4618      	mov	r0, r3
 8002292:	f002 ff26 	bl	80050e2 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	f003 0207 	and.w	r2, r3, #7
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d901      	bls.n	80022be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e04c      	b.n	8002358 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	da0e      	bge.n	80022e4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2201      	movs	r2, #1
 80022e0:	705a      	strb	r2, [r3, #1]
 80022e2:	e00c      	b.n	80022fe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	b2da      	uxtb	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_PCD_EP_SetStall+0x7e>
 800231a:	2302      	movs	r3, #2
 800231c:	e01c      	b.n	8002358 <HAL_PCD_EP_SetStall+0xb8>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68f9      	ldr	r1, [r7, #12]
 800232c:	4618      	mov	r0, r3
 800232e:	f004 f9cf 	bl	80066d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	2b00      	cmp	r3, #0
 800233a:	d108      	bne.n	800234e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002346:	4619      	mov	r1, r3
 8002348:	4610      	mov	r0, r2
 800234a:	f004 fb10 	bl	800696e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	f003 020f 	and.w	r2, r3, #15
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	429a      	cmp	r2, r3
 8002378:	d901      	bls.n	800237e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e040      	b.n	8002400 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800237e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002382:	2b00      	cmp	r3, #0
 8002384:	da0e      	bge.n	80023a4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2201      	movs	r2, #1
 80023a0:	705a      	strb	r2, [r3, #1]
 80023a2:	e00e      	b.n	80023c2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	f003 0207 	and.w	r2, r3, #7
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_PCD_EP_ClrStall+0x82>
 80023de:	2302      	movs	r3, #2
 80023e0:	e00e      	b.n	8002400 <HAL_PCD_EP_ClrStall+0xa0>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68f9      	ldr	r1, [r7, #12]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f004 f9be 	bl	8006772 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_PCD_EP_Flush+0x1a>
 800241e:	2302      	movs	r3, #2
 8002420:	e01b      	b.n	800245a <HAL_PCD_EP_Flush+0x52>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 800242a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800242e:	2b00      	cmp	r3, #0
 8002430:	da09      	bge.n	8002446 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	4619      	mov	r1, r3
 800243e:	4610      	mov	r0, r2
 8002440:	f002 f8dd 	bl	80045fe <USB_FlushTxFifo>
 8002444:	e004      	b.n	8002450 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f002 f8e3 	bl	8004616 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b08e      	sub	sp, #56	; 0x38
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800246a:	e2d6      	b.n	8002a1a <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002474:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002476:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002482:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002486:	2b00      	cmp	r3, #0
 8002488:	f040 815b 	bne.w	8002742 <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800248c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b00      	cmp	r3, #0
 8002494:	d150      	bne.n	8002538 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a6:	81fb      	strh	r3, [r7, #14]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	89fb      	ldrh	r3, [r7, #14]
 80024ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3328      	adds	r3, #40	; 0x28
 80024be:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	4413      	add	r3, r2
 80024da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	441a      	add	r2, r3
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024f6:	2100      	movs	r1, #0
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f006 f83a 	bl	8008572 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8287 	beq.w	8002a1a <PCD_EP_ISR_Handler+0x5b8>
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	f040 8282 	bne.w	8002a1a <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002522:	b2da      	uxtb	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	b292      	uxth	r2, r2
 800252a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002536:	e270      	b.n	8002a1a <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002548:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800254a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800254e:	2b00      	cmp	r3, #0
 8002550:	d032      	beq.n	80025b8 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255a:	b29b      	uxth	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4413      	add	r3, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	4413      	add	r3, r2
 800256c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800258c:	b29b      	uxth	r3, r3
 800258e:	f004 fa3c 	bl	8006a0a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	b29a      	uxth	r2, r3
 800259a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800259e:	4013      	ands	r3, r2
 80025a0:	823b      	strh	r3, [r7, #16]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	8a3a      	ldrh	r2, [r7, #16]
 80025a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025ac:	b292      	uxth	r2, r2
 80025ae:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f005 ffb1 	bl	8008518 <HAL_PCD_SetupStageCallback>
 80025b6:	e230      	b.n	8002a1a <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025b8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f280 822c 	bge.w	8002a1a <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025ce:	4013      	ands	r3, r2
 80025d0:	83bb      	strh	r3, [r7, #28]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	8bba      	ldrh	r2, [r7, #28]
 80025d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025dc:	b292      	uxth	r2, r2
 80025de:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	4413      	add	r3, r2
 80025fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d019      	beq.n	8002644 <PCD_EP_ISR_Handler+0x1e2>
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d015      	beq.n	8002644 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	6959      	ldr	r1, [r3, #20]
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002628:	b29b      	uxth	r3, r3
 800262a:	f004 f9ee 	bl	8006a0a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	441a      	add	r2, r3
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800263c:	2100      	movs	r1, #0
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f005 ff7c 	bl	800853c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002650:	2b00      	cmp	r3, #0
 8002652:	f040 81e2 	bne.w	8002a1a <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	61bb      	str	r3, [r7, #24]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002664:	b29b      	uxth	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4413      	add	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d112      	bne.n	80026a4 <PCD_EP_ISR_Handler+0x242>
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	b29b      	uxth	r3, r3
 8002684:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002688:	b29a      	uxth	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	801a      	strh	r2, [r3, #0]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800269c:	b29a      	uxth	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	801a      	strh	r2, [r3, #0]
 80026a2:	e02f      	b.n	8002704 <PCD_EP_ISR_Handler+0x2a2>
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b3e      	cmp	r3, #62	; 0x3e
 80026aa:	d813      	bhi.n	80026d4 <PCD_EP_ISR_Handler+0x272>
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	085b      	lsrs	r3, r3, #1
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <PCD_EP_ISR_Handler+0x264>
 80026c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c2:	3301      	adds	r3, #1
 80026c4:	633b      	str	r3, [r7, #48]	; 0x30
 80026c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	029b      	lsls	r3, r3, #10
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	e017      	b.n	8002704 <PCD_EP_ISR_Handler+0x2a2>
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	095b      	lsrs	r3, r3, #5
 80026da:	633b      	str	r3, [r7, #48]	; 0x30
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d102      	bne.n	80026ee <PCD_EP_ISR_Handler+0x28c>
 80026e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ea:	3b01      	subs	r3, #1
 80026ec:	633b      	str	r3, [r7, #48]	; 0x30
 80026ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	029b      	lsls	r3, r3, #10
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026fe:	b29a      	uxth	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002714:	827b      	strh	r3, [r7, #18]
 8002716:	8a7b      	ldrh	r3, [r7, #18]
 8002718:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800271c:	827b      	strh	r3, [r7, #18]
 800271e:	8a7b      	ldrh	r3, [r7, #18]
 8002720:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002724:	827b      	strh	r3, [r7, #18]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	8a7b      	ldrh	r3, [r7, #18]
 800272c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800273c:	b29b      	uxth	r3, r3
 800273e:	8013      	strh	r3, [r2, #0]
 8002740:	e16b      	b.n	8002a1a <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002754:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002758:	2b00      	cmp	r3, #0
 800275a:	f280 80e4 	bge.w	8002926 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	b29a      	uxth	r2, r3
 8002770:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002774:	4013      	ands	r3, r2
 8002776:	853b      	strh	r3, [r7, #40]	; 0x28
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002788:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800278c:	b292      	uxth	r2, r2
 800278e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002790:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	4413      	add	r3, r2
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	7b1b      	ldrb	r3, [r3, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d120      	bne.n	80027f0 <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4413      	add	r3, r2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027d2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80027d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8083 	beq.w	80028e2 <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	6959      	ldr	r1, [r3, #20]
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	88da      	ldrh	r2, [r3, #6]
 80027e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027ea:	f004 f90e 	bl	8006a0a <USB_ReadPMA>
 80027ee:	e078      	b.n	80028e2 <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	78db      	ldrb	r3, [r3, #3]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d108      	bne.n	800280a <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027fa:	461a      	mov	r2, r3
 80027fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f919 	bl	8002a36 <HAL_PCD_EP_DB_Receive>
 8002804:	4603      	mov	r3, r0
 8002806:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002808:	e06b      	b.n	80028e2 <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	b29b      	uxth	r3, r3
 800281c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002824:	847b      	strh	r3, [r7, #34]	; 0x22
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	441a      	add	r2, r3
 8002834:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800283a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800283e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002842:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002846:	b29b      	uxth	r3, r3
 8002848:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	b29b      	uxth	r3, r3
 800285c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01f      	beq.n	80028a4 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800286c:	b29b      	uxth	r3, r3
 800286e:	461a      	mov	r2, r3
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	4413      	add	r3, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	4413      	add	r3, r2
 800287e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002888:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800288a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800288c:	2b00      	cmp	r3, #0
 800288e:	d028      	beq.n	80028e2 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	6959      	ldr	r1, [r3, #20]
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	891a      	ldrh	r2, [r3, #8]
 800289c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800289e:	f004 f8b4 	bl	8006a0a <USB_ReadPMA>
 80028a2:	e01e      	b.n	80028e2 <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	4413      	add	r3, r2
 80028be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80028ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	6959      	ldr	r1, [r3, #20]
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	895a      	ldrh	r2, [r3, #10]
 80028dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028de:	f004 f894 	bl	8006a0a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	69da      	ldr	r2, [r3, #28]
 80028e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028e8:	441a      	add	r2, r3
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028f4:	441a      	add	r2, r3
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d004      	beq.n	800290c <PCD_EP_ISR_Handler+0x4aa>
 8002902:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	429a      	cmp	r2, r3
 800290a:	d206      	bcs.n	800291a <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	4619      	mov	r1, r3
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f005 fe12 	bl	800853c <HAL_PCD_DataOutStageCallback>
 8002918:	e005      	b.n	8002926 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002920:	4618      	mov	r0, r3
 8002922:	f002 fbde 	bl	80050e2 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002926:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292c:	2b00      	cmp	r3, #0
 800292e:	d074      	beq.n	8002a1a <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 8002930:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	4413      	add	r3, r2
 8002942:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	b29b      	uxth	r3, r3
 8002956:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800295a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295e:	843b      	strh	r3, [r7, #32]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	441a      	add	r2, r3
 800296e:	8c3b      	ldrh	r3, [r7, #32]
 8002970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002978:	b29b      	uxth	r3, r3
 800297a:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	78db      	ldrb	r3, [r3, #3]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d144      	bne.n	8002a0e <PCD_EP_ISR_Handler+0x5ac>
 8002984:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d13f      	bne.n	8002a0e <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002996:	b29b      	uxth	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4413      	add	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	699a      	ldr	r2, [r3, #24]
 80029b8:	8bfb      	ldrh	r3, [r7, #30]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d906      	bls.n	80029cc <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	8bfb      	ldrh	r3, [r7, #30]
 80029c4:	1ad2      	subs	r2, r2, r3
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	619a      	str	r2, [r3, #24]
 80029ca:	e002      	b.n	80029d2 <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	2200      	movs	r2, #0
 80029d0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	4619      	mov	r1, r3
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f005 fdc6 	bl	8008572 <HAL_PCD_DataInStageCallback>
 80029e6:	e018      	b.n	8002a1a <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	8bfb      	ldrh	r3, [r7, #30]
 80029ee:	441a      	add	r2, r3
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	8bfb      	ldrh	r3, [r7, #30]
 80029fa:	441a      	add	r2, r3
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a06:	4618      	mov	r0, r3
 8002a08:	f002 fb6b 	bl	80050e2 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002a0c:	e005      	b.n	8002a1a <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a10:	461a      	mov	r2, r3
 8002a12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f917 	bl	8002c48 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	b21b      	sxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f6ff ad20 	blt.w	800246c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3738      	adds	r7, #56	; 0x38
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b088      	sub	sp, #32
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	4613      	mov	r3, r2
 8002a42:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d07c      	beq.n	8002b48 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4413      	add	r3, r2
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	4413      	add	r3, r2
 8002a68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a72:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	699a      	ldr	r2, [r3, #24]
 8002a78:	8b7b      	ldrh	r3, [r7, #26]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d306      	bcc.n	8002a8c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	8b7b      	ldrh	r3, [r7, #26]
 8002a84:	1ad2      	subs	r2, r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	619a      	str	r2, [r3, #24]
 8002a8a:	e002      	b.n	8002a92 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d123      	bne.n	8002ae2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab4:	833b      	strh	r3, [r7, #24]
 8002ab6:	8b3b      	ldrh	r3, [r7, #24]
 8002ab8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002abc:	833b      	strh	r3, [r7, #24]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	441a      	add	r2, r3
 8002acc:	8b3b      	ldrh	r3, [r7, #24]
 8002ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01f      	beq.n	8002b2c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b06:	82fb      	strh	r3, [r7, #22]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	441a      	add	r2, r3
 8002b16:	8afb      	ldrh	r3, [r7, #22]
 8002b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b2c:	8b7b      	ldrh	r3, [r7, #26]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8085 	beq.w	8002c3e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	6959      	ldr	r1, [r3, #20]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	891a      	ldrh	r2, [r3, #8]
 8002b40:	8b7b      	ldrh	r3, [r7, #26]
 8002b42:	f003 ff62 	bl	8006a0a <USB_ReadPMA>
 8002b46:	e07a      	b.n	8002c3e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	4413      	add	r3, r2
 8002b62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b6c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	8b7b      	ldrh	r3, [r7, #26]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d306      	bcc.n	8002b86 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	699a      	ldr	r2, [r3, #24]
 8002b7c:	8b7b      	ldrh	r3, [r7, #26]
 8002b7e:	1ad2      	subs	r2, r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	619a      	str	r2, [r3, #24]
 8002b84:	e002      	b.n	8002b8c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d123      	bne.n	8002bdc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bae:	83fb      	strh	r3, [r7, #30]
 8002bb0:	8bfb      	ldrh	r3, [r7, #30]
 8002bb2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bb6:	83fb      	strh	r3, [r7, #30]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	441a      	add	r2, r3
 8002bc6:	8bfb      	ldrh	r3, [r7, #30]
 8002bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d11f      	bne.n	8002c26 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c00:	83bb      	strh	r3, [r7, #28]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	441a      	add	r2, r3
 8002c10:	8bbb      	ldrh	r3, [r7, #28]
 8002c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c26:	8b7b      	ldrh	r3, [r7, #26]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	6959      	ldr	r1, [r3, #20]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	895a      	ldrh	r2, [r3, #10]
 8002c38:	8b7b      	ldrh	r3, [r7, #26]
 8002c3a:	f003 fee6 	bl	8006a0a <USB_ReadPMA>
    }
  }

  return count;
 8002c3e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3720      	adds	r7, #32
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b0a2      	sub	sp, #136	; 0x88
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	4613      	mov	r3, r2
 8002c54:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 81c5 	beq.w	8002fec <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d907      	bls.n	8002ca6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c9e:	1ad2      	subs	r2, r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	619a      	str	r2, [r3, #24]
 8002ca4:	e002      	b.n	8002cac <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f040 80b9 	bne.w	8002e28 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	785b      	ldrb	r3, [r3, #1]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d126      	bne.n	8002d0c <HAL_PCD_EP_DB_Transmit+0xc4>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	4413      	add	r3, r2
 8002cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	00da      	lsls	r2, r3, #3
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	4413      	add	r3, r2
 8002ce0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	801a      	strh	r2, [r3, #0]
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	801a      	strh	r2, [r3, #0]
 8002d0a:	e01a      	b.n	8002d42 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	785b      	ldrb	r3, [r3, #1]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d116      	bne.n	8002d42 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	633b      	str	r3, [r7, #48]	; 0x30
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d28:	4413      	add	r3, r2
 8002d2a:	633b      	str	r3, [r7, #48]	; 0x30
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	00da      	lsls	r2, r3, #3
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	4413      	add	r3, r2
 8002d36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3e:	2200      	movs	r2, #0
 8002d40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	623b      	str	r3, [r7, #32]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	785b      	ldrb	r3, [r3, #1]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d126      	bne.n	8002d9e <HAL_PCD_EP_DB_Transmit+0x156>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	61bb      	str	r3, [r7, #24]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	4413      	add	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	00da      	lsls	r2, r3, #3
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	4413      	add	r3, r2
 8002d72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	801a      	strh	r2, [r3, #0]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	801a      	strh	r2, [r3, #0]
 8002d9c:	e017      	b.n	8002dce <HAL_PCD_EP_DB_Transmit+0x186>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	785b      	ldrb	r3, [r3, #1]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d113      	bne.n	8002dce <HAL_PCD_EP_DB_Transmit+0x186>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	461a      	mov	r2, r3
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	4413      	add	r3, r2
 8002db6:	623b      	str	r3, [r7, #32]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	00da      	lsls	r2, r3, #3
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f005 fbcc 	bl	8008572 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 82d2 	beq.w	800338a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e00:	827b      	strh	r3, [r7, #18]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	441a      	add	r2, r3
 8002e10:	8a7b      	ldrh	r3, [r7, #18]
 8002e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	8013      	strh	r3, [r2, #0]
 8002e26:	e2b0      	b.n	800338a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d021      	beq.n	8002e76 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	461a      	mov	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	441a      	add	r2, r3
 8002e5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	f040 8284 	bne.w	800338a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e8a:	441a      	add	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e98:	441a      	add	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	6a1a      	ldr	r2, [r3, #32]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d309      	bcc.n	8002ebe <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	6a1a      	ldr	r2, [r3, #32]
 8002eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb6:	1ad2      	subs	r2, r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	621a      	str	r2, [r3, #32]
 8002ebc:	e015      	b.n	8002eea <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d107      	bne.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 8002ec6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ed4:	e009      	b.n	8002eea <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	785b      	ldrb	r3, [r3, #1]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d155      	bne.n	8002f9e <HAL_PCD_EP_DB_Transmit+0x356>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f06:	4413      	add	r3, r2
 8002f08:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	00da      	lsls	r2, r3, #3
 8002f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f12:	4413      	add	r3, r2
 8002f14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f18:	637b      	str	r3, [r7, #52]	; 0x34
 8002f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d112      	bne.n	8002f46 <HAL_PCD_EP_DB_Transmit+0x2fe>
 8002f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2e:	801a      	strh	r2, [r3, #0]
 8002f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f42:	801a      	strh	r2, [r3, #0]
 8002f44:	e047      	b.n	8002fd6 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f48:	2b3e      	cmp	r3, #62	; 0x3e
 8002f4a:	d811      	bhi.n	8002f70 <HAL_PCD_EP_DB_Transmit+0x328>
 8002f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f4e:	085b      	lsrs	r3, r3, #1
 8002f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HAL_PCD_EP_DB_Transmit+0x31a>
 8002f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f5e:	3301      	adds	r3, #1
 8002f60:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	029b      	lsls	r3, r3, #10
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f6c:	801a      	strh	r2, [r3, #0]
 8002f6e:	e032      	b.n	8002fd6 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d102      	bne.n	8002f86 <HAL_PCD_EP_DB_Transmit+0x33e>
 8002f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f82:	3b01      	subs	r3, #1
 8002f84:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	029b      	lsls	r3, r3, #10
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9a:	801a      	strh	r2, [r3, #0]
 8002f9c:	e01b      	b.n	8002fd6 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	785b      	ldrb	r3, [r3, #1]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d117      	bne.n	8002fd6 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	643b      	str	r3, [r7, #64]	; 0x40
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fba:	4413      	add	r3, r2
 8002fbc:	643b      	str	r3, [r7, #64]	; 0x40
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	00da      	lsls	r2, r3, #3
 8002fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	6959      	ldr	r1, [r3, #20]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	891a      	ldrh	r2, [r3, #8]
 8002fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	f003 fcce 	bl	8006986 <USB_WritePMA>
 8002fea:	e1ce      	b.n	800338a <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4413      	add	r3, r2
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	4413      	add	r3, r2
 8003006:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003010:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	699a      	ldr	r2, [r3, #24]
 8003018:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800301c:	429a      	cmp	r2, r3
 800301e:	d307      	bcc.n	8003030 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	699a      	ldr	r2, [r3, #24]
 8003024:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003028:	1ad2      	subs	r2, r2, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	619a      	str	r2, [r3, #24]
 800302e:	e002      	b.n	8003036 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2200      	movs	r2, #0
 8003034:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b00      	cmp	r3, #0
 800303c:	f040 80c4 	bne.w	80031c8 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	785b      	ldrb	r3, [r3, #1]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d126      	bne.n	8003096 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003056:	b29b      	uxth	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800305c:	4413      	add	r3, r2
 800305e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	00da      	lsls	r2, r3, #3
 8003066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003068:	4413      	add	r3, r2
 800306a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800306e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	b29b      	uxth	r3, r3
 8003076:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800307a:	b29a      	uxth	r2, r3
 800307c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800307e:	801a      	strh	r2, [r3, #0]
 8003080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	b29b      	uxth	r3, r3
 8003086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800308a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800308e:	b29a      	uxth	r2, r3
 8003090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003092:	801a      	strh	r2, [r3, #0]
 8003094:	e01a      	b.n	80030cc <HAL_PCD_EP_DB_Transmit+0x484>
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	785b      	ldrb	r3, [r3, #1]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d116      	bne.n	80030cc <HAL_PCD_EP_DB_Transmit+0x484>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	677b      	str	r3, [r7, #116]	; 0x74
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	461a      	mov	r2, r3
 80030b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b2:	4413      	add	r3, r2
 80030b4:	677b      	str	r3, [r7, #116]	; 0x74
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	00da      	lsls	r2, r3, #3
 80030bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030be:	4413      	add	r3, r2
 80030c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030c4:	673b      	str	r3, [r7, #112]	; 0x70
 80030c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030c8:	2200      	movs	r2, #0
 80030ca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	785b      	ldrb	r3, [r3, #1]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d12f      	bne.n	800313a <HAL_PCD_EP_DB_Transmit+0x4f2>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030f2:	4413      	add	r3, r2
 80030f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	00da      	lsls	r2, r3, #3
 80030fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003102:	4413      	add	r3, r2
 8003104:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800310c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	b29b      	uxth	r3, r3
 8003114:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003118:	b29a      	uxth	r2, r3
 800311a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800311e:	801a      	strh	r2, [r3, #0]
 8003120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	b29b      	uxth	r3, r3
 8003128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800312c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003130:	b29a      	uxth	r2, r3
 8003132:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003136:	801a      	strh	r2, [r3, #0]
 8003138:	e017      	b.n	800316a <HAL_PCD_EP_DB_Transmit+0x522>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	785b      	ldrb	r3, [r3, #1]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d113      	bne.n	800316a <HAL_PCD_EP_DB_Transmit+0x522>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800314a:	b29b      	uxth	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003150:	4413      	add	r3, r2
 8003152:	67bb      	str	r3, [r7, #120]	; 0x78
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	00da      	lsls	r2, r3, #3
 800315a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800315c:	4413      	add	r3, r2
 800315e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003162:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003164:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003166:	2200      	movs	r2, #0
 8003168:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	4619      	mov	r1, r3
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f005 f9fe 	bl	8008572 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317c:	2b00      	cmp	r3, #0
 800317e:	f040 8104 	bne.w	800338a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	b29b      	uxth	r3, r3
 8003194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	441a      	add	r2, r3
 80031ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80031b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	8013      	strh	r3, [r2, #0]
 80031c6:	e0e0      	b.n	800338a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d121      	bne.n	8003216 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ec:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	441a      	add	r2, r3
 80031fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800320a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800320e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003212:	b29b      	uxth	r3, r3
 8003214:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800321c:	2b01      	cmp	r3, #1
 800321e:	f040 80b4 	bne.w	800338a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800322a:	441a      	add	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003238:	441a      	add	r2, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	6a1a      	ldr	r2, [r3, #32]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	429a      	cmp	r2, r3
 8003248:	d309      	bcc.n	800325e <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	6a1a      	ldr	r2, [r3, #32]
 8003254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003256:	1ad2      	subs	r2, r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	621a      	str	r2, [r3, #32]
 800325c:	e015      	b.n	800328a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d107      	bne.n	8003276 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 8003266:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800326a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003274:	e009      	b.n	800328a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2200      	movs	r2, #0
 8003280:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	667b      	str	r3, [r7, #100]	; 0x64
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	785b      	ldrb	r3, [r3, #1]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d155      	bne.n	8003344 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ac:	4413      	add	r3, r2
 80032ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	00da      	lsls	r2, r3, #3
 80032b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032b8:	4413      	add	r3, r2
 80032ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032be:	65bb      	str	r3, [r7, #88]	; 0x58
 80032c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d112      	bne.n	80032ec <HAL_PCD_EP_DB_Transmit+0x6a4>
 80032c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d4:	801a      	strh	r2, [r3, #0]
 80032d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032e8:	801a      	strh	r2, [r3, #0]
 80032ea:	e044      	b.n	8003376 <HAL_PCD_EP_DB_Transmit+0x72e>
 80032ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ee:	2b3e      	cmp	r3, #62	; 0x3e
 80032f0:	d811      	bhi.n	8003316 <HAL_PCD_EP_DB_Transmit+0x6ce>
 80032f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f4:	085b      	lsrs	r3, r3, #1
 80032f6:	657b      	str	r3, [r7, #84]	; 0x54
 80032f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_PCD_EP_DB_Transmit+0x6c0>
 8003302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003304:	3301      	adds	r3, #1
 8003306:	657b      	str	r3, [r7, #84]	; 0x54
 8003308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800330a:	b29b      	uxth	r3, r3
 800330c:	029b      	lsls	r3, r3, #10
 800330e:	b29a      	uxth	r2, r3
 8003310:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003312:	801a      	strh	r2, [r3, #0]
 8003314:	e02f      	b.n	8003376 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	657b      	str	r3, [r7, #84]	; 0x54
 800331c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	2b00      	cmp	r3, #0
 8003324:	d102      	bne.n	800332c <HAL_PCD_EP_DB_Transmit+0x6e4>
 8003326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003328:	3b01      	subs	r3, #1
 800332a:	657b      	str	r3, [r7, #84]	; 0x54
 800332c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800332e:	b29b      	uxth	r3, r3
 8003330:	029b      	lsls	r3, r3, #10
 8003332:	b29b      	uxth	r3, r3
 8003334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800333c:	b29a      	uxth	r2, r3
 800333e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003340:	801a      	strh	r2, [r3, #0]
 8003342:	e018      	b.n	8003376 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	785b      	ldrb	r3, [r3, #1]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d114      	bne.n	8003376 <HAL_PCD_EP_DB_Transmit+0x72e>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003354:	b29b      	uxth	r3, r3
 8003356:	461a      	mov	r2, r3
 8003358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800335a:	4413      	add	r3, r2
 800335c:	667b      	str	r3, [r7, #100]	; 0x64
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	00da      	lsls	r2, r3, #3
 8003364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003366:	4413      	add	r3, r2
 8003368:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800336c:	663b      	str	r3, [r7, #96]	; 0x60
 800336e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003370:	b29a      	uxth	r2, r3
 8003372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003374:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	6959      	ldr	r1, [r3, #20]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	895a      	ldrh	r2, [r3, #10]
 8003382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003384:	b29b      	uxth	r3, r3
 8003386:	f003 fafe 	bl	8006986 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a4:	823b      	strh	r3, [r7, #16]
 80033a6:	8a3b      	ldrh	r3, [r7, #16]
 80033a8:	f083 0310 	eor.w	r3, r3, #16
 80033ac:	823b      	strh	r3, [r7, #16]
 80033ae:	8a3b      	ldrh	r3, [r7, #16]
 80033b0:	f083 0320 	eor.w	r3, r3, #32
 80033b4:	823b      	strh	r3, [r7, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	441a      	add	r2, r3
 80033c4:	8a3b      	ldrh	r3, [r7, #16]
 80033c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3788      	adds	r7, #136	; 0x88
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	607b      	str	r3, [r7, #4]
 80033ee:	460b      	mov	r3, r1
 80033f0:	817b      	strh	r3, [r7, #10]
 80033f2:	4613      	mov	r3, r2
 80033f4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80033f6:	897b      	ldrh	r3, [r7, #10]
 80033f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00b      	beq.n	800341a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003402:	897b      	ldrh	r3, [r7, #10]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4413      	add	r3, r2
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	e009      	b.n	800342e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800341a:	897a      	ldrh	r2, [r7, #10]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800342e:	893b      	ldrh	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d107      	bne.n	8003444 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2200      	movs	r2, #0
 8003438:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	b29a      	uxth	r2, r3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	80da      	strh	r2, [r3, #6]
 8003442:	e00b      	b.n	800345c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2201      	movs	r2, #1
 8003448:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	b29a      	uxth	r2, r3
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	0c1b      	lsrs	r3, r3, #16
 8003456:	b29a      	uxth	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	371c      	adds	r7, #28
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800346a:	b480      	push	{r7}
 800346c:	b085      	sub	sp, #20
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800348e:	b29b      	uxth	r3, r3
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	f043 0302 	orr.w	r3, r3, #2
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034c4:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40007000 	.word	0x40007000

080034dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ea:	d130      	bne.n	800354e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ec:	4b23      	ldr	r3, [pc, #140]	; (800357c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f8:	d038      	beq.n	800356c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034fa:	4b20      	ldr	r3, [pc, #128]	; (800357c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003502:	4a1e      	ldr	r2, [pc, #120]	; (800357c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003504:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003508:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800350a:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2232      	movs	r2, #50	; 0x32
 8003510:	fb02 f303 	mul.w	r3, r2, r3
 8003514:	4a1b      	ldr	r2, [pc, #108]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	0c9b      	lsrs	r3, r3, #18
 800351c:	3301      	adds	r3, #1
 800351e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003520:	e002      	b.n	8003528 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	3b01      	subs	r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003528:	4b14      	ldr	r3, [pc, #80]	; (800357c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003534:	d102      	bne.n	800353c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f2      	bne.n	8003522 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800353c:	4b0f      	ldr	r3, [pc, #60]	; (800357c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003548:	d110      	bne.n	800356c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e00f      	b.n	800356e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355a:	d007      	beq.n	800356c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800355c:	4b07      	ldr	r3, [pc, #28]	; (800357c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003564:	4a05      	ldr	r2, [pc, #20]	; (800357c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800356a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40007000 	.word	0x40007000
 8003580:	20000008 	.word	0x20000008
 8003584:	431bde83 	.word	0x431bde83

08003588 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003596:	6053      	str	r3, [r2, #4]
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40007000 	.word	0x40007000

080035a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	; 0x28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d102      	bne.n	80035bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f000 bc56 	b.w	8003e68 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035bc:	4ba1      	ldr	r3, [pc, #644]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 030c 	and.w	r3, r3, #12
 80035c4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035c6:	4b9f      	ldr	r3, [pc, #636]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 80e6 	beq.w	80037aa <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d007      	beq.n	80035f4 <HAL_RCC_OscConfig+0x4c>
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	2b0c      	cmp	r3, #12
 80035e8:	f040 808d 	bne.w	8003706 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	f040 8089 	bne.w	8003706 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035f4:	4b93      	ldr	r3, [pc, #588]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d006      	beq.n	800360e <HAL_RCC_OscConfig+0x66>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d102      	bne.n	800360e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f000 bc2d 	b.w	8003e68 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003612:	4b8c      	ldr	r3, [pc, #560]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d004      	beq.n	8003628 <HAL_RCC_OscConfig+0x80>
 800361e:	4b89      	ldr	r3, [pc, #548]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003626:	e005      	b.n	8003634 <HAL_RCC_OscConfig+0x8c>
 8003628:	4b86      	ldr	r3, [pc, #536]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 800362a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800362e:	091b      	lsrs	r3, r3, #4
 8003630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003634:	4293      	cmp	r3, r2
 8003636:	d224      	bcs.n	8003682 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fd87 	bl	8004150 <RCC_SetFlashLatencyFromMSIRange>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f000 bc0d 	b.w	8003e68 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800364e:	4b7d      	ldr	r3, [pc, #500]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a7c      	ldr	r2, [pc, #496]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003654:	f043 0308 	orr.w	r3, r3, #8
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	4b7a      	ldr	r3, [pc, #488]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	4977      	ldr	r1, [pc, #476]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003668:	4313      	orrs	r3, r2
 800366a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800366c:	4b75      	ldr	r3, [pc, #468]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	4972      	ldr	r1, [pc, #456]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 800367c:	4313      	orrs	r3, r2
 800367e:	604b      	str	r3, [r1, #4]
 8003680:	e025      	b.n	80036ce <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003682:	4b70      	ldr	r3, [pc, #448]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a6f      	ldr	r2, [pc, #444]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003688:	f043 0308 	orr.w	r3, r3, #8
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	4b6d      	ldr	r3, [pc, #436]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	496a      	ldr	r1, [pc, #424]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 800369c:	4313      	orrs	r3, r2
 800369e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036a0:	4b68      	ldr	r3, [pc, #416]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	4965      	ldr	r1, [pc, #404]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d109      	bne.n	80036ce <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fd46 	bl	8004150 <RCC_SetFlashLatencyFromMSIRange>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e3cc      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036ce:	f000 fcb3 	bl	8004038 <HAL_RCC_GetSysClockFreq>
 80036d2:	4602      	mov	r2, r0
 80036d4:	4b5b      	ldr	r3, [pc, #364]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	495a      	ldr	r1, [pc, #360]	; (8003848 <HAL_RCC_OscConfig+0x2a0>)
 80036e0:	5ccb      	ldrb	r3, [r1, r3]
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ea:	4a58      	ldr	r2, [pc, #352]	; (800384c <HAL_RCC_OscConfig+0x2a4>)
 80036ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036ee:	4b58      	ldr	r3, [pc, #352]	; (8003850 <HAL_RCC_OscConfig+0x2a8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fd f992 	bl	8000a1c <HAL_InitTick>
 80036f8:	4603      	mov	r3, r0
 80036fa:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d052      	beq.n	80037a8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003702:	7dfb      	ldrb	r3, [r7, #23]
 8003704:	e3b0      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d032      	beq.n	8003774 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800370e:	4b4d      	ldr	r3, [pc, #308]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a4c      	ldr	r2, [pc, #304]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800371a:	f7fd f9cf 	bl	8000abc <HAL_GetTick>
 800371e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003722:	f7fd f9cb 	bl	8000abc <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e399      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003734:	4b43      	ldr	r3, [pc, #268]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003740:	4b40      	ldr	r3, [pc, #256]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a3f      	ldr	r2, [pc, #252]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003746:	f043 0308 	orr.w	r3, r3, #8
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	4b3d      	ldr	r3, [pc, #244]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	493a      	ldr	r1, [pc, #232]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800375e:	4b39      	ldr	r3, [pc, #228]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	4935      	ldr	r1, [pc, #212]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 800376e:	4313      	orrs	r3, r2
 8003770:	604b      	str	r3, [r1, #4]
 8003772:	e01a      	b.n	80037aa <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003774:	4b33      	ldr	r3, [pc, #204]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a32      	ldr	r2, [pc, #200]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 800377a:	f023 0301 	bic.w	r3, r3, #1
 800377e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003780:	f7fd f99c 	bl	8000abc <HAL_GetTick>
 8003784:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003788:	f7fd f998 	bl	8000abc <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e366      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800379a:	4b2a      	ldr	r3, [pc, #168]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x1e0>
 80037a6:	e000      	b.n	80037aa <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d073      	beq.n	800389e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d005      	beq.n	80037c8 <HAL_RCC_OscConfig+0x220>
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	2b0c      	cmp	r3, #12
 80037c0:	d10e      	bne.n	80037e0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d10b      	bne.n	80037e0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c8:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d063      	beq.n	800389c <HAL_RCC_OscConfig+0x2f4>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d15f      	bne.n	800389c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e343      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e8:	d106      	bne.n	80037f8 <HAL_RCC_OscConfig+0x250>
 80037ea:	4b16      	ldr	r3, [pc, #88]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a15      	ldr	r2, [pc, #84]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 80037f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	e01d      	b.n	8003834 <HAL_RCC_OscConfig+0x28c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003800:	d10c      	bne.n	800381c <HAL_RCC_OscConfig+0x274>
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a0f      	ldr	r2, [pc, #60]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a0c      	ldr	r2, [pc, #48]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	e00b      	b.n	8003834 <HAL_RCC_OscConfig+0x28c>
 800381c:	4b09      	ldr	r3, [pc, #36]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a08      	ldr	r2, [pc, #32]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 8003822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a05      	ldr	r2, [pc, #20]	; (8003844 <HAL_RCC_OscConfig+0x29c>)
 800382e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01b      	beq.n	8003874 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fd f93e 	bl	8000abc <HAL_GetTick>
 8003840:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003842:	e010      	b.n	8003866 <HAL_RCC_OscConfig+0x2be>
 8003844:	40021000 	.word	0x40021000
 8003848:	08008cbc 	.word	0x08008cbc
 800384c:	20000008 	.word	0x20000008
 8003850:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003854:	f7fd f932 	bl	8000abc <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e300      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003866:	4ba0      	ldr	r3, [pc, #640]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x2ac>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fd f922 	bl	8000abc <HAL_GetTick>
 8003878:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800387c:	f7fd f91e 	bl	8000abc <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	; 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e2ec      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800388e:	4b96      	ldr	r3, [pc, #600]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x2d4>
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d060      	beq.n	800396c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_OscConfig+0x314>
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	2b0c      	cmp	r3, #12
 80038b4:	d119      	bne.n	80038ea <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d116      	bne.n	80038ea <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038bc:	4b8a      	ldr	r3, [pc, #552]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_OscConfig+0x32c>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e2c9      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d4:	4b84      	ldr	r3, [pc, #528]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	061b      	lsls	r3, r3, #24
 80038e2:	4981      	ldr	r1, [pc, #516]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038e8:	e040      	b.n	800396c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d023      	beq.n	800393a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f2:	4b7d      	ldr	r3, [pc, #500]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7c      	ldr	r2, [pc, #496]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 80038f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7fd f8dd 	bl	8000abc <HAL_GetTick>
 8003902:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003906:	f7fd f8d9 	bl	8000abc <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e2a7      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003918:	4b73      	ldr	r3, [pc, #460]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003924:	4b70      	ldr	r3, [pc, #448]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	061b      	lsls	r3, r3, #24
 8003932:	496d      	ldr	r1, [pc, #436]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 8003934:	4313      	orrs	r3, r2
 8003936:	604b      	str	r3, [r1, #4]
 8003938:	e018      	b.n	800396c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393a:	4b6b      	ldr	r3, [pc, #428]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a6a      	ldr	r2, [pc, #424]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 8003940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003946:	f7fd f8b9 	bl	8000abc <HAL_GetTick>
 800394a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800394e:	f7fd f8b5 	bl	8000abc <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e283      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003960:	4b61      	ldr	r3, [pc, #388]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1f0      	bne.n	800394e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	d07f      	beq.n	8003a78 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d05f      	beq.n	8003a40 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003980:	4b59      	ldr	r3, [pc, #356]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 8003982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003986:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699a      	ldr	r2, [r3, #24]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	429a      	cmp	r2, r3
 8003994:	d037      	beq.n	8003a06 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d006      	beq.n	80039ae <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e25c      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d01b      	beq.n	80039f0 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80039b8:	4b4b      	ldr	r3, [pc, #300]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 80039ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039be:	4a4a      	ldr	r2, [pc, #296]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039c8:	f7fd f878 	bl	8000abc <HAL_GetTick>
 80039cc:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d0:	f7fd f874 	bl	8000abc <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b11      	cmp	r3, #17
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e242      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039e2:	4b41      	ldr	r3, [pc, #260]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 80039e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1ef      	bne.n	80039d0 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80039f0:	4b3d      	ldr	r3, [pc, #244]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 80039f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039f6:	f023 0210 	bic.w	r2, r3, #16
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	493a      	ldr	r1, [pc, #232]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a06:	4b38      	ldr	r3, [pc, #224]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 8003a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a0c:	4a36      	ldr	r2, [pc, #216]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a16:	f7fd f851 	bl	8000abc <HAL_GetTick>
 8003a1a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a1e:	f7fd f84d 	bl	8000abc <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b11      	cmp	r3, #17
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e21b      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a30:	4b2d      	ldr	r3, [pc, #180]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 8003a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0ef      	beq.n	8003a1e <HAL_RCC_OscConfig+0x476>
 8003a3e:	e01b      	b.n	8003a78 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a40:	4b29      	ldr	r3, [pc, #164]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 8003a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a46:	4a28      	ldr	r2, [pc, #160]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a50:	f7fd f834 	bl	8000abc <HAL_GetTick>
 8003a54:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a58:	f7fd f830 	bl	8000abc <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b11      	cmp	r3, #17
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e1fe      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 8003a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1ef      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 80c1 	beq.w	8003c08 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a86:	2300      	movs	r3, #0
 8003a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a8c:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10e      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a98:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9c:	4a12      	ldr	r2, [pc, #72]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 8003a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8003aa4:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <HAL_RCC_OscConfig+0x540>)
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <HAL_RCC_OscConfig+0x544>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d11c      	bne.n	8003afc <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <HAL_RCC_OscConfig+0x544>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a09      	ldr	r2, [pc, #36]	; (8003aec <HAL_RCC_OscConfig+0x544>)
 8003ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ace:	f7fc fff5 	bl	8000abc <HAL_GetTick>
 8003ad2:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad4:	e00c      	b.n	8003af0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad6:	f7fc fff1 	bl	8000abc <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d905      	bls.n	8003af0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e1bf      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af0:	4bb1      	ldr	r3, [pc, #708]	; (8003db8 <HAL_RCC_OscConfig+0x810>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0ec      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d02c      	beq.n	8003b62 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003b08:	4bac      	ldr	r3, [pc, #688]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1a:	49a8      	ldr	r1, [pc, #672]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d010      	beq.n	8003b50 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b2e:	4ba3      	ldr	r3, [pc, #652]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b34:	4aa1      	ldr	r2, [pc, #644]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003b36:	f043 0304 	orr.w	r3, r3, #4
 8003b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b3e:	4b9f      	ldr	r3, [pc, #636]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b44:	4a9d      	ldr	r2, [pc, #628]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b4e:	e018      	b.n	8003b82 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b50:	4b9a      	ldr	r3, [pc, #616]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b56:	4a99      	ldr	r2, [pc, #612]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b60:	e00f      	b.n	8003b82 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b62:	4b96      	ldr	r3, [pc, #600]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b68:	4a94      	ldr	r2, [pc, #592]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b72:	4b92      	ldr	r3, [pc, #584]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b78:	4a90      	ldr	r2, [pc, #576]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003b7a:	f023 0304 	bic.w	r3, r3, #4
 8003b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d016      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8a:	f7fc ff97 	bl	8000abc <HAL_GetTick>
 8003b8e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b90:	e00a      	b.n	8003ba8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b92:	f7fc ff93 	bl	8000abc <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e15f      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba8:	4b84      	ldr	r3, [pc, #528]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0ed      	beq.n	8003b92 <HAL_RCC_OscConfig+0x5ea>
 8003bb6:	e01d      	b.n	8003bf4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb8:	f7fc ff80 	bl	8000abc <HAL_GetTick>
 8003bbc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc0:	f7fc ff7c 	bl	8000abc <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e148      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bd6:	4b79      	ldr	r3, [pc, #484]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1ed      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003be4:	4b75      	ldr	r3, [pc, #468]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	4a74      	ldr	r2, [pc, #464]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d105      	bne.n	8003c08 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bfc:	4b6f      	ldr	r3, [pc, #444]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c00:	4a6e      	ldr	r2, [pc, #440]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d03c      	beq.n	8003c8e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01c      	beq.n	8003c56 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c1c:	4b67      	ldr	r3, [pc, #412]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c22:	4a66      	ldr	r2, [pc, #408]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fc ff46 	bl	8000abc <HAL_GetTick>
 8003c30:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c34:	f7fc ff42 	bl	8000abc <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e110      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c46:	4b5d      	ldr	r3, [pc, #372]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003c48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0ef      	beq.n	8003c34 <HAL_RCC_OscConfig+0x68c>
 8003c54:	e01b      	b.n	8003c8e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c56:	4b59      	ldr	r3, [pc, #356]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c5c:	4a57      	ldr	r2, [pc, #348]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003c5e:	f023 0301 	bic.w	r3, r3, #1
 8003c62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c66:	f7fc ff29 	bl	8000abc <HAL_GetTick>
 8003c6a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c6e:	f7fc ff25 	bl	8000abc <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e0f3      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c80:	4b4e      	ldr	r3, [pc, #312]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003c82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1ef      	bne.n	8003c6e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 80e7 	beq.w	8003e66 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	f040 80b7 	bne.w	8003e10 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ca2:	4b46      	ldr	r3, [pc, #280]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f003 0203 	and.w	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d124      	bne.n	8003d00 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d11b      	bne.n	8003d00 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d113      	bne.n	8003d00 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d109      	bne.n	8003d00 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	085b      	lsrs	r3, r3, #1
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d061      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	2b0c      	cmp	r3, #12
 8003d04:	d056      	beq.n	8003db4 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d06:	4b2d      	ldr	r3, [pc, #180]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a2c      	ldr	r2, [pc, #176]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003d0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d12:	f7fc fed3 	bl	8000abc <HAL_GetTick>
 8003d16:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1a:	f7fc fecf 	bl	8000abc <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e09d      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d2c:	4b23      	ldr	r3, [pc, #140]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f0      	bne.n	8003d1a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d38:	4b20      	ldr	r3, [pc, #128]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	4b20      	ldr	r3, [pc, #128]	; (8003dc0 <HAL_RCC_OscConfig+0x818>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d48:	3a01      	subs	r2, #1
 8003d4a:	0112      	lsls	r2, r2, #4
 8003d4c:	4311      	orrs	r1, r2
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d52:	0212      	lsls	r2, r2, #8
 8003d54:	4311      	orrs	r1, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d5a:	0852      	lsrs	r2, r2, #1
 8003d5c:	3a01      	subs	r2, #1
 8003d5e:	0552      	lsls	r2, r2, #21
 8003d60:	4311      	orrs	r1, r2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d66:	0852      	lsrs	r2, r2, #1
 8003d68:	3a01      	subs	r2, #1
 8003d6a:	0652      	lsls	r2, r2, #25
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	4913      	ldr	r1, [pc, #76]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a10      	ldr	r2, [pc, #64]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d80:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4a0d      	ldr	r2, [pc, #52]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d8c:	f7fc fe96 	bl	8000abc <HAL_GetTick>
 8003d90:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d94:	f7fc fe92 	bl	8000abc <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e060      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da6:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <HAL_RCC_OscConfig+0x814>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003db2:	e058      	b.n	8003e66 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e057      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
 8003db8:	40007000 	.word	0x40007000
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc4:	4b2a      	ldr	r3, [pc, #168]	; (8003e70 <HAL_RCC_OscConfig+0x8c8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d14a      	bne.n	8003e66 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003dd0:	4b27      	ldr	r3, [pc, #156]	; (8003e70 <HAL_RCC_OscConfig+0x8c8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a26      	ldr	r2, [pc, #152]	; (8003e70 <HAL_RCC_OscConfig+0x8c8>)
 8003dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ddc:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <HAL_RCC_OscConfig+0x8c8>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	4a23      	ldr	r2, [pc, #140]	; (8003e70 <HAL_RCC_OscConfig+0x8c8>)
 8003de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003de6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003de8:	f7fc fe68 	bl	8000abc <HAL_GetTick>
 8003dec:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df0:	f7fc fe64 	bl	8000abc <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e032      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e02:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <HAL_RCC_OscConfig+0x8c8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCC_OscConfig+0x848>
 8003e0e:	e02a      	b.n	8003e66 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	2b0c      	cmp	r3, #12
 8003e14:	d025      	beq.n	8003e62 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e16:	4b16      	ldr	r3, [pc, #88]	; (8003e70 <HAL_RCC_OscConfig+0x8c8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a15      	ldr	r2, [pc, #84]	; (8003e70 <HAL_RCC_OscConfig+0x8c8>)
 8003e1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e20:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003e22:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <HAL_RCC_OscConfig+0x8c8>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	4a12      	ldr	r2, [pc, #72]	; (8003e70 <HAL_RCC_OscConfig+0x8c8>)
 8003e28:	f023 0303 	bic.w	r3, r3, #3
 8003e2c:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003e2e:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <HAL_RCC_OscConfig+0x8c8>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	4a0f      	ldr	r2, [pc, #60]	; (8003e70 <HAL_RCC_OscConfig+0x8c8>)
 8003e34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003e38:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3a:	f7fc fe3f 	bl	8000abc <HAL_GetTick>
 8003e3e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e42:	f7fc fe3b 	bl	8000abc <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e009      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e54:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <HAL_RCC_OscConfig+0x8c8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1f0      	bne.n	8003e42 <HAL_RCC_OscConfig+0x89a>
 8003e60:	e001      	b.n	8003e66 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3728      	adds	r7, #40	; 0x28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40021000 	.word	0x40021000

08003e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0c8      	b.n	800401a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e88:	4b66      	ldr	r3, [pc, #408]	; (8004024 <HAL_RCC_ClockConfig+0x1b0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d910      	bls.n	8003eb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e96:	4b63      	ldr	r3, [pc, #396]	; (8004024 <HAL_RCC_ClockConfig+0x1b0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 0207 	bic.w	r2, r3, #7
 8003e9e:	4961      	ldr	r1, [pc, #388]	; (8004024 <HAL_RCC_ClockConfig+0x1b0>)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea6:	4b5f      	ldr	r3, [pc, #380]	; (8004024 <HAL_RCC_ClockConfig+0x1b0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0b0      	b.n	800401a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d04c      	beq.n	8003f5e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d107      	bne.n	8003edc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ecc:	4b56      	ldr	r3, [pc, #344]	; (8004028 <HAL_RCC_ClockConfig+0x1b4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d121      	bne.n	8003f1c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e09e      	b.n	800401a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d107      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ee4:	4b50      	ldr	r3, [pc, #320]	; (8004028 <HAL_RCC_ClockConfig+0x1b4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d115      	bne.n	8003f1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e092      	b.n	800401a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d107      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003efc:	4b4a      	ldr	r3, [pc, #296]	; (8004028 <HAL_RCC_ClockConfig+0x1b4>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d109      	bne.n	8003f1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e086      	b.n	800401a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f0c:	4b46      	ldr	r3, [pc, #280]	; (8004028 <HAL_RCC_ClockConfig+0x1b4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e07e      	b.n	800401a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f1c:	4b42      	ldr	r3, [pc, #264]	; (8004028 <HAL_RCC_ClockConfig+0x1b4>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f023 0203 	bic.w	r2, r3, #3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	493f      	ldr	r1, [pc, #252]	; (8004028 <HAL_RCC_ClockConfig+0x1b4>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f2e:	f7fc fdc5 	bl	8000abc <HAL_GetTick>
 8003f32:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f34:	e00a      	b.n	8003f4c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f36:	f7fc fdc1 	bl	8000abc <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e066      	b.n	800401a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4c:	4b36      	ldr	r3, [pc, #216]	; (8004028 <HAL_RCC_ClockConfig+0x1b4>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 020c 	and.w	r2, r3, #12
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d1eb      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d008      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f6a:	4b2f      	ldr	r3, [pc, #188]	; (8004028 <HAL_RCC_ClockConfig+0x1b4>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	492c      	ldr	r1, [pc, #176]	; (8004028 <HAL_RCC_ClockConfig+0x1b4>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f7c:	4b29      	ldr	r3, [pc, #164]	; (8004024 <HAL_RCC_ClockConfig+0x1b0>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d210      	bcs.n	8003fac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8a:	4b26      	ldr	r3, [pc, #152]	; (8004024 <HAL_RCC_ClockConfig+0x1b0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 0207 	bic.w	r2, r3, #7
 8003f92:	4924      	ldr	r1, [pc, #144]	; (8004024 <HAL_RCC_ClockConfig+0x1b0>)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	4b22      	ldr	r3, [pc, #136]	; (8004024 <HAL_RCC_ClockConfig+0x1b0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e036      	b.n	800401a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb8:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <HAL_RCC_ClockConfig+0x1b4>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4918      	ldr	r1, [pc, #96]	; (8004028 <HAL_RCC_ClockConfig+0x1b4>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fd6:	4b14      	ldr	r3, [pc, #80]	; (8004028 <HAL_RCC_ClockConfig+0x1b4>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4910      	ldr	r1, [pc, #64]	; (8004028 <HAL_RCC_ClockConfig+0x1b4>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fea:	f000 f825 	bl	8004038 <HAL_RCC_GetSysClockFreq>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <HAL_RCC_ClockConfig+0x1b4>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	490c      	ldr	r1, [pc, #48]	; (800402c <HAL_RCC_ClockConfig+0x1b8>)
 8003ffc:	5ccb      	ldrb	r3, [r1, r3]
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	fa22 f303 	lsr.w	r3, r2, r3
 8004006:	4a0a      	ldr	r2, [pc, #40]	; (8004030 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800400a:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <HAL_RCC_ClockConfig+0x1c0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fc fd04 	bl	8000a1c <HAL_InitTick>
 8004014:	4603      	mov	r3, r0
 8004016:	72fb      	strb	r3, [r7, #11]

  return status;
 8004018:	7afb      	ldrb	r3, [r7, #11]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40022000 	.word	0x40022000
 8004028:	40021000 	.word	0x40021000
 800402c:	08008cbc 	.word	0x08008cbc
 8004030:	20000008 	.word	0x20000008
 8004034:	2000001c 	.word	0x2000001c

08004038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004038:	b480      	push	{r7}
 800403a:	b089      	sub	sp, #36	; 0x24
 800403c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	61fb      	str	r3, [r7, #28]
 8004042:	2300      	movs	r3, #0
 8004044:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004046:	4b3e      	ldr	r3, [pc, #248]	; (8004140 <HAL_RCC_GetSysClockFreq+0x108>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004050:	4b3b      	ldr	r3, [pc, #236]	; (8004140 <HAL_RCC_GetSysClockFreq+0x108>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_RCC_GetSysClockFreq+0x34>
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b0c      	cmp	r3, #12
 8004064:	d121      	bne.n	80040aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d11e      	bne.n	80040aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800406c:	4b34      	ldr	r3, [pc, #208]	; (8004140 <HAL_RCC_GetSysClockFreq+0x108>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d107      	bne.n	8004088 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004078:	4b31      	ldr	r3, [pc, #196]	; (8004140 <HAL_RCC_GetSysClockFreq+0x108>)
 800407a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800407e:	0a1b      	lsrs	r3, r3, #8
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	e005      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004088:	4b2d      	ldr	r3, [pc, #180]	; (8004140 <HAL_RCC_GetSysClockFreq+0x108>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004094:	4a2b      	ldr	r2, [pc, #172]	; (8004144 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800409c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10d      	bne.n	80040c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040a8:	e00a      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d102      	bne.n	80040b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040b0:	4b25      	ldr	r3, [pc, #148]	; (8004148 <HAL_RCC_GetSysClockFreq+0x110>)
 80040b2:	61bb      	str	r3, [r7, #24]
 80040b4:	e004      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d101      	bne.n	80040c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040bc:	4b23      	ldr	r3, [pc, #140]	; (800414c <HAL_RCC_GetSysClockFreq+0x114>)
 80040be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2b0c      	cmp	r3, #12
 80040c4:	d134      	bne.n	8004130 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040c6:	4b1e      	ldr	r3, [pc, #120]	; (8004140 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d003      	beq.n	80040de <HAL_RCC_GetSysClockFreq+0xa6>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d003      	beq.n	80040e4 <HAL_RCC_GetSysClockFreq+0xac>
 80040dc:	e005      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040de:	4b1a      	ldr	r3, [pc, #104]	; (8004148 <HAL_RCC_GetSysClockFreq+0x110>)
 80040e0:	617b      	str	r3, [r7, #20]
      break;
 80040e2:	e005      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040e4:	4b19      	ldr	r3, [pc, #100]	; (800414c <HAL_RCC_GetSysClockFreq+0x114>)
 80040e6:	617b      	str	r3, [r7, #20]
      break;
 80040e8:	e002      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	617b      	str	r3, [r7, #20]
      break;
 80040ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040f0:	4b13      	ldr	r3, [pc, #76]	; (8004140 <HAL_RCC_GetSysClockFreq+0x108>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	091b      	lsrs	r3, r3, #4
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	3301      	adds	r3, #1
 80040fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <HAL_RCC_GetSysClockFreq+0x108>)
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	0a1b      	lsrs	r3, r3, #8
 8004104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	fb02 f203 	mul.w	r2, r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	fbb2 f3f3 	udiv	r3, r2, r3
 8004114:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004116:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <HAL_RCC_GetSysClockFreq+0x108>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	0e5b      	lsrs	r3, r3, #25
 800411c:	f003 0303 	and.w	r3, r3, #3
 8004120:	3301      	adds	r3, #1
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	fbb2 f3f3 	udiv	r3, r2, r3
 800412e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004130:	69bb      	ldr	r3, [r7, #24]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3724      	adds	r7, #36	; 0x24
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40021000 	.word	0x40021000
 8004144:	08008ccc 	.word	0x08008ccc
 8004148:	00f42400 	.word	0x00f42400
 800414c:	007a1200 	.word	0x007a1200

08004150 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004158:	2300      	movs	r3, #0
 800415a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800415c:	4b2a      	ldr	r3, [pc, #168]	; (8004208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800415e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004168:	f7ff f9aa 	bl	80034c0 <HAL_PWREx_GetVoltageRange>
 800416c:	6178      	str	r0, [r7, #20]
 800416e:	e014      	b.n	800419a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004170:	4b25      	ldr	r3, [pc, #148]	; (8004208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004174:	4a24      	ldr	r2, [pc, #144]	; (8004208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417a:	6593      	str	r3, [r2, #88]	; 0x58
 800417c:	4b22      	ldr	r3, [pc, #136]	; (8004208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800417e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004188:	f7ff f99a 	bl	80034c0 <HAL_PWREx_GetVoltageRange>
 800418c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800418e:	4b1e      	ldr	r3, [pc, #120]	; (8004208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004192:	4a1d      	ldr	r2, [pc, #116]	; (8004208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004198:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a0:	d10b      	bne.n	80041ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b80      	cmp	r3, #128	; 0x80
 80041a6:	d919      	bls.n	80041dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2ba0      	cmp	r3, #160	; 0xa0
 80041ac:	d902      	bls.n	80041b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041ae:	2302      	movs	r3, #2
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	e013      	b.n	80041dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041b4:	2301      	movs	r3, #1
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	e010      	b.n	80041dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b80      	cmp	r3, #128	; 0x80
 80041be:	d902      	bls.n	80041c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041c0:	2303      	movs	r3, #3
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	e00a      	b.n	80041dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b80      	cmp	r3, #128	; 0x80
 80041ca:	d102      	bne.n	80041d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041cc:	2302      	movs	r3, #2
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	e004      	b.n	80041dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b70      	cmp	r3, #112	; 0x70
 80041d6:	d101      	bne.n	80041dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041d8:	2301      	movs	r3, #1
 80041da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f023 0207 	bic.w	r2, r3, #7
 80041e4:	4909      	ldr	r1, [pc, #36]	; (800420c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041ec:	4b07      	ldr	r3, [pc, #28]	; (800420c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d001      	beq.n	80041fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40021000 	.word	0x40021000
 800420c:	40022000 	.word	0x40022000

08004210 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004218:	2300      	movs	r3, #0
 800421a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800421c:	2300      	movs	r3, #0
 800421e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 809e 	beq.w	800436a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422e:	2300      	movs	r3, #0
 8004230:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004232:	4b46      	ldr	r3, [pc, #280]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004242:	2300      	movs	r3, #0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00d      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004248:	4b40      	ldr	r3, [pc, #256]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800424a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424c:	4a3f      	ldr	r2, [pc, #252]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800424e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004252:	6593      	str	r3, [r2, #88]	; 0x58
 8004254:	4b3d      	ldr	r3, [pc, #244]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004260:	2301      	movs	r3, #1
 8004262:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004264:	4b3a      	ldr	r3, [pc, #232]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a39      	ldr	r2, [pc, #228]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800426a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004270:	f7fc fc24 	bl	8000abc <HAL_GetTick>
 8004274:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004276:	e009      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004278:	f7fc fc20 	bl	8000abc <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d902      	bls.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	74fb      	strb	r3, [r7, #19]
        break;
 800428a:	e005      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800428c:	4b30      	ldr	r3, [pc, #192]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0ef      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8004298:	7cfb      	ldrb	r3, [r7, #19]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d15a      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800429e:	4b2b      	ldr	r3, [pc, #172]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01e      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xde>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d019      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042ba:	4b24      	ldr	r3, [pc, #144]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80042bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042c6:	4b21      	ldr	r3, [pc, #132]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	4a1f      	ldr	r2, [pc, #124]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80042ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042d6:	4b1d      	ldr	r3, [pc, #116]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042dc:	4a1b      	ldr	r2, [pc, #108]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80042de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042e6:	4a19      	ldr	r2, [pc, #100]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d016      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f8:	f7fc fbe0 	bl	8000abc <HAL_GetTick>
 80042fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042fe:	e00b      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004300:	f7fc fbdc 	bl	8000abc <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	; 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d902      	bls.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	74fb      	strb	r3, [r7, #19]
            break;
 8004316:	e006      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0ec      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8004326:	7cfb      	ldrb	r3, [r7, #19]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10b      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800432c:	4b07      	ldr	r3, [pc, #28]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004332:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	4904      	ldr	r1, [pc, #16]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004342:	e009      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	74bb      	strb	r3, [r7, #18]
 8004348:	e006      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800434a:	bf00      	nop
 800434c:	40021000 	.word	0x40021000
 8004350:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	7cfb      	ldrb	r3, [r7, #19]
 8004356:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004358:	7c7b      	ldrb	r3, [r7, #17]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d105      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800435e:	4b6e      	ldr	r3, [pc, #440]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004362:	4a6d      	ldr	r2, [pc, #436]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004368:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004376:	4b68      	ldr	r3, [pc, #416]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f023 0203 	bic.w	r2, r3, #3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	4964      	ldr	r1, [pc, #400]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004398:	4b5f      	ldr	r3, [pc, #380]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f023 020c 	bic.w	r2, r3, #12
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	495c      	ldr	r1, [pc, #368]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043ba:	4b57      	ldr	r3, [pc, #348]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	4953      	ldr	r1, [pc, #332]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043dc:	4b4e      	ldr	r3, [pc, #312]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	494b      	ldr	r1, [pc, #300]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043fe:	4b46      	ldr	r3, [pc, #280]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	4942      	ldr	r1, [pc, #264]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004420:	4b3d      	ldr	r3, [pc, #244]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	493a      	ldr	r1, [pc, #232]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004442:	4b35      	ldr	r3, [pc, #212]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004448:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	4931      	ldr	r1, [pc, #196]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004464:	4b2c      	ldr	r3, [pc, #176]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	4929      	ldr	r1, [pc, #164]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004486:	4b24      	ldr	r3, [pc, #144]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	4920      	ldr	r1, [pc, #128]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d015      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044a8:	4b1b      	ldr	r3, [pc, #108]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b6:	4918      	ldr	r1, [pc, #96]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044c6:	d105      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044c8:	4b13      	ldr	r3, [pc, #76]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4a12      	ldr	r2, [pc, #72]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d015      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044e0:	4b0d      	ldr	r3, [pc, #52]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ee:	490a      	ldr	r1, [pc, #40]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044fe:	d105      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	4a04      	ldr	r2, [pc, #16]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800450a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800450c:	7cbb      	ldrb	r3, [r7, #18]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000

0800451c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800451c:	b084      	sub	sp, #16
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	f107 0014 	add.w	r0, r7, #20
 800452a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	b004      	add	sp, #16
 800453c:	4770      	bx	lr

0800453e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800453e:	b480      	push	{r7}
 8004540:	b085      	sub	sp, #20
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800454e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004552:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	b29a      	uxth	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004574:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004578:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	b29b      	uxth	r3, r3
 8004586:	43db      	mvns	r3, r3
 8004588:	b29b      	uxth	r3, r3
 800458a:	4013      	ands	r3, r2
 800458c:	b29a      	uxth	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	460b      	mov	r3, r1
 80045ac:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045bc:	b084      	sub	sp, #16
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	f107 0014 	add.w	r0, r7, #20
 80045ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	b004      	add	sp, #16
 80045fc:	4770      	bx	lr

080045fe <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800462c:	b480      	push	{r7}
 800462e:	b09b      	sub	sp, #108	; 0x6c
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	b29b      	uxth	r3, r3
 800464a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800464e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004652:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	78db      	ldrb	r3, [r3, #3]
 800465a:	2b03      	cmp	r3, #3
 800465c:	d81f      	bhi.n	800469e <USB_ActivateEndpoint+0x72>
 800465e:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <USB_ActivateEndpoint+0x38>)
 8004660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004664:	08004675 	.word	0x08004675
 8004668:	08004691 	.word	0x08004691
 800466c:	080046a7 	.word	0x080046a7
 8004670:	08004683 	.word	0x08004683
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004674:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004678:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800467c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004680:	e012      	b.n	80046a8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004682:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004686:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800468a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800468e:	e00b      	b.n	80046a8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004690:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004694:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004698:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800469c:	e004      	b.n	80046a8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80046a4:	e000      	b.n	80046a8 <USB_ActivateEndpoint+0x7c>
      break;
 80046a6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	441a      	add	r2, r3
 80046b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	b21b      	sxth	r3, r3
 80046da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e2:	b21a      	sxth	r2, r3
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	b21b      	sxth	r3, r3
 80046ea:	4313      	orrs	r3, r2
 80046ec:	b21b      	sxth	r3, r3
 80046ee:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	441a      	add	r2, r3
 80046fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800470c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004710:	b29b      	uxth	r3, r3
 8004712:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	7b1b      	ldrb	r3, [r3, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	f040 8149 	bne.w	80049b0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	785b      	ldrb	r3, [r3, #1]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 8084 	beq.w	8004830 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004732:	b29b      	uxth	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	4413      	add	r3, r2
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	00da      	lsls	r2, r3, #3
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	88db      	ldrh	r3, [r3, #6]
 8004750:	085b      	lsrs	r3, r3, #1
 8004752:	b29b      	uxth	r3, r3
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	81fb      	strh	r3, [r7, #14]
 800476a:	89fb      	ldrh	r3, [r7, #14]
 800476c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01b      	beq.n	80047ac <USB_ActivateEndpoint+0x180>
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	881b      	ldrh	r3, [r3, #0]
 8004780:	b29b      	uxth	r3, r3
 8004782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478a:	81bb      	strh	r3, [r7, #12]
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	441a      	add	r2, r3
 8004796:	89bb      	ldrh	r3, [r7, #12]
 8004798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800479c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	78db      	ldrb	r3, [r3, #3]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d020      	beq.n	80047f6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ca:	813b      	strh	r3, [r7, #8]
 80047cc:	893b      	ldrh	r3, [r7, #8]
 80047ce:	f083 0320 	eor.w	r3, r3, #32
 80047d2:	813b      	strh	r3, [r7, #8]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	441a      	add	r2, r3
 80047de:	893b      	ldrh	r3, [r7, #8]
 80047e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	8013      	strh	r3, [r2, #0]
 80047f4:	e27f      	b.n	8004cf6 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800480c:	817b      	strh	r3, [r7, #10]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	441a      	add	r2, r3
 8004818:	897b      	ldrh	r3, [r7, #10]
 800481a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800481e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800482a:	b29b      	uxth	r3, r3
 800482c:	8013      	strh	r3, [r2, #0]
 800482e:	e262      	b.n	8004cf6 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800483a:	b29b      	uxth	r3, r3
 800483c:	461a      	mov	r2, r3
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	4413      	add	r3, r2
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	00da      	lsls	r2, r3, #3
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	4413      	add	r3, r2
 800484e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004852:	62bb      	str	r3, [r7, #40]	; 0x28
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	88db      	ldrh	r3, [r3, #6]
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	b29b      	uxth	r3, r3
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800486e:	b29b      	uxth	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	4413      	add	r3, r2
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	00da      	lsls	r2, r3, #3
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	4413      	add	r3, r2
 8004882:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004886:	623b      	str	r3, [r7, #32]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d112      	bne.n	80048b6 <USB_ActivateEndpoint+0x28a>
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	b29b      	uxth	r3, r3
 8004896:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800489a:	b29a      	uxth	r2, r3
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	801a      	strh	r2, [r3, #0]
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	801a      	strh	r2, [r3, #0]
 80048b4:	e02f      	b.n	8004916 <USB_ActivateEndpoint+0x2ea>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b3e      	cmp	r3, #62	; 0x3e
 80048bc:	d813      	bhi.n	80048e6 <USB_ActivateEndpoint+0x2ba>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	085b      	lsrs	r3, r3, #1
 80048c4:	663b      	str	r3, [r7, #96]	; 0x60
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <USB_ActivateEndpoint+0x2ac>
 80048d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048d4:	3301      	adds	r3, #1
 80048d6:	663b      	str	r3, [r7, #96]	; 0x60
 80048d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048da:	b29b      	uxth	r3, r3
 80048dc:	029b      	lsls	r3, r3, #10
 80048de:	b29a      	uxth	r2, r3
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	801a      	strh	r2, [r3, #0]
 80048e4:	e017      	b.n	8004916 <USB_ActivateEndpoint+0x2ea>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	663b      	str	r3, [r7, #96]	; 0x60
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 031f 	and.w	r3, r3, #31
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d102      	bne.n	8004900 <USB_ActivateEndpoint+0x2d4>
 80048fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048fc:	3b01      	subs	r3, #1
 80048fe:	663b      	str	r3, [r7, #96]	; 0x60
 8004900:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004902:	b29b      	uxth	r3, r3
 8004904:	029b      	lsls	r3, r3, #10
 8004906:	b29b      	uxth	r3, r3
 8004908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800490c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004910:	b29a      	uxth	r2, r3
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	83fb      	strh	r3, [r7, #30]
 8004924:	8bfb      	ldrh	r3, [r7, #30]
 8004926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d01b      	beq.n	8004966 <USB_ActivateEndpoint+0x33a>
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	b29b      	uxth	r3, r3
 800493c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004944:	83bb      	strh	r3, [r7, #28]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	441a      	add	r2, r3
 8004950:	8bbb      	ldrh	r3, [r7, #28]
 8004952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800495a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800495e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004962:	b29b      	uxth	r3, r3
 8004964:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497c:	837b      	strh	r3, [r7, #26]
 800497e:	8b7b      	ldrh	r3, [r7, #26]
 8004980:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004984:	837b      	strh	r3, [r7, #26]
 8004986:	8b7b      	ldrh	r3, [r7, #26]
 8004988:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800498c:	837b      	strh	r3, [r7, #26]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	441a      	add	r2, r3
 8004998:	8b7b      	ldrh	r3, [r7, #26]
 800499a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800499e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	8013      	strh	r3, [r2, #0]
 80049ae:	e1a2      	b.n	8004cf6 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	441a      	add	r2, r3
 80049d4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80049d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80049e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	461a      	mov	r2, r3
 80049fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049fc:	4413      	add	r3, r2
 80049fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	00da      	lsls	r2, r3, #3
 8004a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	891b      	ldrh	r3, [r3, #8]
 8004a14:	085b      	lsrs	r3, r3, #1
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a1e:	801a      	strh	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	653b      	str	r3, [r7, #80]	; 0x50
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a30:	4413      	add	r3, r2
 8004a32:	653b      	str	r3, [r7, #80]	; 0x50
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	00da      	lsls	r2, r3, #3
 8004a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	895b      	ldrh	r3, [r3, #10]
 8004a48:	085b      	lsrs	r3, r3, #1
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a52:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	785b      	ldrb	r3, [r3, #1]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f040 8091 	bne.w	8004b80 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004a6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d01b      	beq.n	8004aae <USB_ActivateEndpoint+0x482>
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	441a      	add	r2, r3
 8004a98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	873b      	strh	r3, [r7, #56]	; 0x38
 8004abc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d01b      	beq.n	8004afe <USB_ActivateEndpoint+0x4d2>
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004adc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	441a      	add	r2, r3
 8004ae8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b14:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b1c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b1e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b24:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	441a      	add	r2, r3
 8004b30:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b5c:	867b      	strh	r3, [r7, #50]	; 0x32
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	441a      	add	r2, r3
 8004b68:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	8013      	strh	r3, [r2, #0]
 8004b7e:	e0ba      	b.n	8004cf6 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004b90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01d      	beq.n	8004bd8 <USB_ActivateEndpoint+0x5ac>
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	441a      	add	r2, r3
 8004bc0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004be8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01d      	beq.n	8004c30 <USB_ActivateEndpoint+0x604>
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	441a      	add	r2, r3
 8004c18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	78db      	ldrb	r3, [r3, #3]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d024      	beq.n	8004c82 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004c52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c56:	f083 0320 	eor.w	r3, r3, #32
 8004c5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	441a      	add	r2, r3
 8004c68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	8013      	strh	r3, [r2, #0]
 8004c80:	e01d      	b.n	8004cbe <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	441a      	add	r2, r3
 8004ca6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	441a      	add	r2, r3
 8004ce0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004cf6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	376c      	adds	r7, #108	; 0x6c
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop

08004d08 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b08d      	sub	sp, #52	; 0x34
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	7b1b      	ldrb	r3, [r3, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f040 808e 	bne.w	8004e38 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d044      	beq.n	8004dae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	81bb      	strh	r3, [r7, #12]
 8004d32:	89bb      	ldrh	r3, [r7, #12]
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01b      	beq.n	8004d74 <USB_DeactivateEndpoint+0x6c>
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d52:	817b      	strh	r3, [r7, #10]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	441a      	add	r2, r3
 8004d5e:	897b      	ldrh	r3, [r7, #10]
 8004d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d8a:	813b      	strh	r3, [r7, #8]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	441a      	add	r2, r3
 8004d96:	893b      	ldrh	r3, [r7, #8]
 8004d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	8013      	strh	r3, [r2, #0]
 8004dac:	e192      	b.n	80050d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	827b      	strh	r3, [r7, #18]
 8004dbc:	8a7b      	ldrh	r3, [r7, #18]
 8004dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d01b      	beq.n	8004dfe <USB_DeactivateEndpoint+0xf6>
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ddc:	823b      	strh	r3, [r7, #16]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	441a      	add	r2, r3
 8004de8:	8a3b      	ldrh	r3, [r7, #16]
 8004dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e14:	81fb      	strh	r3, [r7, #14]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	441a      	add	r2, r3
 8004e20:	89fb      	ldrh	r3, [r7, #14]
 8004e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	8013      	strh	r3, [r2, #0]
 8004e36:	e14d      	b.n	80050d4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	785b      	ldrb	r3, [r3, #1]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f040 80a5 	bne.w	8004f8c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	843b      	strh	r3, [r7, #32]
 8004e50:	8c3b      	ldrh	r3, [r7, #32]
 8004e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01b      	beq.n	8004e92 <USB_DeactivateEndpoint+0x18a>
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e70:	83fb      	strh	r3, [r7, #30]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	441a      	add	r2, r3
 8004e7c:	8bfb      	ldrh	r3, [r7, #30]
 8004e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	83bb      	strh	r3, [r7, #28]
 8004ea0:	8bbb      	ldrh	r3, [r7, #28]
 8004ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01b      	beq.n	8004ee2 <USB_DeactivateEndpoint+0x1da>
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec0:	837b      	strh	r3, [r7, #26]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	441a      	add	r2, r3
 8004ecc:	8b7b      	ldrh	r3, [r7, #26]
 8004ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef8:	833b      	strh	r3, [r7, #24]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	441a      	add	r2, r3
 8004f04:	8b3b      	ldrh	r3, [r7, #24]
 8004f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f30:	82fb      	strh	r3, [r7, #22]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	441a      	add	r2, r3
 8004f3c:	8afb      	ldrh	r3, [r7, #22]
 8004f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f68:	82bb      	strh	r3, [r7, #20]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	441a      	add	r2, r3
 8004f74:	8abb      	ldrh	r3, [r7, #20]
 8004f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	8013      	strh	r3, [r2, #0]
 8004f8a:	e0a3      	b.n	80050d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01b      	beq.n	8004fdc <USB_DeactivateEndpoint+0x2d4>
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	441a      	add	r2, r3
 8004fc6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004fea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d01b      	beq.n	800502c <USB_DeactivateEndpoint+0x324>
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500a:	853b      	strh	r3, [r7, #40]	; 0x28
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	441a      	add	r2, r3
 8005016:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800501c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005024:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005028:	b29b      	uxth	r3, r3
 800502a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005042:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	441a      	add	r2, r3
 800504e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005058:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800505c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005060:	b29b      	uxth	r3, r3
 8005062:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	b29b      	uxth	r3, r3
 8005072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800507a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	441a      	add	r2, r3
 8005086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800508c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005098:	b29b      	uxth	r3, r3
 800509a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	441a      	add	r2, r3
 80050be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3734      	adds	r7, #52	; 0x34
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b0cc      	sub	sp, #304	; 0x130
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	1d3b      	adds	r3, r7, #4
 80050ea:	6018      	str	r0, [r3, #0]
 80050ec:	463b      	mov	r3, r7
 80050ee:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050f0:	463b      	mov	r3, r7
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	785b      	ldrb	r3, [r3, #1]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	f040 872e 	bne.w	8005f58 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80050fc:	463b      	mov	r3, r7
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	463b      	mov	r3, r7
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	429a      	cmp	r2, r3
 800510a:	d905      	bls.n	8005118 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800510c:	463b      	mov	r3, r7
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005116:	e004      	b.n	8005122 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005118:	463b      	mov	r3, r7
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005122:	463b      	mov	r3, r7
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	7b1b      	ldrb	r3, [r3, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d134      	bne.n	8005196 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800512c:	463b      	mov	r3, r7
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6959      	ldr	r1, [r3, #20]
 8005132:	463b      	mov	r3, r7
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	88da      	ldrh	r2, [r3, #6]
 8005138:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800513c:	b29b      	uxth	r3, r3
 800513e:	1d38      	adds	r0, r7, #4
 8005140:	6800      	ldr	r0, [r0, #0]
 8005142:	f001 fc20 	bl	8006986 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005146:	f107 0310 	add.w	r3, r7, #16
 800514a:	1d3a      	adds	r2, r7, #4
 800514c:	6812      	ldr	r2, [r2, #0]
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	1d3b      	adds	r3, r7, #4
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005158:	b29b      	uxth	r3, r3
 800515a:	4619      	mov	r1, r3
 800515c:	f107 0310 	add.w	r3, r7, #16
 8005160:	f107 0210 	add.w	r2, r7, #16
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	440a      	add	r2, r1
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	463b      	mov	r3, r7
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	00da      	lsls	r2, r3, #3
 8005172:	f107 0310 	add.w	r3, r7, #16
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4413      	add	r3, r2
 800517a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800517e:	f107 030c 	add.w	r3, r7, #12
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005188:	b29a      	uxth	r2, r3
 800518a:	f107 030c 	add.w	r3, r7, #12
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	801a      	strh	r2, [r3, #0]
 8005192:	f000 beac 	b.w	8005eee <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005196:	463b      	mov	r3, r7
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	78db      	ldrb	r3, [r3, #3]
 800519c:	2b02      	cmp	r3, #2
 800519e:	f040 838c 	bne.w	80058ba <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80051a2:	463b      	mov	r3, r7
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6a1a      	ldr	r2, [r3, #32]
 80051a8:	463b      	mov	r3, r7
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	f240 8330 	bls.w	8005814 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80051b4:	1d3b      	adds	r3, r7, #4
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	463b      	mov	r3, r7
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80051d2:	1d3b      	adds	r3, r7, #4
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	463b      	mov	r3, r7
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	441a      	add	r2, r3
 80051e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80051e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80051f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80051f8:	463b      	mov	r3, r7
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6a1a      	ldr	r2, [r3, #32]
 80051fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005202:	1ad2      	subs	r2, r2, r3
 8005204:	463b      	mov	r3, r7
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800520a:	1d3b      	adds	r3, r7, #4
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	463b      	mov	r3, r7
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	b29b      	uxth	r3, r3
 800521c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 819e 	beq.w	8005562 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005226:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800522a:	1d3a      	adds	r2, r7, #4
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	463b      	mov	r3, r7
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	785b      	ldrb	r3, [r3, #1]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d17a      	bne.n	8005330 <USB_EPStartXfer+0x24e>
 800523a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800523e:	1d3a      	adds	r2, r7, #4
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	1d3b      	adds	r3, r7, #4
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800524c:	b29b      	uxth	r3, r3
 800524e:	4619      	mov	r1, r3
 8005250:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005254:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005258:	6812      	ldr	r2, [r2, #0]
 800525a:	440a      	add	r2, r1
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	463b      	mov	r3, r7
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	00da      	lsls	r2, r3, #3
 8005266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4413      	add	r3, r2
 800526e:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8005272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d11a      	bne.n	80052b6 <USB_EPStartXfer+0x1d4>
 8005280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	b29b      	uxth	r3, r3
 800528a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800528e:	b29a      	uxth	r2, r3
 8005290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	801a      	strh	r2, [r3, #0]
 8005298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	801a      	strh	r2, [r3, #0]
 80052b4:	e062      	b.n	800537c <USB_EPStartXfer+0x29a>
 80052b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ba:	2b3e      	cmp	r3, #62	; 0x3e
 80052bc:	d819      	bhi.n	80052f2 <USB_EPStartXfer+0x210>
 80052be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052c2:	085b      	lsrs	r3, r3, #1
 80052c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80052c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d004      	beq.n	80052de <USB_EPStartXfer+0x1fc>
 80052d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052d8:	3301      	adds	r3, #1
 80052da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80052de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	029b      	lsls	r3, r3, #10
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	801a      	strh	r2, [r3, #0]
 80052f0:	e044      	b.n	800537c <USB_EPStartXfer+0x29a>
 80052f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80052fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	2b00      	cmp	r3, #0
 8005306:	d104      	bne.n	8005312 <USB_EPStartXfer+0x230>
 8005308:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800530c:	3b01      	subs	r3, #1
 800530e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005312:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005316:	b29b      	uxth	r3, r3
 8005318:	029b      	lsls	r3, r3, #10
 800531a:	b29b      	uxth	r3, r3
 800531c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005324:	b29a      	uxth	r2, r3
 8005326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	801a      	strh	r2, [r3, #0]
 800532e:	e025      	b.n	800537c <USB_EPStartXfer+0x29a>
 8005330:	463b      	mov	r3, r7
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	785b      	ldrb	r3, [r3, #1]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d120      	bne.n	800537c <USB_EPStartXfer+0x29a>
 800533a:	1d3b      	adds	r3, r7, #4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005342:	b29b      	uxth	r3, r3
 8005344:	4619      	mov	r1, r3
 8005346:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800534a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	440a      	add	r2, r1
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	463b      	mov	r3, r7
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	00da      	lsls	r2, r3, #3
 800535c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4413      	add	r3, r2
 8005364:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8005368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005372:	b29a      	uxth	r2, r3
 8005374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800537c:	463b      	mov	r3, r7
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	895b      	ldrh	r3, [r3, #10]
 8005382:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005386:	463b      	mov	r3, r7
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6959      	ldr	r1, [r3, #20]
 800538c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005390:	b29b      	uxth	r3, r3
 8005392:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005396:	1d38      	adds	r0, r7, #4
 8005398:	6800      	ldr	r0, [r0, #0]
 800539a:	f001 faf4 	bl	8006986 <USB_WritePMA>
            ep->xfer_buff += len;
 800539e:	463b      	mov	r3, r7
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695a      	ldr	r2, [r3, #20]
 80053a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053a8:	441a      	add	r2, r3
 80053aa:	463b      	mov	r3, r7
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053b0:	463b      	mov	r3, r7
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6a1a      	ldr	r2, [r3, #32]
 80053b6:	463b      	mov	r3, r7
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d909      	bls.n	80053d4 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80053c0:	463b      	mov	r3, r7
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6a1a      	ldr	r2, [r3, #32]
 80053c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ca:	1ad2      	subs	r2, r2, r3
 80053cc:	463b      	mov	r3, r7
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	621a      	str	r2, [r3, #32]
 80053d2:	e008      	b.n	80053e6 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80053d4:	463b      	mov	r3, r7
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80053de:	463b      	mov	r3, r7
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2200      	movs	r2, #0
 80053e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053e6:	463b      	mov	r3, r7
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	785b      	ldrb	r3, [r3, #1]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d17a      	bne.n	80054e6 <USB_EPStartXfer+0x404>
 80053f0:	f107 0318 	add.w	r3, r7, #24
 80053f4:	1d3a      	adds	r2, r7, #4
 80053f6:	6812      	ldr	r2, [r2, #0]
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	1d3b      	adds	r3, r7, #4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005402:	b29b      	uxth	r3, r3
 8005404:	4619      	mov	r1, r3
 8005406:	f107 0318 	add.w	r3, r7, #24
 800540a:	f107 0218 	add.w	r2, r7, #24
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	440a      	add	r2, r1
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	463b      	mov	r3, r7
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	00da      	lsls	r2, r3, #3
 800541c:	f107 0318 	add.w	r3, r7, #24
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4413      	add	r3, r2
 8005424:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005428:	f107 0314 	add.w	r3, r7, #20
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d11a      	bne.n	800546c <USB_EPStartXfer+0x38a>
 8005436:	f107 0314 	add.w	r3, r7, #20
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	b29b      	uxth	r3, r3
 8005440:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005444:	b29a      	uxth	r2, r3
 8005446:	f107 0314 	add.w	r3, r7, #20
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	801a      	strh	r2, [r3, #0]
 800544e:	f107 0314 	add.w	r3, r7, #20
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	b29b      	uxth	r3, r3
 8005458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800545c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005460:	b29a      	uxth	r2, r3
 8005462:	f107 0314 	add.w	r3, r7, #20
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	801a      	strh	r2, [r3, #0]
 800546a:	e067      	b.n	800553c <USB_EPStartXfer+0x45a>
 800546c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005470:	2b3e      	cmp	r3, #62	; 0x3e
 8005472:	d819      	bhi.n	80054a8 <USB_EPStartXfer+0x3c6>
 8005474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005478:	085b      	lsrs	r3, r3, #1
 800547a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800547e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d004      	beq.n	8005494 <USB_EPStartXfer+0x3b2>
 800548a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800548e:	3301      	adds	r3, #1
 8005490:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005494:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005498:	b29b      	uxth	r3, r3
 800549a:	029b      	lsls	r3, r3, #10
 800549c:	b29a      	uxth	r2, r3
 800549e:	f107 0314 	add.w	r3, r7, #20
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	801a      	strh	r2, [r3, #0]
 80054a6:	e049      	b.n	800553c <USB_EPStartXfer+0x45a>
 80054a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ac:	095b      	lsrs	r3, r3, #5
 80054ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80054b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b6:	f003 031f 	and.w	r3, r3, #31
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d104      	bne.n	80054c8 <USB_EPStartXfer+0x3e6>
 80054be:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80054c2:	3b01      	subs	r3, #1
 80054c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80054c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	029b      	lsls	r3, r3, #10
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054da:	b29a      	uxth	r2, r3
 80054dc:	f107 0314 	add.w	r3, r7, #20
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	801a      	strh	r2, [r3, #0]
 80054e4:	e02a      	b.n	800553c <USB_EPStartXfer+0x45a>
 80054e6:	463b      	mov	r3, r7
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	785b      	ldrb	r3, [r3, #1]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d125      	bne.n	800553c <USB_EPStartXfer+0x45a>
 80054f0:	f107 0320 	add.w	r3, r7, #32
 80054f4:	1d3a      	adds	r2, r7, #4
 80054f6:	6812      	ldr	r2, [r2, #0]
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	1d3b      	adds	r3, r7, #4
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005502:	b29b      	uxth	r3, r3
 8005504:	4619      	mov	r1, r3
 8005506:	f107 0320 	add.w	r3, r7, #32
 800550a:	f107 0220 	add.w	r2, r7, #32
 800550e:	6812      	ldr	r2, [r2, #0]
 8005510:	440a      	add	r2, r1
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	463b      	mov	r3, r7
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	00da      	lsls	r2, r3, #3
 800551c:	f107 0320 	add.w	r3, r7, #32
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4413      	add	r3, r2
 8005524:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005528:	f107 031c 	add.w	r3, r7, #28
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005532:	b29a      	uxth	r2, r3
 8005534:	f107 031c 	add.w	r3, r7, #28
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800553c:	463b      	mov	r3, r7
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	891b      	ldrh	r3, [r3, #8]
 8005542:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005546:	463b      	mov	r3, r7
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6959      	ldr	r1, [r3, #20]
 800554c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005550:	b29b      	uxth	r3, r3
 8005552:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005556:	1d38      	adds	r0, r7, #4
 8005558:	6800      	ldr	r0, [r0, #0]
 800555a:	f001 fa14 	bl	8006986 <USB_WritePMA>
 800555e:	f000 bcc6 	b.w	8005eee <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005562:	463b      	mov	r3, r7
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	785b      	ldrb	r3, [r3, #1]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d164      	bne.n	8005636 <USB_EPStartXfer+0x554>
 800556c:	1d3b      	adds	r3, r7, #4
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	64bb      	str	r3, [r7, #72]	; 0x48
 8005572:	1d3b      	adds	r3, r7, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800557a:	b29b      	uxth	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005580:	4413      	add	r3, r2
 8005582:	64bb      	str	r3, [r7, #72]	; 0x48
 8005584:	463b      	mov	r3, r7
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	00da      	lsls	r2, r3, #3
 800558c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800558e:	4413      	add	r3, r2
 8005590:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005594:	647b      	str	r3, [r7, #68]	; 0x44
 8005596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800559a:	2b00      	cmp	r3, #0
 800559c:	d112      	bne.n	80055c4 <USB_EPStartXfer+0x4e2>
 800559e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ac:	801a      	strh	r2, [r3, #0]
 80055ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055bc:	b29a      	uxth	r2, r3
 80055be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c0:	801a      	strh	r2, [r3, #0]
 80055c2:	e057      	b.n	8005674 <USB_EPStartXfer+0x592>
 80055c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055c8:	2b3e      	cmp	r3, #62	; 0x3e
 80055ca:	d817      	bhi.n	80055fc <USB_EPStartXfer+0x51a>
 80055cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055d0:	085b      	lsrs	r3, r3, #1
 80055d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80055d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d004      	beq.n	80055ec <USB_EPStartXfer+0x50a>
 80055e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80055e6:	3301      	adds	r3, #1
 80055e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80055ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	029b      	lsls	r3, r3, #10
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055f8:	801a      	strh	r2, [r3, #0]
 80055fa:	e03b      	b.n	8005674 <USB_EPStartXfer+0x592>
 80055fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005600:	095b      	lsrs	r3, r3, #5
 8005602:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005606:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800560a:	f003 031f 	and.w	r3, r3, #31
 800560e:	2b00      	cmp	r3, #0
 8005610:	d104      	bne.n	800561c <USB_EPStartXfer+0x53a>
 8005612:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005616:	3b01      	subs	r3, #1
 8005618:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800561c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005620:	b29b      	uxth	r3, r3
 8005622:	029b      	lsls	r3, r3, #10
 8005624:	b29b      	uxth	r3, r3
 8005626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800562a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800562e:	b29a      	uxth	r2, r3
 8005630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005632:	801a      	strh	r2, [r3, #0]
 8005634:	e01e      	b.n	8005674 <USB_EPStartXfer+0x592>
 8005636:	463b      	mov	r3, r7
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	785b      	ldrb	r3, [r3, #1]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d119      	bne.n	8005674 <USB_EPStartXfer+0x592>
 8005640:	1d3b      	adds	r3, r7, #4
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	653b      	str	r3, [r7, #80]	; 0x50
 8005646:	1d3b      	adds	r3, r7, #4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800564e:	b29b      	uxth	r3, r3
 8005650:	461a      	mov	r2, r3
 8005652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005654:	4413      	add	r3, r2
 8005656:	653b      	str	r3, [r7, #80]	; 0x50
 8005658:	463b      	mov	r3, r7
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	00da      	lsls	r2, r3, #3
 8005660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005662:	4413      	add	r3, r2
 8005664:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005668:	64fb      	str	r3, [r7, #76]	; 0x4c
 800566a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800566e:	b29a      	uxth	r2, r3
 8005670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005672:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005674:	463b      	mov	r3, r7
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	891b      	ldrh	r3, [r3, #8]
 800567a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800567e:	463b      	mov	r3, r7
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6959      	ldr	r1, [r3, #20]
 8005684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005688:	b29b      	uxth	r3, r3
 800568a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800568e:	1d38      	adds	r0, r7, #4
 8005690:	6800      	ldr	r0, [r0, #0]
 8005692:	f001 f978 	bl	8006986 <USB_WritePMA>
            ep->xfer_buff += len;
 8005696:	463b      	mov	r3, r7
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695a      	ldr	r2, [r3, #20]
 800569c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056a0:	441a      	add	r2, r3
 80056a2:	463b      	mov	r3, r7
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80056a8:	463b      	mov	r3, r7
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6a1a      	ldr	r2, [r3, #32]
 80056ae:	463b      	mov	r3, r7
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d909      	bls.n	80056cc <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80056b8:	463b      	mov	r3, r7
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6a1a      	ldr	r2, [r3, #32]
 80056be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056c2:	1ad2      	subs	r2, r2, r3
 80056c4:	463b      	mov	r3, r7
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	621a      	str	r2, [r3, #32]
 80056ca:	e008      	b.n	80056de <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80056cc:	463b      	mov	r3, r7
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80056d6:	463b      	mov	r3, r7
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2200      	movs	r2, #0
 80056dc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056de:	1d3b      	adds	r3, r7, #4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	643b      	str	r3, [r7, #64]	; 0x40
 80056e4:	463b      	mov	r3, r7
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	785b      	ldrb	r3, [r3, #1]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d164      	bne.n	80057b8 <USB_EPStartXfer+0x6d6>
 80056ee:	1d3b      	adds	r3, r7, #4
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80056f4:	1d3b      	adds	r3, r7, #4
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	461a      	mov	r2, r3
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	4413      	add	r3, r2
 8005704:	63bb      	str	r3, [r7, #56]	; 0x38
 8005706:	463b      	mov	r3, r7
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	00da      	lsls	r2, r3, #3
 800570e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005710:	4413      	add	r3, r2
 8005712:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005716:	637b      	str	r3, [r7, #52]	; 0x34
 8005718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d112      	bne.n	8005746 <USB_EPStartXfer+0x664>
 8005720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	b29b      	uxth	r3, r3
 8005726:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800572a:	b29a      	uxth	r2, r3
 800572c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572e:	801a      	strh	r2, [r3, #0]
 8005730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	b29b      	uxth	r3, r3
 8005736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800573a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800573e:	b29a      	uxth	r2, r3
 8005740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005742:	801a      	strh	r2, [r3, #0]
 8005744:	e054      	b.n	80057f0 <USB_EPStartXfer+0x70e>
 8005746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800574a:	2b3e      	cmp	r3, #62	; 0x3e
 800574c:	d817      	bhi.n	800577e <USB_EPStartXfer+0x69c>
 800574e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005752:	085b      	lsrs	r3, r3, #1
 8005754:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d004      	beq.n	800576e <USB_EPStartXfer+0x68c>
 8005764:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005768:	3301      	adds	r3, #1
 800576a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800576e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005772:	b29b      	uxth	r3, r3
 8005774:	029b      	lsls	r3, r3, #10
 8005776:	b29a      	uxth	r2, r3
 8005778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577a:	801a      	strh	r2, [r3, #0]
 800577c:	e038      	b.n	80057f0 <USB_EPStartXfer+0x70e>
 800577e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005782:	095b      	lsrs	r3, r3, #5
 8005784:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800578c:	f003 031f 	and.w	r3, r3, #31
 8005790:	2b00      	cmp	r3, #0
 8005792:	d104      	bne.n	800579e <USB_EPStartXfer+0x6bc>
 8005794:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005798:	3b01      	subs	r3, #1
 800579a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800579e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	029b      	lsls	r3, r3, #10
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b4:	801a      	strh	r2, [r3, #0]
 80057b6:	e01b      	b.n	80057f0 <USB_EPStartXfer+0x70e>
 80057b8:	463b      	mov	r3, r7
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	785b      	ldrb	r3, [r3, #1]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d116      	bne.n	80057f0 <USB_EPStartXfer+0x70e>
 80057c2:	1d3b      	adds	r3, r7, #4
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	461a      	mov	r2, r3
 80057ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057d0:	4413      	add	r3, r2
 80057d2:	643b      	str	r3, [r7, #64]	; 0x40
 80057d4:	463b      	mov	r3, r7
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	00da      	lsls	r2, r3, #3
 80057dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057de:	4413      	add	r3, r2
 80057e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80057f0:	463b      	mov	r3, r7
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	895b      	ldrh	r3, [r3, #10]
 80057f6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057fa:	463b      	mov	r3, r7
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6959      	ldr	r1, [r3, #20]
 8005800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005804:	b29b      	uxth	r3, r3
 8005806:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800580a:	1d38      	adds	r0, r7, #4
 800580c:	6800      	ldr	r0, [r0, #0]
 800580e:	f001 f8ba 	bl	8006986 <USB_WritePMA>
 8005812:	e36c      	b.n	8005eee <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005814:	463b      	mov	r3, r7
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800581e:	1d3b      	adds	r3, r7, #4
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	463b      	mov	r3, r7
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b29b      	uxth	r3, r3
 8005830:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005838:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800583c:	1d3b      	adds	r3, r7, #4
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	463b      	mov	r3, r7
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	441a      	add	r2, r3
 800584a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800584e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800585a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585e:	b29b      	uxth	r3, r3
 8005860:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005862:	1d3b      	adds	r3, r7, #4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005868:	1d3b      	adds	r3, r7, #4
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005870:	b29b      	uxth	r3, r3
 8005872:	461a      	mov	r2, r3
 8005874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005876:	4413      	add	r3, r2
 8005878:	65fb      	str	r3, [r7, #92]	; 0x5c
 800587a:	463b      	mov	r3, r7
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	00da      	lsls	r2, r3, #3
 8005882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005884:	4413      	add	r3, r2
 8005886:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800588a:	65bb      	str	r3, [r7, #88]	; 0x58
 800588c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005890:	b29a      	uxth	r2, r3
 8005892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005894:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005896:	463b      	mov	r3, r7
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	891b      	ldrh	r3, [r3, #8]
 800589c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058a0:	463b      	mov	r3, r7
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6959      	ldr	r1, [r3, #20]
 80058a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058b0:	1d38      	adds	r0, r7, #4
 80058b2:	6800      	ldr	r0, [r0, #0]
 80058b4:	f001 f867 	bl	8006986 <USB_WritePMA>
 80058b8:	e319      	b.n	8005eee <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80058ba:	1d3b      	adds	r3, r7, #4
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	463b      	mov	r3, r7
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80058d8:	1d3b      	adds	r3, r7, #4
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	463b      	mov	r3, r7
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	441a      	add	r2, r3
 80058e6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80058ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058f2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80058f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80058fe:	463b      	mov	r3, r7
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6a1a      	ldr	r2, [r3, #32]
 8005904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005908:	1ad2      	subs	r2, r2, r3
 800590a:	463b      	mov	r3, r7
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005910:	1d3b      	adds	r3, r7, #4
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	463b      	mov	r3, r7
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	b29b      	uxth	r3, r3
 8005922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 8162 	beq.w	8005bf0 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800592c:	1d3b      	adds	r3, r7, #4
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005934:	463b      	mov	r3, r7
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	785b      	ldrb	r3, [r3, #1]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d164      	bne.n	8005a08 <USB_EPStartXfer+0x926>
 800593e:	1d3b      	adds	r3, r7, #4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	67bb      	str	r3, [r7, #120]	; 0x78
 8005944:	1d3b      	adds	r3, r7, #4
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800594c:	b29b      	uxth	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005952:	4413      	add	r3, r2
 8005954:	67bb      	str	r3, [r7, #120]	; 0x78
 8005956:	463b      	mov	r3, r7
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	00da      	lsls	r2, r3, #3
 800595e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005960:	4413      	add	r3, r2
 8005962:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005966:	677b      	str	r3, [r7, #116]	; 0x74
 8005968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d112      	bne.n	8005996 <USB_EPStartXfer+0x8b4>
 8005970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	b29b      	uxth	r3, r3
 8005976:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800597a:	b29a      	uxth	r2, r3
 800597c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800597e:	801a      	strh	r2, [r3, #0]
 8005980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	b29b      	uxth	r3, r3
 8005986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800598a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800598e:	b29a      	uxth	r2, r3
 8005990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005992:	801a      	strh	r2, [r3, #0]
 8005994:	e057      	b.n	8005a46 <USB_EPStartXfer+0x964>
 8005996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800599a:	2b3e      	cmp	r3, #62	; 0x3e
 800599c:	d817      	bhi.n	80059ce <USB_EPStartXfer+0x8ec>
 800599e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a2:	085b      	lsrs	r3, r3, #1
 80059a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80059a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d004      	beq.n	80059be <USB_EPStartXfer+0x8dc>
 80059b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80059b8:	3301      	adds	r3, #1
 80059ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80059be:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	029b      	lsls	r3, r3, #10
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ca:	801a      	strh	r2, [r3, #0]
 80059cc:	e03b      	b.n	8005a46 <USB_EPStartXfer+0x964>
 80059ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80059d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059dc:	f003 031f 	and.w	r3, r3, #31
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d104      	bne.n	80059ee <USB_EPStartXfer+0x90c>
 80059e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80059e8:	3b01      	subs	r3, #1
 80059ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80059ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	029b      	lsls	r3, r3, #10
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a04:	801a      	strh	r2, [r3, #0]
 8005a06:	e01e      	b.n	8005a46 <USB_EPStartXfer+0x964>
 8005a08:	463b      	mov	r3, r7
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d119      	bne.n	8005a46 <USB_EPStartXfer+0x964>
 8005a12:	1d3b      	adds	r3, r7, #4
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a22:	4413      	add	r3, r2
 8005a24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a28:	463b      	mov	r3, r7
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	00da      	lsls	r2, r3, #3
 8005a30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a34:	4413      	add	r3, r2
 8005a36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a44:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005a46:	463b      	mov	r3, r7
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	895b      	ldrh	r3, [r3, #10]
 8005a4c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a50:	463b      	mov	r3, r7
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6959      	ldr	r1, [r3, #20]
 8005a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a60:	1d38      	adds	r0, r7, #4
 8005a62:	6800      	ldr	r0, [r0, #0]
 8005a64:	f000 ff8f 	bl	8006986 <USB_WritePMA>
          ep->xfer_buff += len;
 8005a68:	463b      	mov	r3, r7
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695a      	ldr	r2, [r3, #20]
 8005a6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a72:	441a      	add	r2, r3
 8005a74:	463b      	mov	r3, r7
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005a7a:	463b      	mov	r3, r7
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6a1a      	ldr	r2, [r3, #32]
 8005a80:	463b      	mov	r3, r7
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d909      	bls.n	8005a9e <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005a8a:	463b      	mov	r3, r7
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6a1a      	ldr	r2, [r3, #32]
 8005a90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a94:	1ad2      	subs	r2, r2, r3
 8005a96:	463b      	mov	r3, r7
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	621a      	str	r2, [r3, #32]
 8005a9c:	e008      	b.n	8005ab0 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005a9e:	463b      	mov	r3, r7
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005aa8:	463b      	mov	r3, r7
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2200      	movs	r2, #0
 8005aae:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 821a 	beq.w	8005eee <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005aba:	463b      	mov	r3, r7
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	785b      	ldrb	r3, [r3, #1]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d164      	bne.n	8005b8e <USB_EPStartXfer+0xaac>
 8005ac4:	1d3b      	adds	r3, r7, #4
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aca:	1d3b      	adds	r3, r7, #4
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ad8:	4413      	add	r3, r2
 8005ada:	66bb      	str	r3, [r7, #104]	; 0x68
 8005adc:	463b      	mov	r3, r7
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	00da      	lsls	r2, r3, #3
 8005ae4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005aec:	667b      	str	r3, [r7, #100]	; 0x64
 8005aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d112      	bne.n	8005b1c <USB_EPStartXfer+0xa3a>
 8005af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b04:	801a      	strh	r2, [r3, #0]
 8005b06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b18:	801a      	strh	r2, [r3, #0]
 8005b1a:	e057      	b.n	8005bcc <USB_EPStartXfer+0xaea>
 8005b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b20:	2b3e      	cmp	r3, #62	; 0x3e
 8005b22:	d817      	bhi.n	8005b54 <USB_EPStartXfer+0xa72>
 8005b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b28:	085b      	lsrs	r3, r3, #1
 8005b2a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d004      	beq.n	8005b44 <USB_EPStartXfer+0xa62>
 8005b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b3e:	3301      	adds	r3, #1
 8005b40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	029b      	lsls	r3, r3, #10
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b50:	801a      	strh	r2, [r3, #0]
 8005b52:	e03b      	b.n	8005bcc <USB_EPStartXfer+0xaea>
 8005b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d104      	bne.n	8005b74 <USB_EPStartXfer+0xa92>
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	029b      	lsls	r3, r3, #10
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b8a:	801a      	strh	r2, [r3, #0]
 8005b8c:	e01e      	b.n	8005bcc <USB_EPStartXfer+0xaea>
 8005b8e:	463b      	mov	r3, r7
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	785b      	ldrb	r3, [r3, #1]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d119      	bne.n	8005bcc <USB_EPStartXfer+0xaea>
 8005b98:	1d3b      	adds	r3, r7, #4
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	673b      	str	r3, [r7, #112]	; 0x70
 8005b9e:	1d3b      	adds	r3, r7, #4
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	461a      	mov	r2, r3
 8005baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bac:	4413      	add	r3, r2
 8005bae:	673b      	str	r3, [r7, #112]	; 0x70
 8005bb0:	463b      	mov	r3, r7
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	00da      	lsls	r2, r3, #3
 8005bb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bba:	4413      	add	r3, r2
 8005bbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005bcc:	463b      	mov	r3, r7
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	891b      	ldrh	r3, [r3, #8]
 8005bd2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bd6:	463b      	mov	r3, r7
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6959      	ldr	r1, [r3, #20]
 8005bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005be6:	1d38      	adds	r0, r7, #4
 8005be8:	6800      	ldr	r0, [r0, #0]
 8005bea:	f000 fecc 	bl	8006986 <USB_WritePMA>
 8005bee:	e17e      	b.n	8005eee <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	785b      	ldrb	r3, [r3, #1]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d16f      	bne.n	8005cda <USB_EPStartXfer+0xbf8>
 8005bfa:	1d3b      	adds	r3, r7, #4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c02:	1d3b      	adds	r3, r7, #4
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c12:	4413      	add	r3, r2
 8005c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c18:	463b      	mov	r3, r7
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	00da      	lsls	r2, r3, #3
 8005c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c24:	4413      	add	r3, r2
 8005c26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d116      	bne.n	8005c64 <USB_EPStartXfer+0xb82>
 8005c36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c48:	801a      	strh	r2, [r3, #0]
 8005c4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	e05f      	b.n	8005d24 <USB_EPStartXfer+0xc42>
 8005c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c68:	2b3e      	cmp	r3, #62	; 0x3e
 8005c6a:	d818      	bhi.n	8005c9e <USB_EPStartXfer+0xbbc>
 8005c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c70:	085b      	lsrs	r3, r3, #1
 8005c72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d004      	beq.n	8005c8c <USB_EPStartXfer+0xbaa>
 8005c82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c86:	3301      	adds	r3, #1
 8005c88:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005c8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	029b      	lsls	r3, r3, #10
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c9a:	801a      	strh	r2, [r3, #0]
 8005c9c:	e042      	b.n	8005d24 <USB_EPStartXfer+0xc42>
 8005c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca2:	095b      	lsrs	r3, r3, #5
 8005ca4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cac:	f003 031f 	and.w	r3, r3, #31
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <USB_EPStartXfer+0xbdc>
 8005cb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005cbe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	029b      	lsls	r3, r3, #10
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cd6:	801a      	strh	r2, [r3, #0]
 8005cd8:	e024      	b.n	8005d24 <USB_EPStartXfer+0xc42>
 8005cda:	463b      	mov	r3, r7
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	785b      	ldrb	r3, [r3, #1]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d11f      	bne.n	8005d24 <USB_EPStartXfer+0xc42>
 8005ce4:	1d3b      	adds	r3, r7, #4
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005cec:	1d3b      	adds	r3, r7, #4
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d02:	463b      	mov	r3, r7
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	00da      	lsls	r2, r3, #3
 8005d0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d0e:	4413      	add	r3, r2
 8005d10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d22:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d24:	463b      	mov	r3, r7
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	891b      	ldrh	r3, [r3, #8]
 8005d2a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d2e:	463b      	mov	r3, r7
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6959      	ldr	r1, [r3, #20]
 8005d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d3e:	1d38      	adds	r0, r7, #4
 8005d40:	6800      	ldr	r0, [r0, #0]
 8005d42:	f000 fe20 	bl	8006986 <USB_WritePMA>
          ep->xfer_buff += len;
 8005d46:	463b      	mov	r3, r7
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695a      	ldr	r2, [r3, #20]
 8005d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d50:	441a      	add	r2, r3
 8005d52:	463b      	mov	r3, r7
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005d58:	463b      	mov	r3, r7
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6a1a      	ldr	r2, [r3, #32]
 8005d5e:	463b      	mov	r3, r7
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d909      	bls.n	8005d7c <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8005d68:	463b      	mov	r3, r7
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6a1a      	ldr	r2, [r3, #32]
 8005d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d72:	1ad2      	subs	r2, r2, r3
 8005d74:	463b      	mov	r3, r7
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	621a      	str	r2, [r3, #32]
 8005d7a:	e008      	b.n	8005d8e <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005d86:	463b      	mov	r3, r7
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 80ab 	beq.w	8005eee <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d98:	1d3b      	adds	r3, r7, #4
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005da0:	463b      	mov	r3, r7
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	785b      	ldrb	r3, [r3, #1]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d16f      	bne.n	8005e8a <USB_EPStartXfer+0xda8>
 8005daa:	1d3b      	adds	r3, r7, #4
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005db2:	1d3b      	adds	r3, r7, #4
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dc8:	463b      	mov	r3, r7
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	00da      	lsls	r2, r3, #3
 8005dd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005dda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d116      	bne.n	8005e14 <USB_EPStartXfer+0xd32>
 8005de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005df8:	801a      	strh	r2, [r3, #0]
 8005dfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	e05b      	b.n	8005ecc <USB_EPStartXfer+0xdea>
 8005e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e18:	2b3e      	cmp	r3, #62	; 0x3e
 8005e1a:	d818      	bhi.n	8005e4e <USB_EPStartXfer+0xd6c>
 8005e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e20:	085b      	lsrs	r3, r3, #1
 8005e22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d004      	beq.n	8005e3c <USB_EPStartXfer+0xd5a>
 8005e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e36:	3301      	adds	r3, #1
 8005e38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	029b      	lsls	r3, r3, #10
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e4a:	801a      	strh	r2, [r3, #0]
 8005e4c:	e03e      	b.n	8005ecc <USB_EPStartXfer+0xdea>
 8005e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e5c:	f003 031f 	and.w	r3, r3, #31
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d104      	bne.n	8005e6e <USB_EPStartXfer+0xd8c>
 8005e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	029b      	lsls	r3, r3, #10
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e86:	801a      	strh	r2, [r3, #0]
 8005e88:	e020      	b.n	8005ecc <USB_EPStartXfer+0xdea>
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d11b      	bne.n	8005ecc <USB_EPStartXfer+0xdea>
 8005e94:	1d3b      	adds	r3, r7, #4
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005eaa:	463b      	mov	r3, r7
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	00da      	lsls	r2, r3, #3
 8005eb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ebc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005eca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ecc:	463b      	mov	r3, r7
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	895b      	ldrh	r3, [r3, #10]
 8005ed2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6959      	ldr	r1, [r3, #20]
 8005edc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ee6:	1d38      	adds	r0, r7, #4
 8005ee8:	6800      	ldr	r0, [r0, #0]
 8005eea:	f000 fd4c 	bl	8006986 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005eee:	1d3b      	adds	r3, r7, #4
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	463b      	mov	r3, r7
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f107 020a 	add.w	r2, r7, #10
 8005f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f0c:	8013      	strh	r3, [r2, #0]
 8005f0e:	f107 030a 	add.w	r3, r7, #10
 8005f12:	f107 020a 	add.w	r2, r7, #10
 8005f16:	8812      	ldrh	r2, [r2, #0]
 8005f18:	f082 0210 	eor.w	r2, r2, #16
 8005f1c:	801a      	strh	r2, [r3, #0]
 8005f1e:	f107 030a 	add.w	r3, r7, #10
 8005f22:	f107 020a 	add.w	r2, r7, #10
 8005f26:	8812      	ldrh	r2, [r2, #0]
 8005f28:	f082 0220 	eor.w	r2, r2, #32
 8005f2c:	801a      	strh	r2, [r3, #0]
 8005f2e:	1d3b      	adds	r3, r7, #4
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	463b      	mov	r3, r7
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	441a      	add	r2, r3
 8005f3c:	f107 030a 	add.w	r3, r7, #10
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	8013      	strh	r3, [r2, #0]
 8005f56:	e3b5      	b.n	80066c4 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f58:	463b      	mov	r3, r7
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	7b1b      	ldrb	r3, [r3, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f040 8090 	bne.w	8006084 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005f64:	463b      	mov	r3, r7
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699a      	ldr	r2, [r3, #24]
 8005f6a:	463b      	mov	r3, r7
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d90e      	bls.n	8005f92 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8005f74:	463b      	mov	r3, r7
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005f7e:	463b      	mov	r3, r7
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	699a      	ldr	r2, [r3, #24]
 8005f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f88:	1ad2      	subs	r2, r2, r3
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	619a      	str	r2, [r3, #24]
 8005f90:	e008      	b.n	8005fa4 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8005f92:	463b      	mov	r3, r7
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005f9c:	463b      	mov	r3, r7
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005fa4:	1d3b      	adds	r3, r7, #4
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fac:	1d3b      	adds	r3, r7, #4
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fc2:	463b      	mov	r3, r7
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	00da      	lsls	r2, r3, #3
 8005fca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fce:	4413      	add	r3, r2
 8005fd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d116      	bne.n	800600e <USB_EPStartXfer+0xf2c>
 8005fe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ff2:	801a      	strh	r2, [r3, #0]
 8005ff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006004:	b29a      	uxth	r2, r3
 8006006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800600a:	801a      	strh	r2, [r3, #0]
 800600c:	e32c      	b.n	8006668 <USB_EPStartXfer+0x1586>
 800600e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006012:	2b3e      	cmp	r3, #62	; 0x3e
 8006014:	d818      	bhi.n	8006048 <USB_EPStartXfer+0xf66>
 8006016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800601a:	085b      	lsrs	r3, r3, #1
 800601c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006020:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d004      	beq.n	8006036 <USB_EPStartXfer+0xf54>
 800602c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006030:	3301      	adds	r3, #1
 8006032:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006036:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800603a:	b29b      	uxth	r3, r3
 800603c:	029b      	lsls	r3, r3, #10
 800603e:	b29a      	uxth	r2, r3
 8006040:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006044:	801a      	strh	r2, [r3, #0]
 8006046:	e30f      	b.n	8006668 <USB_EPStartXfer+0x1586>
 8006048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800604c:	095b      	lsrs	r3, r3, #5
 800604e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	2b00      	cmp	r3, #0
 800605c:	d104      	bne.n	8006068 <USB_EPStartXfer+0xf86>
 800605e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006062:	3b01      	subs	r3, #1
 8006064:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006068:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800606c:	b29b      	uxth	r3, r3
 800606e:	029b      	lsls	r3, r3, #10
 8006070:	b29b      	uxth	r3, r3
 8006072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800607a:	b29a      	uxth	r2, r3
 800607c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006080:	801a      	strh	r2, [r3, #0]
 8006082:	e2f1      	b.n	8006668 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006084:	463b      	mov	r3, r7
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	78db      	ldrb	r3, [r3, #3]
 800608a:	2b02      	cmp	r3, #2
 800608c:	f040 818f 	bne.w	80063ae <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006090:	463b      	mov	r3, r7
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	785b      	ldrb	r3, [r3, #1]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d175      	bne.n	8006186 <USB_EPStartXfer+0x10a4>
 800609a:	1d3b      	adds	r3, r7, #4
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060a2:	1d3b      	adds	r3, r7, #4
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	461a      	mov	r2, r3
 80060ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060b2:	4413      	add	r3, r2
 80060b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060b8:	463b      	mov	r3, r7
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	00da      	lsls	r2, r3, #3
 80060c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060c4:	4413      	add	r3, r2
 80060c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060ce:	463b      	mov	r3, r7
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d116      	bne.n	8006106 <USB_EPStartXfer+0x1024>
 80060d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060ea:	801a      	strh	r2, [r3, #0]
 80060ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060f0:	881b      	ldrh	r3, [r3, #0]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006102:	801a      	strh	r2, [r3, #0]
 8006104:	e065      	b.n	80061d2 <USB_EPStartXfer+0x10f0>
 8006106:	463b      	mov	r3, r7
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	2b3e      	cmp	r3, #62	; 0x3e
 800610e:	d81a      	bhi.n	8006146 <USB_EPStartXfer+0x1064>
 8006110:	463b      	mov	r3, r7
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	085b      	lsrs	r3, r3, #1
 8006118:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800611c:	463b      	mov	r3, r7
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d004      	beq.n	8006134 <USB_EPStartXfer+0x1052>
 800612a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800612e:	3301      	adds	r3, #1
 8006130:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006138:	b29b      	uxth	r3, r3
 800613a:	029b      	lsls	r3, r3, #10
 800613c:	b29a      	uxth	r2, r3
 800613e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006142:	801a      	strh	r2, [r3, #0]
 8006144:	e045      	b.n	80061d2 <USB_EPStartXfer+0x10f0>
 8006146:	463b      	mov	r3, r7
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006152:	463b      	mov	r3, r7
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	f003 031f 	and.w	r3, r3, #31
 800615c:	2b00      	cmp	r3, #0
 800615e:	d104      	bne.n	800616a <USB_EPStartXfer+0x1088>
 8006160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006164:	3b01      	subs	r3, #1
 8006166:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800616a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800616e:	b29b      	uxth	r3, r3
 8006170:	029b      	lsls	r3, r3, #10
 8006172:	b29b      	uxth	r3, r3
 8006174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800617c:	b29a      	uxth	r2, r3
 800617e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006182:	801a      	strh	r2, [r3, #0]
 8006184:	e025      	b.n	80061d2 <USB_EPStartXfer+0x10f0>
 8006186:	463b      	mov	r3, r7
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	785b      	ldrb	r3, [r3, #1]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d120      	bne.n	80061d2 <USB_EPStartXfer+0x10f0>
 8006190:	1d3b      	adds	r3, r7, #4
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006198:	1d3b      	adds	r3, r7, #4
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061a8:	4413      	add	r3, r2
 80061aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061ae:	463b      	mov	r3, r7
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	00da      	lsls	r2, r3, #3
 80061b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061ba:	4413      	add	r3, r2
 80061bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061c4:	463b      	mov	r3, r7
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061d0:	801a      	strh	r2, [r3, #0]
 80061d2:	1d3b      	adds	r3, r7, #4
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061da:	463b      	mov	r3, r7
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	785b      	ldrb	r3, [r3, #1]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d175      	bne.n	80062d0 <USB_EPStartXfer+0x11ee>
 80061e4:	1d3b      	adds	r3, r7, #4
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80061ec:	1d3b      	adds	r3, r7, #4
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	461a      	mov	r2, r3
 80061f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80061fc:	4413      	add	r3, r2
 80061fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006202:	463b      	mov	r3, r7
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	00da      	lsls	r2, r3, #3
 800620a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800620e:	4413      	add	r3, r2
 8006210:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006214:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006218:	463b      	mov	r3, r7
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d116      	bne.n	8006250 <USB_EPStartXfer+0x116e>
 8006222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800622e:	b29a      	uxth	r2, r3
 8006230:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006234:	801a      	strh	r2, [r3, #0]
 8006236:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b29b      	uxth	r3, r3
 800623e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006246:	b29a      	uxth	r2, r3
 8006248:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800624c:	801a      	strh	r2, [r3, #0]
 800624e:	e061      	b.n	8006314 <USB_EPStartXfer+0x1232>
 8006250:	463b      	mov	r3, r7
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	2b3e      	cmp	r3, #62	; 0x3e
 8006258:	d81a      	bhi.n	8006290 <USB_EPStartXfer+0x11ae>
 800625a:	463b      	mov	r3, r7
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	085b      	lsrs	r3, r3, #1
 8006262:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006266:	463b      	mov	r3, r7
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d004      	beq.n	800627e <USB_EPStartXfer+0x119c>
 8006274:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006278:	3301      	adds	r3, #1
 800627a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800627e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006282:	b29b      	uxth	r3, r3
 8006284:	029b      	lsls	r3, r3, #10
 8006286:	b29a      	uxth	r2, r3
 8006288:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800628c:	801a      	strh	r2, [r3, #0]
 800628e:	e041      	b.n	8006314 <USB_EPStartXfer+0x1232>
 8006290:	463b      	mov	r3, r7
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	095b      	lsrs	r3, r3, #5
 8006298:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800629c:	463b      	mov	r3, r7
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f003 031f 	and.w	r3, r3, #31
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d104      	bne.n	80062b4 <USB_EPStartXfer+0x11d2>
 80062aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062ae:	3b01      	subs	r3, #1
 80062b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	029b      	lsls	r3, r3, #10
 80062bc:	b29b      	uxth	r3, r3
 80062be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062cc:	801a      	strh	r2, [r3, #0]
 80062ce:	e021      	b.n	8006314 <USB_EPStartXfer+0x1232>
 80062d0:	463b      	mov	r3, r7
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	785b      	ldrb	r3, [r3, #1]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d11c      	bne.n	8006314 <USB_EPStartXfer+0x1232>
 80062da:	1d3b      	adds	r3, r7, #4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80062ea:	4413      	add	r3, r2
 80062ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062f0:	463b      	mov	r3, r7
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	00da      	lsls	r2, r3, #3
 80062f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80062fc:	4413      	add	r3, r2
 80062fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006302:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006306:	463b      	mov	r3, r7
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	b29a      	uxth	r2, r3
 800630e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006312:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006314:	463b      	mov	r3, r7
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 81a4 	beq.w	8006668 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006320:	1d3b      	adds	r3, r7, #4
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	463b      	mov	r3, r7
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006334:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d005      	beq.n	800634c <USB_EPStartXfer+0x126a>
 8006340:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10d      	bne.n	8006368 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800634c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006354:	2b00      	cmp	r3, #0
 8006356:	f040 8187 	bne.w	8006668 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800635a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800635e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	f040 8180 	bne.w	8006668 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006368:	1d3b      	adds	r3, r7, #4
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	463b      	mov	r3, r7
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	b29b      	uxth	r3, r3
 800637a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006382:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006386:	1d3b      	adds	r3, r7, #4
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	463b      	mov	r3, r7
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	441a      	add	r2, r3
 8006394:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800639c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	8013      	strh	r3, [r2, #0]
 80063ac:	e15c      	b.n	8006668 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80063ae:	463b      	mov	r3, r7
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	78db      	ldrb	r3, [r3, #3]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	f040 8155 	bne.w	8006664 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80063ba:	463b      	mov	r3, r7
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	699a      	ldr	r2, [r3, #24]
 80063c0:	463b      	mov	r3, r7
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d90e      	bls.n	80063e8 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80063ca:	463b      	mov	r3, r7
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80063d4:	463b      	mov	r3, r7
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063de:	1ad2      	subs	r2, r2, r3
 80063e0:	463b      	mov	r3, r7
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	619a      	str	r2, [r3, #24]
 80063e6:	e008      	b.n	80063fa <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80063e8:	463b      	mov	r3, r7
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80063f2:	463b      	mov	r3, r7
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2200      	movs	r2, #0
 80063f8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80063fa:	463b      	mov	r3, r7
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	785b      	ldrb	r3, [r3, #1]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d16f      	bne.n	80064e4 <USB_EPStartXfer+0x1402>
 8006404:	1d3b      	adds	r3, r7, #4
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800640c:	1d3b      	adds	r3, r7, #4
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006414:	b29b      	uxth	r3, r3
 8006416:	461a      	mov	r2, r3
 8006418:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800641c:	4413      	add	r3, r2
 800641e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006422:	463b      	mov	r3, r7
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	00da      	lsls	r2, r3, #3
 800642a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800642e:	4413      	add	r3, r2
 8006430:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006434:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800643c:	2b00      	cmp	r3, #0
 800643e:	d116      	bne.n	800646e <USB_EPStartXfer+0x138c>
 8006440:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	b29b      	uxth	r3, r3
 8006448:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800644c:	b29a      	uxth	r2, r3
 800644e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006452:	801a      	strh	r2, [r3, #0]
 8006454:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	b29b      	uxth	r3, r3
 800645c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006464:	b29a      	uxth	r2, r3
 8006466:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800646a:	801a      	strh	r2, [r3, #0]
 800646c:	e05f      	b.n	800652e <USB_EPStartXfer+0x144c>
 800646e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006472:	2b3e      	cmp	r3, #62	; 0x3e
 8006474:	d818      	bhi.n	80064a8 <USB_EPStartXfer+0x13c6>
 8006476:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800647a:	085b      	lsrs	r3, r3, #1
 800647c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	d004      	beq.n	8006496 <USB_EPStartXfer+0x13b4>
 800648c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006490:	3301      	adds	r3, #1
 8006492:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800649a:	b29b      	uxth	r3, r3
 800649c:	029b      	lsls	r3, r3, #10
 800649e:	b29a      	uxth	r2, r3
 80064a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064a4:	801a      	strh	r2, [r3, #0]
 80064a6:	e042      	b.n	800652e <USB_EPStartXfer+0x144c>
 80064a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b6:	f003 031f 	and.w	r3, r3, #31
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <USB_EPStartXfer+0x13e6>
 80064be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064c2:	3b01      	subs	r3, #1
 80064c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	029b      	lsls	r3, r3, #10
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064da:	b29a      	uxth	r2, r3
 80064dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064e0:	801a      	strh	r2, [r3, #0]
 80064e2:	e024      	b.n	800652e <USB_EPStartXfer+0x144c>
 80064e4:	463b      	mov	r3, r7
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d11f      	bne.n	800652e <USB_EPStartXfer+0x144c>
 80064ee:	1d3b      	adds	r3, r7, #4
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80064f6:	1d3b      	adds	r3, r7, #4
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064fe:	b29b      	uxth	r3, r3
 8006500:	461a      	mov	r2, r3
 8006502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006506:	4413      	add	r3, r2
 8006508:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800650c:	463b      	mov	r3, r7
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	00da      	lsls	r2, r3, #3
 8006514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006518:	4413      	add	r3, r2
 800651a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800651e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006526:	b29a      	uxth	r2, r3
 8006528:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800652c:	801a      	strh	r2, [r3, #0]
 800652e:	1d3b      	adds	r3, r7, #4
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006536:	463b      	mov	r3, r7
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	785b      	ldrb	r3, [r3, #1]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d16f      	bne.n	8006620 <USB_EPStartXfer+0x153e>
 8006540:	1d3b      	adds	r3, r7, #4
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006548:	1d3b      	adds	r3, r7, #4
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006550:	b29b      	uxth	r3, r3
 8006552:	461a      	mov	r2, r3
 8006554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006558:	4413      	add	r3, r2
 800655a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800655e:	463b      	mov	r3, r7
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	00da      	lsls	r2, r3, #3
 8006566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800656a:	4413      	add	r3, r2
 800656c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d116      	bne.n	80065aa <USB_EPStartXfer+0x14c8>
 800657c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006588:	b29a      	uxth	r2, r3
 800658a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800658e:	801a      	strh	r2, [r3, #0]
 8006590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	b29b      	uxth	r3, r3
 8006598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800659c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065a6:	801a      	strh	r2, [r3, #0]
 80065a8:	e05e      	b.n	8006668 <USB_EPStartXfer+0x1586>
 80065aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ae:	2b3e      	cmp	r3, #62	; 0x3e
 80065b0:	d818      	bhi.n	80065e4 <USB_EPStartXfer+0x1502>
 80065b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b6:	085b      	lsrs	r3, r3, #1
 80065b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80065bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d004      	beq.n	80065d2 <USB_EPStartXfer+0x14f0>
 80065c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065cc:	3301      	adds	r3, #1
 80065ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80065d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	029b      	lsls	r3, r3, #10
 80065da:	b29a      	uxth	r2, r3
 80065dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065e0:	801a      	strh	r2, [r3, #0]
 80065e2:	e041      	b.n	8006668 <USB_EPStartXfer+0x1586>
 80065e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e8:	095b      	lsrs	r3, r3, #5
 80065ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80065ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065f2:	f003 031f 	and.w	r3, r3, #31
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d104      	bne.n	8006604 <USB_EPStartXfer+0x1522>
 80065fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065fe:	3b01      	subs	r3, #1
 8006600:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006604:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006608:	b29b      	uxth	r3, r3
 800660a:	029b      	lsls	r3, r3, #10
 800660c:	b29b      	uxth	r3, r3
 800660e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006616:	b29a      	uxth	r2, r3
 8006618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800661c:	801a      	strh	r2, [r3, #0]
 800661e:	e023      	b.n	8006668 <USB_EPStartXfer+0x1586>
 8006620:	463b      	mov	r3, r7
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	785b      	ldrb	r3, [r3, #1]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d11e      	bne.n	8006668 <USB_EPStartXfer+0x1586>
 800662a:	1d3b      	adds	r3, r7, #4
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006632:	b29b      	uxth	r3, r3
 8006634:	461a      	mov	r2, r3
 8006636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800663a:	4413      	add	r3, r2
 800663c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006640:	463b      	mov	r3, r7
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	00da      	lsls	r2, r3, #3
 8006648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800664c:	4413      	add	r3, r2
 800664e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006652:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800665a:	b29a      	uxth	r2, r3
 800665c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006660:	801a      	strh	r2, [r3, #0]
 8006662:	e001      	b.n	8006668 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e02e      	b.n	80066c6 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006668:	1d3b      	adds	r3, r7, #4
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	463b      	mov	r3, r7
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	b29b      	uxth	r3, r3
 800667a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800667e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006682:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006686:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800668a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800668e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006692:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006696:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800669a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800669e:	1d3b      	adds	r3, r7, #4
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	463b      	mov	r3, r7
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	441a      	add	r2, r3
 80066ac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80066b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	785b      	ldrb	r3, [r3, #1]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d020      	beq.n	8006724 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f8:	81bb      	strh	r3, [r7, #12]
 80066fa:	89bb      	ldrh	r3, [r7, #12]
 80066fc:	f083 0310 	eor.w	r3, r3, #16
 8006700:	81bb      	strh	r3, [r7, #12]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	441a      	add	r2, r3
 800670c:	89bb      	ldrh	r3, [r7, #12]
 800670e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800671a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671e:	b29b      	uxth	r3, r3
 8006720:	8013      	strh	r3, [r2, #0]
 8006722:	e01f      	b.n	8006764 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	b29b      	uxth	r3, r3
 8006732:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673a:	81fb      	strh	r3, [r7, #14]
 800673c:	89fb      	ldrh	r3, [r7, #14]
 800673e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006742:	81fb      	strh	r3, [r7, #14]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	441a      	add	r2, r3
 800674e:	89fb      	ldrh	r3, [r7, #14]
 8006750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800675c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006760:	b29b      	uxth	r3, r3
 8006762:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006772:	b480      	push	{r7}
 8006774:	b087      	sub	sp, #28
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	7b1b      	ldrb	r3, [r3, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	f040 809d 	bne.w	80068c0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	785b      	ldrb	r3, [r3, #1]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d04c      	beq.n	8006828 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	823b      	strh	r3, [r7, #16]
 800679c:	8a3b      	ldrh	r3, [r7, #16]
 800679e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d01b      	beq.n	80067de <USB_EPClearStall+0x6c>
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067bc:	81fb      	strh	r3, [r7, #14]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	441a      	add	r2, r3
 80067c8:	89fb      	ldrh	r3, [r7, #14]
 80067ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067da:	b29b      	uxth	r3, r3
 80067dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	78db      	ldrb	r3, [r3, #3]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d06c      	beq.n	80068c0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067fc:	81bb      	strh	r3, [r7, #12]
 80067fe:	89bb      	ldrh	r3, [r7, #12]
 8006800:	f083 0320 	eor.w	r3, r3, #32
 8006804:	81bb      	strh	r3, [r7, #12]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	441a      	add	r2, r3
 8006810:	89bb      	ldrh	r3, [r7, #12]
 8006812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800681e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006822:	b29b      	uxth	r3, r3
 8006824:	8013      	strh	r3, [r2, #0]
 8006826:	e04b      	b.n	80068c0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	881b      	ldrh	r3, [r3, #0]
 8006834:	82fb      	strh	r3, [r7, #22]
 8006836:	8afb      	ldrh	r3, [r7, #22]
 8006838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d01b      	beq.n	8006878 <USB_EPClearStall+0x106>
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	b29b      	uxth	r3, r3
 800684e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006856:	82bb      	strh	r3, [r7, #20]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	441a      	add	r2, r3
 8006862:	8abb      	ldrh	r3, [r7, #20]
 8006864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800686c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006874:	b29b      	uxth	r3, r3
 8006876:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	b29b      	uxth	r3, r3
 8006886:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800688a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688e:	827b      	strh	r3, [r7, #18]
 8006890:	8a7b      	ldrh	r3, [r7, #18]
 8006892:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006896:	827b      	strh	r3, [r7, #18]
 8006898:	8a7b      	ldrh	r3, [r7, #18]
 800689a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800689e:	827b      	strh	r3, [r7, #18]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	441a      	add	r2, r3
 80068aa:	8a7b      	ldrh	r3, [r7, #18]
 80068ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068bc:	b29b      	uxth	r3, r3
 80068be:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	371c      	adds	r7, #28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	460b      	mov	r3, r1
 80068d8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d103      	bne.n	80068e8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2280      	movs	r2, #128	; 0x80
 80068e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006904:	b29b      	uxth	r3, r3
 8006906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800690a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800690e:	b29a      	uxth	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006932:	b29b      	uxth	r3, r3
 8006934:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006938:	b29a      	uxth	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800694e:	b480      	push	{r7}
 8006950:	b085      	sub	sp, #20
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800695c:	b29b      	uxth	r3, r3
 800695e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006960:	68fb      	ldr	r3, [r7, #12]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006986:	b480      	push	{r7}
 8006988:	b08d      	sub	sp, #52	; 0x34
 800698a:	af00      	add	r7, sp, #0
 800698c:	60f8      	str	r0, [r7, #12]
 800698e:	60b9      	str	r1, [r7, #8]
 8006990:	4611      	mov	r1, r2
 8006992:	461a      	mov	r2, r3
 8006994:	460b      	mov	r3, r1
 8006996:	80fb      	strh	r3, [r7, #6]
 8006998:	4613      	mov	r3, r2
 800699a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800699c:	88bb      	ldrh	r3, [r7, #4]
 800699e:	3301      	adds	r3, #1
 80069a0:	085b      	lsrs	r3, r3, #1
 80069a2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80069ac:	88fa      	ldrh	r2, [r7, #6]
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069b6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069bc:	e01b      	b.n	80069f6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	3301      	adds	r3, #1
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	021b      	lsls	r3, r3, #8
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	461a      	mov	r2, r3
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	4313      	orrs	r3, r2
 80069da:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	b29a      	uxth	r2, r3
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80069e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e6:	3302      	adds	r3, #2
 80069e8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	3301      	adds	r3, #1
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80069f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f2:	3b01      	subs	r3, #1
 80069f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e0      	bne.n	80069be <USB_WritePMA+0x38>
  }
}
 80069fc:	bf00      	nop
 80069fe:	bf00      	nop
 8006a00:	3734      	adds	r7, #52	; 0x34
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b08b      	sub	sp, #44	; 0x2c
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	4611      	mov	r1, r2
 8006a16:	461a      	mov	r2, r3
 8006a18:	460b      	mov	r3, r1
 8006a1a:	80fb      	strh	r3, [r7, #6]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006a20:	88bb      	ldrh	r3, [r7, #4]
 8006a22:	085b      	lsrs	r3, r3, #1
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a30:	88fa      	ldrh	r2, [r7, #6]
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a3a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a40:	e018      	b.n	8006a74 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	3302      	adds	r3, #2
 8006a4e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	0a1b      	lsrs	r3, r3, #8
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	3b01      	subs	r3, #1
 8006a72:	627b      	str	r3, [r7, #36]	; 0x24
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e3      	bne.n	8006a42 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006a7a:	88bb      	ldrh	r3, [r7, #4]
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d007      	beq.n	8006a96 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	701a      	strb	r2, [r3, #0]
  }
}
 8006a96:	bf00      	nop
 8006a98:	372c      	adds	r7, #44	; 0x2c
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <USBD_MIDI_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	460b      	mov	r3, r1
 8006aac:	70fb      	strb	r3, [r7, #3]
  USBD_MIDI_HandleTypeDef   *haudio;
  
  /* Open EP OUT */
  USBD_LL_OpenEP(pdev,
 8006aae:	2340      	movs	r3, #64	; 0x40
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 fe53 	bl	8008760 <USBD_LL_OpenEP>
                 MIDI_OUT_EP,
                 USBD_EP_TYPE_BULK,
                 MIDI_OUT_PACKET);
                
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8006aba:	2340      	movs	r3, #64	; 0x40
 8006abc:	2202      	movs	r2, #2
 8006abe:	2181      	movs	r1, #129	; 0x81
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f001 fe4d 	bl	8008760 <USBD_LL_OpenEP>
                 MIDI_IN_EP,
                 USBD_EP_TYPE_BULK,
                 MIDI_IN_PACKET);
  
  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof (USBD_MIDI_HandleTypeDef));
 8006ac6:	20cc      	movs	r0, #204	; 0xcc
 8006ac8:	f002 f87e 	bl	8008bc8 <USBD_static_malloc>
 8006acc:	4602      	mov	r2, r0
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  
  if(pdev->pClassData == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <USBD_MIDI_Init+0x40>
  {
    return USBD_FAIL; 
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e02d      	b.n	8006b3e <USBD_MIDI_Init+0x9c>
  }
  else
  {
    haudio = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ae8:	60fb      	str	r3, [r7, #12]
    haudio->alt_setting = 0;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	601a      	str	r2, [r3, #0]
    haudio->wr_ptr = 0; 
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
    haudio->rd_ptr = 0;  
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
    haudio->tx_state = 0;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
    haudio->tx_connection = MIDI_TX_UNKNOWN;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
    haudio->tx_timeout = 0;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
    
    /* Initialize the Audio output Hardware layer */
    if (((USBD_MIDI_ItfTypeDef *)pdev->pUserData)->Init(0) != USBD_OK)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2000      	movs	r0, #0
 8006b22:	4798      	blx	r3
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <USBD_MIDI_Init+0x8c>
    {
      return USBD_FAIL;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e007      	b.n	8006b3e <USBD_MIDI_Init+0x9c>
    }
    
    /* Prepare Out endpoint to receive 1st packet */ 
    USBD_LL_PrepareReceive(pdev,
                           MIDI_OUT_EP,
                           (uint8_t*)haudio->rx_buffer,                        
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	1d1a      	adds	r2, r3, #4
    USBD_LL_PrepareReceive(pdev,
 8006b32:	2340      	movs	r3, #64	; 0x40
 8006b34:	2101      	movs	r1, #1
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f001 ffc4 	bl	8008ac4 <USBD_LL_PrepareReceive>
                           MIDI_OUT_PACKET);      
  }
  return USBD_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <USBD_MIDI_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b082      	sub	sp, #8
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	70fb      	strb	r3, [r7, #3]
  
  /* Close EP OUT */
  USBD_LL_CloseEP(pdev,
 8006b52:	2101      	movs	r1, #1
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 fe41 	bl	80087dc <USBD_LL_CloseEP>
              MIDI_OUT_EP);
              
  /* Close EP IN */            
  USBD_LL_CloseEP(pdev,
 8006b5a:	2181      	movs	r1, #129	; 0x81
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f001 fe3d 	bl	80087dc <USBD_LL_CloseEP>
              MIDI_IN_EP);

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00f      	beq.n	8006b8c <USBD_MIDI_DeInit+0x46>
  {
   ((USBD_MIDI_ItfTypeDef *)pdev->pUserData)->DeInit(0);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	2000      	movs	r0, #0
 8006b76:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f002 f830 	bl	8008be4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }
  
  return USBD_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <USBD_MIDI_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_MIDI_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b084      	sub	sp, #16
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]
  USBD_MIDI_HandleTypeDef   *haudio;
  uint8_t ret = USBD_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]
  haudio = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006baa:	60bb      	str	r3, [r7, #8]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d008      	beq.n	8006bca <USBD_MIDI_Setup+0x34>
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	d12b      	bne.n	8006c14 <USBD_MIDI_Setup+0x7e>
  {
  case USB_REQ_TYPE_CLASS :  
    switch (req->bRequest)
    {
    default:
      USBD_CtlError (pdev, req);
 8006bbc:	6839      	ldr	r1, [r7, #0]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f001 fa4c 	bl	800805c <USBD_CtlError>
      ret = USBD_FAIL; 
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	73fb      	strb	r3, [r7, #15]
    }
    break;
 8006bc8:	e024      	b.n	8006c14 <USBD_MIDI_Setup+0x7e>
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	785b      	ldrb	r3, [r3, #1]
 8006bce:	2b0a      	cmp	r3, #10
 8006bd0:	d002      	beq.n	8006bd8 <USBD_MIDI_Setup+0x42>
 8006bd2:	2b0b      	cmp	r3, #11
 8006bd4:	d007      	beq.n	8006be6 <USBD_MIDI_Setup+0x50>
 8006bd6:	e017      	b.n	8006c08 <USBD_MIDI_Setup+0x72>
    {
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
                        (uint8_t *)&(haudio->alt_setting),
 8006bd8:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8006bda:	2201      	movs	r2, #1
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f001 faad 	bl	800813e <USBD_CtlSendData>
                        1);
      break;
 8006be4:	e016      	b.n	8006c14 <USBD_MIDI_Setup+0x7e>
      
    case USB_REQ_SET_INTERFACE :
      if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	885b      	ldrh	r3, [r3, #2]
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d806      	bhi.n	8006bfe <USBD_MIDI_Setup+0x68>
      {
        haudio->alt_setting = (uint8_t)(req->wValue);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	885b      	ldrh	r3, [r3, #2]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	601a      	str	r2, [r3, #0]
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
      }
      break;      
 8006bfc:	e00a      	b.n	8006c14 <USBD_MIDI_Setup+0x7e>
        USBD_CtlError (pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f001 fa2b 	bl	800805c <USBD_CtlError>
      break;      
 8006c06:	e005      	b.n	8006c14 <USBD_MIDI_Setup+0x7e>
      
    default:
      USBD_CtlError (pdev, req);
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f001 fa26 	bl	800805c <USBD_CtlError>
      ret = USBD_FAIL;     
 8006c10:	2303      	movs	r3, #3
 8006c12:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <USBD_MIDI_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_MIDI_GetCfgDesc (uint16_t *length)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2265      	movs	r2, #101	; 0x65
 8006c2c:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 8006c2e:	4b03      	ldr	r3, [pc, #12]	; (8006c3c <USBD_MIDI_GetCfgDesc+0x1c>)
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	2000005c 	.word	0x2000005c

08006c40 <USBD_MIDI_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	70fb      	strb	r3, [r7, #3]
  USBD_MIDI_HandleTypeDef   *haudio;
  USBD_MIDI_ItfTypeDef      *haudio_itf;
  haudio_itf = (USBD_MIDI_ItfTypeDef*)pdev->pUserData;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c52:	60fb      	str	r3, [r7, #12]
  haudio = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c5a:	60bb      	str	r3, [r7, #8]
  
  if (haudio != NULL && (epnum & 0x7F) == (MIDI_IN_EP & 0x7F))
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d01d      	beq.n	8006c9e <USBD_MIDI_DataIn+0x5e>
 8006c62:	78fb      	ldrb	r3, [r7, #3]
 8006c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d118      	bne.n	8006c9e <USBD_MIDI_DataIn+0x5e>
  {
      haudio->tx_state = 0;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      haudio->tx_timeout = 0;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
      if(haudio->tx_connection != MIDI_TX_CONNECTED){
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d007      	beq.n	8006c98 <USBD_MIDI_DataIn+0x58>
        haudio->tx_connection = MIDI_TX_CONNECTED;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
        haudio_itf->StatusTX(MIDI_TX_CONNECTED);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	2001      	movs	r0, #1
 8006c96:	4798      	blx	r3
      }
      USBD_MIDI_SetupTransfer(pdev);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f88f 	bl	8006dbc <USBD_MIDI_SetupTransfer>
  }
  return USBD_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <USBD_MIDI_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_MIDI_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <USBD_MIDI_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_MIDI_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <USBD_MIDI_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_MIDI_SOF (USBD_HandleTypeDef *pdev)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  USBD_MIDI_HandleTypeDef   *haudio;
  USBD_MIDI_ItfTypeDef      *haudio_itf;
  haudio_itf = (USBD_MIDI_ItfTypeDef*)pdev->pUserData;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ce2:	60fb      	str	r3, [r7, #12]
  haudio = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cea:	60bb      	str	r3, [r7, #8]
  
  if (haudio != NULL && haudio->tx_state != 0)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d025      	beq.n	8006d3e <USBD_MIDI_SOF+0x6a>
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d01f      	beq.n	8006d3e <USBD_MIDI_SOF+0x6a>
  {
      haudio->tx_timeout++;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	3301      	adds	r3, #1
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
      if(haudio->tx_timeout > 10)  USBD_MIDI_FlushTX(pdev);
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b0a      	cmp	r3, #10
 8006d1a:	d902      	bls.n	8006d22 <USBD_MIDI_SOF+0x4e>
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f813 	bl	8006d48 <USBD_MIDI_FlushTX>

        if(haudio->tx_connection != MIDI_TX_DISCONNECTED){
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d007      	beq.n	8006d3e <USBD_MIDI_SOF+0x6a>
          haudio->tx_connection = MIDI_TX_DISCONNECTED;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
          haudio_itf->StatusTX(MIDI_TX_DISCONNECTED);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	4798      	blx	r3
      }
  }
  return USBD_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <USBD_MIDI_FlushTX>:

static void USBD_MIDI_FlushTX(USBD_HandleTypeDef *pdev){
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  USBD_MIDI_HandleTypeDef   *haudio;
  haudio = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d56:	617b      	str	r3, [r7, #20]
  USBD_LL_FlushEP(pdev,MIDI_IN_EP);
 8006d58:	2181      	movs	r1, #129	; 0x81
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f001 fd74 	bl	8008848 <USBD_LL_FlushEP>
  haudio->rd_ptr = haudio->wr_ptr;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f8b3 20c6 	ldrh.w	r2, [r3, #198]	; 0xc6
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
  haudio->tx_state = 0;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
  
  /* F0 USB specific - stop TX EP */
  PCD_HandleTypeDef* hpcd = (PCD_HandleTypeDef*)(pdev->pData);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d7a:	613b      	str	r3, [r7, #16]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, MIDI_IN_EP & 0x7F, USB_EP_TX_NAK);
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3304      	adds	r3, #4
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d8e:	81fb      	strh	r3, [r7, #14]
 8006d90:	89fb      	ldrh	r3, [r7, #14]
 8006d92:	f083 0320 	eor.w	r3, r3, #32
 8006d96:	81fb      	strh	r3, [r7, #14]
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	1d1a      	adds	r2, r3, #4
 8006d9e:	89fb      	ldrh	r3, [r7, #14]
 8006da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	8013      	strh	r3, [r2, #0]
  //USBD_LL_Transmit(pdev, MIDI_IN_EP, (uint8_t*)haudio->tx_buffer_rd, 0);
}
 8006db4:	bf00      	nop
 8006db6:	3718      	adds	r7, #24
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_MIDI_SetupTransfer>:

static void USBD_MIDI_SetupTransfer(USBD_HandleTypeDef *pdev){
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  USBD_MIDI_HandleTypeDef   *haudio;
  haudio = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dca:	60bb      	str	r3, [r7, #8]
  if(haudio && haudio->tx_state == 0 && haudio->rd_ptr != haudio->wr_ptr){
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d054      	beq.n	8006e7c <USBD_MIDI_SetupTransfer+0xc0>
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d14e      	bne.n	8006e7c <USBD_MIDI_SetupTransfer+0xc0>
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d045      	beq.n	8006e7c <USBD_MIDI_SetupTransfer+0xc0>
    uint16_t i = 0;
 8006df0:	2300      	movs	r3, #0
 8006df2:	81fb      	strh	r3, [r7, #14]
    uint16_t new_rd_ptr = 0;
 8006df4:	2300      	movs	r3, #0
 8006df6:	81bb      	strh	r3, [r7, #12]
    for(i = 0; i < MIDI_TOTAL_BUF_SIZE;++i){
 8006df8:	2300      	movs	r3, #0
 8006dfa:	81fb      	strh	r3, [r7, #14]
 8006dfc:	e02e      	b.n	8006e5c <USBD_MIDI_SetupTransfer+0xa0>
      haudio->tx_buffer_rd[i] = haudio->tx_buffer_wr[haudio->rd_ptr];
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	89f8      	ldrh	r0, [r7, #14]
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	3320      	adds	r3, #32
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	68b9      	ldr	r1, [r7, #8]
 8006e14:	f100 0310 	add.w	r3, r0, #16
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	440b      	add	r3, r1
 8006e1c:	605a      	str	r2, [r3, #4]
    
      new_rd_ptr = haudio->rd_ptr+1;
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	3301      	adds	r3, #1
 8006e28:	81bb      	strh	r3, [r7, #12]
      
      if(new_rd_ptr >= MIDI_TOTAL_BUF_SIZE){ 
 8006e2a:	89bb      	ldrh	r3, [r7, #12]
 8006e2c:	2b0f      	cmp	r3, #15
 8006e2e:	d901      	bls.n	8006e34 <USBD_MIDI_SetupTransfer+0x78>
        new_rd_ptr = 0;
 8006e30:	2300      	movs	r3, #0
 8006e32:	81bb      	strh	r3, [r7, #12]
      }
      haudio->rd_ptr = new_rd_ptr;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	89ba      	ldrh	r2, [r7, #12]
 8006e38:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
      if(haudio->rd_ptr == haudio->wr_ptr){
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d103      	bne.n	8006e56 <USBD_MIDI_SetupTransfer+0x9a>
        ++i;
 8006e4e:	89fb      	ldrh	r3, [r7, #14]
 8006e50:	3301      	adds	r3, #1
 8006e52:	81fb      	strh	r3, [r7, #14]
        break;
 8006e54:	e005      	b.n	8006e62 <USBD_MIDI_SetupTransfer+0xa6>
    for(i = 0; i < MIDI_TOTAL_BUF_SIZE;++i){
 8006e56:	89fb      	ldrh	r3, [r7, #14]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	81fb      	strh	r3, [r7, #14]
 8006e5c:	89fb      	ldrh	r3, [r7, #14]
 8006e5e:	2b0f      	cmp	r3, #15
 8006e60:	d9cd      	bls.n	8006dfe <USBD_MIDI_SetupTransfer+0x42>
      }
    }
    
    haudio->tx_state = 1;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
    USBD_LL_Transmit(pdev, MIDI_IN_EP, (uint8_t*)haudio->tx_buffer_rd, i*4);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8006e70:	89fb      	ldrh	r3, [r7, #14]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	2181      	movs	r1, #129	; 0x81
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f001 fdec 	bl	8008a54 <USBD_LL_Transmit>
  }
}
 8006e7c:	bf00      	nop
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USBD_MIDI_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <USBD_MIDI_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <USBD_MIDI_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	70fb      	strb	r3, [r7, #3]
  USBD_MIDI_HandleTypeDef   *haudio;
  USBD_MIDI_ItfTypeDef      *haudio_itf;
  haudio_itf = (USBD_MIDI_ItfTypeDef*)pdev->pUserData;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eca:	613b      	str	r3, [r7, #16]
  haudio = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ed2:	60fb      	str	r3, [r7, #12]
  
  if (epnum == MIDI_OUT_EP)
 8006ed4:	78fb      	ldrb	r3, [r7, #3]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d128      	bne.n	8006f2c <USBD_MIDI_DataOut+0x74>
  {
    
    uint8_t message_count = USBD_LL_GetRxDataSize (pdev, epnum);
 8006eda:	78fb      	ldrb	r3, [r7, #3]
 8006edc:	4619      	mov	r1, r3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 fe28 	bl	8008b34 <USBD_LL_GetRxDataSize>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	72fb      	strb	r3, [r7, #11]
    
    if((message_count & 0x3) == 0){
 8006ee8:	7afb      	ldrb	r3, [r7, #11]
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d115      	bne.n	8006f1e <USBD_MIDI_DataOut+0x66>
      uint8_t i;
      message_count >>= 2;
 8006ef2:	7afb      	ldrb	r3, [r7, #11]
 8006ef4:	089b      	lsrs	r3, r3, #2
 8006ef6:	72fb      	strb	r3, [r7, #11]
      for(i = 0;i < message_count;++i){
 8006ef8:	2300      	movs	r3, #0
 8006efa:	75fb      	strb	r3, [r7, #23]
 8006efc:	e00b      	b.n	8006f16 <USBD_MIDI_DataOut+0x5e>
        haudio_itf->EventOUT(haudio->rx_buffer[i]);
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	689a      	ldr	r2, [r3, #8]
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
 8006f04:	68f9      	ldr	r1, [r7, #12]
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	4790      	blx	r2
      for(i = 0;i < message_count;++i){
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
 8006f12:	3301      	adds	r3, #1
 8006f14:	75fb      	strb	r3, [r7, #23]
 8006f16:	7dfa      	ldrb	r2, [r7, #23]
 8006f18:	7afb      	ldrb	r3, [r7, #11]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d3ef      	bcc.n	8006efe <USBD_MIDI_DataOut+0x46>
    }
    
    /* Prepare Out endpoint to receive next audio packet */
    USBD_LL_PrepareReceive(pdev,
                           MIDI_OUT_EP,
                           (uint8_t*)haudio->rx_buffer, 
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1d1a      	adds	r2, r3, #4
    USBD_LL_PrepareReceive(pdev,
 8006f22:	2340      	movs	r3, #64	; 0x40
 8006f24:	2101      	movs	r1, #1
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 fdcc 	bl	8008ac4 <USBD_LL_PrepareReceive>
                           MIDI_OUT_PACKET);  
      
  }
  
  return USBD_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
	...

08006f38 <USBD_MIDI_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_MIDI_GetDeviceQualifierDesc (uint16_t *length)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	220a      	movs	r2, #10
 8006f44:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_DeviceQualifierDesc;
 8006f46:	4b03      	ldr	r3, [pc, #12]	; (8006f54 <USBD_MIDI_GetDeviceQualifierDesc+0x1c>)
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	200000c4 	.word	0x200000c4

08006f58 <USBD_MIDI_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t  USBD_MIDI_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                        USBD_MIDI_ItfTypeDef *fops)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d003      	beq.n	8006f70 <USBD_MIDI_RegisterInterface+0x18>
  {
    pdev->pUserData= fops;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  }
  return 0;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <USBD_MIDI_SendEvent>:

uint8_t  USBD_MIDI_SendEvent(USBD_HandleTypeDef   *pdev, USBD_MIDI_MessageTypeDef event){
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b084      	sub	sp, #16
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]
  USBD_MIDI_HandleTypeDef   *haudio;
  haudio = (USBD_MIDI_HandleTypeDef*) pdev->pClassData;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f8e:	60bb      	str	r3, [r7, #8]
  if(haudio){
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d02f      	beq.n	8006ff6 <USBD_MIDI_SendEvent+0x78>
    uint16_t new_wr_ptr = haudio->wr_ptr + 1;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	81fb      	strh	r3, [r7, #14]
    if(new_wr_ptr >= MIDI_TOTAL_BUF_SIZE) new_wr_ptr = 0;
 8006fa0:	89fb      	ldrh	r3, [r7, #14]
 8006fa2:	2b0f      	cmp	r3, #15
 8006fa4:	d901      	bls.n	8006faa <USBD_MIDI_SendEvent+0x2c>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	81fb      	strh	r3, [r7, #14]
    if(new_wr_ptr != haudio->rd_ptr){
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	89fa      	ldrh	r2, [r7, #14]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d01e      	beq.n	8006ff6 <USBD_MIDI_SendEvent+0x78>
      MIDI_SET_USB_CIN(event, MIDI_GET_EVENT_ID(event) >> 4);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	f023 020f 	bic.w	r2, r3, #15
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	0a1b      	lsrs	r3, r3, #8
 8006fc2:	091b      	lsrs	r3, r3, #4
 8006fc4:	f003 030f 	and.w	r3, r3, #15
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	603b      	str	r3, [r7, #0]
      haudio->tx_buffer_wr[haudio->wr_ptr] = event;
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	3320      	adds	r3, #32
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	605a      	str	r2, [r3, #4]
      haudio->wr_ptr = new_wr_ptr;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	89fa      	ldrh	r2, [r7, #14]
 8006fe2:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006fe6:	f3bf 8f4f 	dsb	sy
}
 8006fea:	bf00      	nop
      
      __DSB();
      USBD_MIDI_SetupTransfer(pdev);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7ff fee5 	bl	8006dbc <USBD_MIDI_SetupTransfer>
      
      return USBD_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e000      	b.n	8006ff8 <USBD_MIDI_SendEvent+0x7a>
    }
  }
  return USBD_BUSY;
 8006ff6:	2301      	movs	r3, #1
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	4613      	mov	r3, r2
 800700c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007014:	2303      	movs	r3, #3
 8007016:	e01f      	b.n	8007058 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	79fa      	ldrb	r2, [r7, #7]
 800704a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f001 fb0d 	bl	800866c <USBD_LL_Init>
 8007052:	4603      	mov	r3, r0
 8007054:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007056:	7dfb      	ldrb	r3, [r7, #23]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007074:	2303      	movs	r3, #3
 8007076:	e016      	b.n	80070a6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00b      	beq.n	80070a4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007094:	f107 020e 	add.w	r2, r7, #14
 8007098:	4610      	mov	r0, r2
 800709a:	4798      	blx	r3
 800709c:	4602      	mov	r2, r0
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b082      	sub	sp, #8
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f001 fb20 	bl	80086fc <USBD_LL_Start>
 80070bc:	4603      	mov	r3, r0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80070e8:	2303      	movs	r3, #3
 80070ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d009      	beq.n	800710a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	78fa      	ldrb	r2, [r7, #3]
 8007100:	4611      	mov	r1, r2
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	4798      	blx	r3
 8007106:	4603      	mov	r3, r0
 8007108:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800710a:	7bfb      	ldrb	r3, [r7, #15]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	460b      	mov	r3, r1
 800711e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007126:	2b00      	cmp	r3, #0
 8007128:	d007      	beq.n	800713a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	78fa      	ldrb	r2, [r7, #3]
 8007134:	4611      	mov	r1, r2
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	4798      	blx	r3
  }

  return USBD_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	4618      	mov	r0, r3
 8007158:	f000 ff46 	bl	8007fe8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800716a:	461a      	mov	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007178:	f003 031f 	and.w	r3, r3, #31
 800717c:	2b02      	cmp	r3, #2
 800717e:	d01a      	beq.n	80071b6 <USBD_LL_SetupStage+0x72>
 8007180:	2b02      	cmp	r3, #2
 8007182:	d822      	bhi.n	80071ca <USBD_LL_SetupStage+0x86>
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <USBD_LL_SetupStage+0x4a>
 8007188:	2b01      	cmp	r3, #1
 800718a:	d00a      	beq.n	80071a2 <USBD_LL_SetupStage+0x5e>
 800718c:	e01d      	b.n	80071ca <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f9ee 	bl	8007578 <USBD_StdDevReq>
 800719c:	4603      	mov	r3, r0
 800719e:	73fb      	strb	r3, [r7, #15]
      break;
 80071a0:	e020      	b.n	80071e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071a8:	4619      	mov	r1, r3
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fa52 	bl	8007654 <USBD_StdItfReq>
 80071b0:	4603      	mov	r3, r0
 80071b2:	73fb      	strb	r3, [r7, #15]
      break;
 80071b4:	e016      	b.n	80071e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa91 	bl	80076e6 <USBD_StdEPReq>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73fb      	strb	r3, [r7, #15]
      break;
 80071c8:	e00c      	b.n	80071e4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f001 fb6b 	bl	80088b4 <USBD_LL_StallEP>
 80071de:	4603      	mov	r3, r0
 80071e0:	73fb      	strb	r3, [r7, #15]
      break;
 80071e2:	bf00      	nop
  }

  return ret;
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b086      	sub	sp, #24
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	460b      	mov	r3, r1
 80071f8:	607a      	str	r2, [r7, #4]
 80071fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80071fc:	7afb      	ldrb	r3, [r7, #11]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d138      	bne.n	8007274 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007208:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007210:	2b03      	cmp	r3, #3
 8007212:	d14a      	bne.n	80072aa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	429a      	cmp	r2, r3
 800721e:	d913      	bls.n	8007248 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	1ad2      	subs	r2, r2, r3
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	4293      	cmp	r3, r2
 8007238:	bf28      	it	cs
 800723a:	4613      	movcs	r3, r2
 800723c:	461a      	mov	r2, r3
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 ffa8 	bl	8008196 <USBD_CtlContinueRx>
 8007246:	e030      	b.n	80072aa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b03      	cmp	r3, #3
 8007252:	d10b      	bne.n	800726c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 ffa3 	bl	80081b8 <USBD_CtlSendStatus>
 8007272:	e01a      	b.n	80072aa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b03      	cmp	r3, #3
 800727e:	d114      	bne.n	80072aa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00e      	beq.n	80072aa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	7afa      	ldrb	r2, [r7, #11]
 8007296:	4611      	mov	r1, r2
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	4798      	blx	r3
 800729c:	4603      	mov	r3, r0
 800729e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80072a0:	7dfb      	ldrb	r3, [r7, #23]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
 80072a8:	e000      	b.n	80072ac <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	460b      	mov	r3, r1
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80072c2:	7afb      	ldrb	r3, [r7, #11]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d16b      	bne.n	80073a0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3314      	adds	r3, #20
 80072cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d156      	bne.n	8007386 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d914      	bls.n	800730e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	1ad2      	subs	r2, r2, r3
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	461a      	mov	r2, r3
 80072f8:	6879      	ldr	r1, [r7, #4]
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 ff3a 	bl	8008174 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007300:	2300      	movs	r3, #0
 8007302:	2200      	movs	r2, #0
 8007304:	2100      	movs	r1, #0
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f001 fbdc 	bl	8008ac4 <USBD_LL_PrepareReceive>
 800730c:	e03b      	b.n	8007386 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	429a      	cmp	r2, r3
 8007318:	d11c      	bne.n	8007354 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007322:	429a      	cmp	r2, r3
 8007324:	d316      	bcc.n	8007354 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007330:	429a      	cmp	r2, r3
 8007332:	d20f      	bcs.n	8007354 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007334:	2200      	movs	r2, #0
 8007336:	2100      	movs	r1, #0
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f000 ff1b 	bl	8008174 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007346:	2300      	movs	r3, #0
 8007348:	2200      	movs	r2, #0
 800734a:	2100      	movs	r1, #0
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f001 fbb9 	bl	8008ac4 <USBD_LL_PrepareReceive>
 8007352:	e018      	b.n	8007386 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b03      	cmp	r3, #3
 800735e:	d10b      	bne.n	8007378 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d005      	beq.n	8007378 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007378:	2180      	movs	r1, #128	; 0x80
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f001 fa9a 	bl	80088b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 ff2c 	bl	80081de <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800738c:	2b01      	cmp	r3, #1
 800738e:	d122      	bne.n	80073d6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f7ff fe98 	bl	80070c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800739e:	e01a      	b.n	80073d6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d114      	bne.n	80073d6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00e      	beq.n	80073d6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073be:	695b      	ldr	r3, [r3, #20]
 80073c0:	7afa      	ldrb	r2, [r7, #11]
 80073c2:	4611      	mov	r1, r2
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	4798      	blx	r3
 80073c8:	4603      	mov	r3, r0
 80073ca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80073cc:	7dfb      	ldrb	r3, [r7, #23]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d001      	beq.n	80073d6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80073d2:	7dfb      	ldrb	r3, [r7, #23]
 80073d4:	e000      	b.n	80073d8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3718      	adds	r7, #24
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007410:	2303      	movs	r3, #3
 8007412:	e02f      	b.n	8007474 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00f      	beq.n	800743e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d009      	beq.n	800743e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	6852      	ldr	r2, [r2, #4]
 8007436:	b2d2      	uxtb	r2, r2
 8007438:	4611      	mov	r1, r2
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800743e:	2340      	movs	r3, #64	; 0x40
 8007440:	2200      	movs	r2, #0
 8007442:	2100      	movs	r1, #0
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f001 f98b 	bl	8008760 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2240      	movs	r2, #64	; 0x40
 8007456:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800745a:	2340      	movs	r3, #64	; 0x40
 800745c:	2200      	movs	r2, #0
 800745e:	2180      	movs	r1, #128	; 0x80
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f001 f97d 	bl	8008760 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2240      	movs	r2, #64	; 0x40
 8007470:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	460b      	mov	r3, r1
 8007486:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	78fa      	ldrb	r2, [r7, #3]
 800748c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2204      	movs	r2, #4
 80074b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b04      	cmp	r3, #4
 80074da:	d106      	bne.n	80074ea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800750a:	2303      	movs	r3, #3
 800750c:	e012      	b.n	8007534 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b03      	cmp	r3, #3
 8007518:	d10b      	bne.n	8007532 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d005      	beq.n	8007532 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800752c:	69db      	ldr	r3, [r3, #28]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	3301      	adds	r3, #1
 8007552:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800755a:	8a3b      	ldrh	r3, [r7, #16]
 800755c:	021b      	lsls	r3, r3, #8
 800755e:	b21a      	sxth	r2, r3
 8007560:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007564:	4313      	orrs	r3, r2
 8007566:	b21b      	sxth	r3, r3
 8007568:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800756a:	89fb      	ldrh	r3, [r7, #14]
}
 800756c:	4618      	mov	r0, r3
 800756e:	371c      	adds	r7, #28
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800758e:	2b40      	cmp	r3, #64	; 0x40
 8007590:	d005      	beq.n	800759e <USBD_StdDevReq+0x26>
 8007592:	2b40      	cmp	r3, #64	; 0x40
 8007594:	d853      	bhi.n	800763e <USBD_StdDevReq+0xc6>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00b      	beq.n	80075b2 <USBD_StdDevReq+0x3a>
 800759a:	2b20      	cmp	r3, #32
 800759c:	d14f      	bne.n	800763e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	4798      	blx	r3
 80075ac:	4603      	mov	r3, r0
 80075ae:	73fb      	strb	r3, [r7, #15]
      break;
 80075b0:	e04a      	b.n	8007648 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	785b      	ldrb	r3, [r3, #1]
 80075b6:	2b09      	cmp	r3, #9
 80075b8:	d83b      	bhi.n	8007632 <USBD_StdDevReq+0xba>
 80075ba:	a201      	add	r2, pc, #4	; (adr r2, 80075c0 <USBD_StdDevReq+0x48>)
 80075bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c0:	08007615 	.word	0x08007615
 80075c4:	08007629 	.word	0x08007629
 80075c8:	08007633 	.word	0x08007633
 80075cc:	0800761f 	.word	0x0800761f
 80075d0:	08007633 	.word	0x08007633
 80075d4:	080075f3 	.word	0x080075f3
 80075d8:	080075e9 	.word	0x080075e9
 80075dc:	08007633 	.word	0x08007633
 80075e0:	0800760b 	.word	0x0800760b
 80075e4:	080075fd 	.word	0x080075fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f9de 	bl	80079ac <USBD_GetDescriptor>
          break;
 80075f0:	e024      	b.n	800763c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80075f2:	6839      	ldr	r1, [r7, #0]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fb6d 	bl	8007cd4 <USBD_SetAddress>
          break;
 80075fa:	e01f      	b.n	800763c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fbac 	bl	8007d5c <USBD_SetConfig>
 8007604:	4603      	mov	r3, r0
 8007606:	73fb      	strb	r3, [r7, #15]
          break;
 8007608:	e018      	b.n	800763c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fc4b 	bl	8007ea8 <USBD_GetConfig>
          break;
 8007612:	e013      	b.n	800763c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fc7c 	bl	8007f14 <USBD_GetStatus>
          break;
 800761c:	e00e      	b.n	800763c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fcab 	bl	8007f7c <USBD_SetFeature>
          break;
 8007626:	e009      	b.n	800763c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fcba 	bl	8007fa4 <USBD_ClrFeature>
          break;
 8007630:	e004      	b.n	800763c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007632:	6839      	ldr	r1, [r7, #0]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fd11 	bl	800805c <USBD_CtlError>
          break;
 800763a:	bf00      	nop
      }
      break;
 800763c:	e004      	b.n	8007648 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fd0b 	bl	800805c <USBD_CtlError>
      break;
 8007646:	bf00      	nop
  }

  return ret;
 8007648:	7bfb      	ldrb	r3, [r7, #15]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop

08007654 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800766a:	2b40      	cmp	r3, #64	; 0x40
 800766c:	d005      	beq.n	800767a <USBD_StdItfReq+0x26>
 800766e:	2b40      	cmp	r3, #64	; 0x40
 8007670:	d82f      	bhi.n	80076d2 <USBD_StdItfReq+0x7e>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <USBD_StdItfReq+0x26>
 8007676:	2b20      	cmp	r3, #32
 8007678:	d12b      	bne.n	80076d2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007680:	b2db      	uxtb	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	2b02      	cmp	r3, #2
 8007686:	d81d      	bhi.n	80076c4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	889b      	ldrh	r3, [r3, #4]
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b01      	cmp	r3, #1
 8007690:	d813      	bhi.n	80076ba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	4798      	blx	r3
 80076a0:	4603      	mov	r3, r0
 80076a2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	88db      	ldrh	r3, [r3, #6]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d110      	bne.n	80076ce <USBD_StdItfReq+0x7a>
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10d      	bne.n	80076ce <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fd80 	bl	80081b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80076b8:	e009      	b.n	80076ce <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fccd 	bl	800805c <USBD_CtlError>
          break;
 80076c2:	e004      	b.n	80076ce <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fcc8 	bl	800805c <USBD_CtlError>
          break;
 80076cc:	e000      	b.n	80076d0 <USBD_StdItfReq+0x7c>
          break;
 80076ce:	bf00      	nop
      }
      break;
 80076d0:	e004      	b.n	80076dc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fcc1 	bl	800805c <USBD_CtlError>
      break;
 80076da:	bf00      	nop
  }

  return ret;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	889b      	ldrh	r3, [r3, #4]
 80076f8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007702:	2b40      	cmp	r3, #64	; 0x40
 8007704:	d007      	beq.n	8007716 <USBD_StdEPReq+0x30>
 8007706:	2b40      	cmp	r3, #64	; 0x40
 8007708:	f200 8145 	bhi.w	8007996 <USBD_StdEPReq+0x2b0>
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00c      	beq.n	800772a <USBD_StdEPReq+0x44>
 8007710:	2b20      	cmp	r3, #32
 8007712:	f040 8140 	bne.w	8007996 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	4798      	blx	r3
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]
      break;
 8007728:	e13a      	b.n	80079a0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	785b      	ldrb	r3, [r3, #1]
 800772e:	2b03      	cmp	r3, #3
 8007730:	d007      	beq.n	8007742 <USBD_StdEPReq+0x5c>
 8007732:	2b03      	cmp	r3, #3
 8007734:	f300 8129 	bgt.w	800798a <USBD_StdEPReq+0x2a4>
 8007738:	2b00      	cmp	r3, #0
 800773a:	d07f      	beq.n	800783c <USBD_StdEPReq+0x156>
 800773c:	2b01      	cmp	r3, #1
 800773e:	d03c      	beq.n	80077ba <USBD_StdEPReq+0xd4>
 8007740:	e123      	b.n	800798a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b02      	cmp	r3, #2
 800774c:	d002      	beq.n	8007754 <USBD_StdEPReq+0x6e>
 800774e:	2b03      	cmp	r3, #3
 8007750:	d016      	beq.n	8007780 <USBD_StdEPReq+0x9a>
 8007752:	e02c      	b.n	80077ae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00d      	beq.n	8007776 <USBD_StdEPReq+0x90>
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	2b80      	cmp	r3, #128	; 0x80
 800775e:	d00a      	beq.n	8007776 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 f8a5 	bl	80088b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800776a:	2180      	movs	r1, #128	; 0x80
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f001 f8a1 	bl	80088b4 <USBD_LL_StallEP>
 8007772:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007774:	e020      	b.n	80077b8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fc6f 	bl	800805c <USBD_CtlError>
              break;
 800777e:	e01b      	b.n	80077b8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	885b      	ldrh	r3, [r3, #2]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10e      	bne.n	80077a6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007788:	7bbb      	ldrb	r3, [r7, #14]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00b      	beq.n	80077a6 <USBD_StdEPReq+0xc0>
 800778e:	7bbb      	ldrb	r3, [r7, #14]
 8007790:	2b80      	cmp	r3, #128	; 0x80
 8007792:	d008      	beq.n	80077a6 <USBD_StdEPReq+0xc0>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	88db      	ldrh	r3, [r3, #6]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d104      	bne.n	80077a6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800779c:	7bbb      	ldrb	r3, [r7, #14]
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f001 f887 	bl	80088b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fd06 	bl	80081b8 <USBD_CtlSendStatus>

              break;
 80077ac:	e004      	b.n	80077b8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fc53 	bl	800805c <USBD_CtlError>
              break;
 80077b6:	bf00      	nop
          }
          break;
 80077b8:	e0ec      	b.n	8007994 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d002      	beq.n	80077cc <USBD_StdEPReq+0xe6>
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d016      	beq.n	80077f8 <USBD_StdEPReq+0x112>
 80077ca:	e030      	b.n	800782e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00d      	beq.n	80077ee <USBD_StdEPReq+0x108>
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	2b80      	cmp	r3, #128	; 0x80
 80077d6:	d00a      	beq.n	80077ee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077d8:	7bbb      	ldrb	r3, [r7, #14]
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f001 f869 	bl	80088b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80077e2:	2180      	movs	r1, #128	; 0x80
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 f865 	bl	80088b4 <USBD_LL_StallEP>
 80077ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077ec:	e025      	b.n	800783a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fc33 	bl	800805c <USBD_CtlError>
              break;
 80077f6:	e020      	b.n	800783a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	885b      	ldrh	r3, [r3, #2]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d11b      	bne.n	8007838 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007800:	7bbb      	ldrb	r3, [r7, #14]
 8007802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007806:	2b00      	cmp	r3, #0
 8007808:	d004      	beq.n	8007814 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800780a:	7bbb      	ldrb	r3, [r7, #14]
 800780c:	4619      	mov	r1, r3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f001 f886 	bl	8008920 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fccf 	bl	80081b8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	4798      	blx	r3
 8007828:	4603      	mov	r3, r0
 800782a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800782c:	e004      	b.n	8007838 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fc13 	bl	800805c <USBD_CtlError>
              break;
 8007836:	e000      	b.n	800783a <USBD_StdEPReq+0x154>
              break;
 8007838:	bf00      	nop
          }
          break;
 800783a:	e0ab      	b.n	8007994 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b02      	cmp	r3, #2
 8007846:	d002      	beq.n	800784e <USBD_StdEPReq+0x168>
 8007848:	2b03      	cmp	r3, #3
 800784a:	d032      	beq.n	80078b2 <USBD_StdEPReq+0x1cc>
 800784c:	e097      	b.n	800797e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d007      	beq.n	8007864 <USBD_StdEPReq+0x17e>
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	2b80      	cmp	r3, #128	; 0x80
 8007858:	d004      	beq.n	8007864 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fbfd 	bl	800805c <USBD_CtlError>
                break;
 8007862:	e091      	b.n	8007988 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007864:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007868:	2b00      	cmp	r3, #0
 800786a:	da0b      	bge.n	8007884 <USBD_StdEPReq+0x19e>
 800786c:	7bbb      	ldrb	r3, [r7, #14]
 800786e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007872:	4613      	mov	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	3310      	adds	r3, #16
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	4413      	add	r3, r2
 8007880:	3304      	adds	r3, #4
 8007882:	e00b      	b.n	800789c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007884:	7bbb      	ldrb	r3, [r7, #14]
 8007886:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800788a:	4613      	mov	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	4413      	add	r3, r2
 800789a:	3304      	adds	r3, #4
 800789c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2202      	movs	r2, #2
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fc47 	bl	800813e <USBD_CtlSendData>
              break;
 80078b0:	e06a      	b.n	8007988 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80078b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	da11      	bge.n	80078de <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	f003 020f 	and.w	r2, r3, #15
 80078c0:	6879      	ldr	r1, [r7, #4]
 80078c2:	4613      	mov	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	440b      	add	r3, r1
 80078cc:	3324      	adds	r3, #36	; 0x24
 80078ce:	881b      	ldrh	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d117      	bne.n	8007904 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fbc0 	bl	800805c <USBD_CtlError>
                  break;
 80078dc:	e054      	b.n	8007988 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	f003 020f 	and.w	r2, r3, #15
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	4613      	mov	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	440b      	add	r3, r1
 80078f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d104      	bne.n	8007904 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fbad 	bl	800805c <USBD_CtlError>
                  break;
 8007902:	e041      	b.n	8007988 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007908:	2b00      	cmp	r3, #0
 800790a:	da0b      	bge.n	8007924 <USBD_StdEPReq+0x23e>
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007912:	4613      	mov	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	3310      	adds	r3, #16
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	4413      	add	r3, r2
 8007920:	3304      	adds	r3, #4
 8007922:	e00b      	b.n	800793c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007924:	7bbb      	ldrb	r3, [r7, #14]
 8007926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800792a:	4613      	mov	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	4413      	add	r3, r2
 800793a:	3304      	adds	r3, #4
 800793c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <USBD_StdEPReq+0x264>
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	2b80      	cmp	r3, #128	; 0x80
 8007948:	d103      	bne.n	8007952 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	2200      	movs	r2, #0
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	e00e      	b.n	8007970 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	4619      	mov	r1, r3
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f001 f818 	bl	800898c <USBD_LL_IsStallEP>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2201      	movs	r2, #1
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	e002      	b.n	8007970 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2200      	movs	r2, #0
 800796e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2202      	movs	r2, #2
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fbe1 	bl	800813e <USBD_CtlSendData>
              break;
 800797c:	e004      	b.n	8007988 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fb6b 	bl	800805c <USBD_CtlError>
              break;
 8007986:	bf00      	nop
          }
          break;
 8007988:	e004      	b.n	8007994 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fb65 	bl	800805c <USBD_CtlError>
          break;
 8007992:	bf00      	nop
      }
      break;
 8007994:	e004      	b.n	80079a0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007996:	6839      	ldr	r1, [r7, #0]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fb5f 	bl	800805c <USBD_CtlError>
      break;
 800799e:	bf00      	nop
  }

  return ret;
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079b6:	2300      	movs	r3, #0
 80079b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079ba:	2300      	movs	r3, #0
 80079bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	885b      	ldrh	r3, [r3, #2]
 80079c6:	0a1b      	lsrs	r3, r3, #8
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	3b01      	subs	r3, #1
 80079cc:	2b0e      	cmp	r3, #14
 80079ce:	f200 8152 	bhi.w	8007c76 <USBD_GetDescriptor+0x2ca>
 80079d2:	a201      	add	r2, pc, #4	; (adr r2, 80079d8 <USBD_GetDescriptor+0x2c>)
 80079d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d8:	08007a49 	.word	0x08007a49
 80079dc:	08007a61 	.word	0x08007a61
 80079e0:	08007aa1 	.word	0x08007aa1
 80079e4:	08007c77 	.word	0x08007c77
 80079e8:	08007c77 	.word	0x08007c77
 80079ec:	08007c17 	.word	0x08007c17
 80079f0:	08007c43 	.word	0x08007c43
 80079f4:	08007c77 	.word	0x08007c77
 80079f8:	08007c77 	.word	0x08007c77
 80079fc:	08007c77 	.word	0x08007c77
 8007a00:	08007c77 	.word	0x08007c77
 8007a04:	08007c77 	.word	0x08007c77
 8007a08:	08007c77 	.word	0x08007c77
 8007a0c:	08007c77 	.word	0x08007c77
 8007a10:	08007a15 	.word	0x08007a15
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00b      	beq.n	8007a38 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	7c12      	ldrb	r2, [r2, #16]
 8007a2c:	f107 0108 	add.w	r1, r7, #8
 8007a30:	4610      	mov	r0, r2
 8007a32:	4798      	blx	r3
 8007a34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a36:	e126      	b.n	8007c86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fb0e 	bl	800805c <USBD_CtlError>
        err++;
 8007a40:	7afb      	ldrb	r3, [r7, #11]
 8007a42:	3301      	adds	r3, #1
 8007a44:	72fb      	strb	r3, [r7, #11]
      break;
 8007a46:	e11e      	b.n	8007c86 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	7c12      	ldrb	r2, [r2, #16]
 8007a54:	f107 0108 	add.w	r1, r7, #8
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4798      	blx	r3
 8007a5c:	60f8      	str	r0, [r7, #12]
      break;
 8007a5e:	e112      	b.n	8007c86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	7c1b      	ldrb	r3, [r3, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10d      	bne.n	8007a84 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a70:	f107 0208 	add.w	r2, r7, #8
 8007a74:	4610      	mov	r0, r2
 8007a76:	4798      	blx	r3
 8007a78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	2202      	movs	r2, #2
 8007a80:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a82:	e100      	b.n	8007c86 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8c:	f107 0208 	add.w	r2, r7, #8
 8007a90:	4610      	mov	r0, r2
 8007a92:	4798      	blx	r3
 8007a94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	701a      	strb	r2, [r3, #0]
      break;
 8007a9e:	e0f2      	b.n	8007c86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	885b      	ldrh	r3, [r3, #2]
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b05      	cmp	r3, #5
 8007aa8:	f200 80ac 	bhi.w	8007c04 <USBD_GetDescriptor+0x258>
 8007aac:	a201      	add	r2, pc, #4	; (adr r2, 8007ab4 <USBD_GetDescriptor+0x108>)
 8007aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab2:	bf00      	nop
 8007ab4:	08007acd 	.word	0x08007acd
 8007ab8:	08007b01 	.word	0x08007b01
 8007abc:	08007b35 	.word	0x08007b35
 8007ac0:	08007b69 	.word	0x08007b69
 8007ac4:	08007b9d 	.word	0x08007b9d
 8007ac8:	08007bd1 	.word	0x08007bd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00b      	beq.n	8007af0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	7c12      	ldrb	r2, [r2, #16]
 8007ae4:	f107 0108 	add.w	r1, r7, #8
 8007ae8:	4610      	mov	r0, r2
 8007aea:	4798      	blx	r3
 8007aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aee:	e091      	b.n	8007c14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007af0:	6839      	ldr	r1, [r7, #0]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fab2 	bl	800805c <USBD_CtlError>
            err++;
 8007af8:	7afb      	ldrb	r3, [r7, #11]
 8007afa:	3301      	adds	r3, #1
 8007afc:	72fb      	strb	r3, [r7, #11]
          break;
 8007afe:	e089      	b.n	8007c14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00b      	beq.n	8007b24 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	7c12      	ldrb	r2, [r2, #16]
 8007b18:	f107 0108 	add.w	r1, r7, #8
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4798      	blx	r3
 8007b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b22:	e077      	b.n	8007c14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fa98 	bl	800805c <USBD_CtlError>
            err++;
 8007b2c:	7afb      	ldrb	r3, [r7, #11]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	72fb      	strb	r3, [r7, #11]
          break;
 8007b32:	e06f      	b.n	8007c14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00b      	beq.n	8007b58 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	7c12      	ldrb	r2, [r2, #16]
 8007b4c:	f107 0108 	add.w	r1, r7, #8
 8007b50:	4610      	mov	r0, r2
 8007b52:	4798      	blx	r3
 8007b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b56:	e05d      	b.n	8007c14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fa7e 	bl	800805c <USBD_CtlError>
            err++;
 8007b60:	7afb      	ldrb	r3, [r7, #11]
 8007b62:	3301      	adds	r3, #1
 8007b64:	72fb      	strb	r3, [r7, #11]
          break;
 8007b66:	e055      	b.n	8007c14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00b      	beq.n	8007b8c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	7c12      	ldrb	r2, [r2, #16]
 8007b80:	f107 0108 	add.w	r1, r7, #8
 8007b84:	4610      	mov	r0, r2
 8007b86:	4798      	blx	r3
 8007b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b8a:	e043      	b.n	8007c14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b8c:	6839      	ldr	r1, [r7, #0]
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fa64 	bl	800805c <USBD_CtlError>
            err++;
 8007b94:	7afb      	ldrb	r3, [r7, #11]
 8007b96:	3301      	adds	r3, #1
 8007b98:	72fb      	strb	r3, [r7, #11]
          break;
 8007b9a:	e03b      	b.n	8007c14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00b      	beq.n	8007bc0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	7c12      	ldrb	r2, [r2, #16]
 8007bb4:	f107 0108 	add.w	r1, r7, #8
 8007bb8:	4610      	mov	r0, r2
 8007bba:	4798      	blx	r3
 8007bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bbe:	e029      	b.n	8007c14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fa4a 	bl	800805c <USBD_CtlError>
            err++;
 8007bc8:	7afb      	ldrb	r3, [r7, #11]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8007bce:	e021      	b.n	8007c14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00b      	beq.n	8007bf4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	7c12      	ldrb	r2, [r2, #16]
 8007be8:	f107 0108 	add.w	r1, r7, #8
 8007bec:	4610      	mov	r0, r2
 8007bee:	4798      	blx	r3
 8007bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bf2:	e00f      	b.n	8007c14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fa30 	bl	800805c <USBD_CtlError>
            err++;
 8007bfc:	7afb      	ldrb	r3, [r7, #11]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	72fb      	strb	r3, [r7, #11]
          break;
 8007c02:	e007      	b.n	8007c14 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa28 	bl	800805c <USBD_CtlError>
          err++;
 8007c0c:	7afb      	ldrb	r3, [r7, #11]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007c12:	bf00      	nop
      }
      break;
 8007c14:	e037      	b.n	8007c86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	7c1b      	ldrb	r3, [r3, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d109      	bne.n	8007c32 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c26:	f107 0208 	add.w	r2, r7, #8
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	4798      	blx	r3
 8007c2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c30:	e029      	b.n	8007c86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fa11 	bl	800805c <USBD_CtlError>
        err++;
 8007c3a:	7afb      	ldrb	r3, [r7, #11]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c40:	e021      	b.n	8007c86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	7c1b      	ldrb	r3, [r3, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10d      	bne.n	8007c66 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c52:	f107 0208 	add.w	r2, r7, #8
 8007c56:	4610      	mov	r0, r2
 8007c58:	4798      	blx	r3
 8007c5a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	2207      	movs	r2, #7
 8007c62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c64:	e00f      	b.n	8007c86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f9f7 	bl	800805c <USBD_CtlError>
        err++;
 8007c6e:	7afb      	ldrb	r3, [r7, #11]
 8007c70:	3301      	adds	r3, #1
 8007c72:	72fb      	strb	r3, [r7, #11]
      break;
 8007c74:	e007      	b.n	8007c86 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f9ef 	bl	800805c <USBD_CtlError>
      err++;
 8007c7e:	7afb      	ldrb	r3, [r7, #11]
 8007c80:	3301      	adds	r3, #1
 8007c82:	72fb      	strb	r3, [r7, #11]
      break;
 8007c84:	bf00      	nop
  }

  if (err != 0U)
 8007c86:	7afb      	ldrb	r3, [r7, #11]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d11e      	bne.n	8007cca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	88db      	ldrh	r3, [r3, #6]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d016      	beq.n	8007cc2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007c94:	893b      	ldrh	r3, [r7, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00e      	beq.n	8007cb8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	88da      	ldrh	r2, [r3, #6]
 8007c9e:	893b      	ldrh	r3, [r7, #8]
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	bf28      	it	cs
 8007ca4:	4613      	movcs	r3, r2
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007caa:	893b      	ldrh	r3, [r7, #8]
 8007cac:	461a      	mov	r2, r3
 8007cae:	68f9      	ldr	r1, [r7, #12]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fa44 	bl	800813e <USBD_CtlSendData>
 8007cb6:	e009      	b.n	8007ccc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f9ce 	bl	800805c <USBD_CtlError>
 8007cc0:	e004      	b.n	8007ccc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fa78 	bl	80081b8 <USBD_CtlSendStatus>
 8007cc8:	e000      	b.n	8007ccc <USBD_GetDescriptor+0x320>
    return;
 8007cca:	bf00      	nop
  }
}
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop

08007cd4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	889b      	ldrh	r3, [r3, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d131      	bne.n	8007d4a <USBD_SetAddress+0x76>
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	88db      	ldrh	r3, [r3, #6]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d12d      	bne.n	8007d4a <USBD_SetAddress+0x76>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	885b      	ldrh	r3, [r3, #2]
 8007cf2:	2b7f      	cmp	r3, #127	; 0x7f
 8007cf4:	d829      	bhi.n	8007d4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	885b      	ldrh	r3, [r3, #2]
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b03      	cmp	r3, #3
 8007d0c:	d104      	bne.n	8007d18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f9a3 	bl	800805c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d16:	e01d      	b.n	8007d54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	7bfa      	ldrb	r2, [r7, #15]
 8007d1c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fe5f 	bl	80089e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fa44 	bl	80081b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d004      	beq.n	8007d40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2202      	movs	r2, #2
 8007d3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d3e:	e009      	b.n	8007d54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d48:	e004      	b.n	8007d54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f985 	bl	800805c <USBD_CtlError>
  }
}
 8007d52:	bf00      	nop
 8007d54:	bf00      	nop
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	885b      	ldrh	r3, [r3, #2]
 8007d6e:	b2da      	uxtb	r2, r3
 8007d70:	4b4c      	ldr	r3, [pc, #304]	; (8007ea4 <USBD_SetConfig+0x148>)
 8007d72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d74:	4b4b      	ldr	r3, [pc, #300]	; (8007ea4 <USBD_SetConfig+0x148>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d905      	bls.n	8007d88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f96c 	bl	800805c <USBD_CtlError>
    return USBD_FAIL;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e088      	b.n	8007e9a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d002      	beq.n	8007d9a <USBD_SetConfig+0x3e>
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d025      	beq.n	8007de4 <USBD_SetConfig+0x88>
 8007d98:	e071      	b.n	8007e7e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007d9a:	4b42      	ldr	r3, [pc, #264]	; (8007ea4 <USBD_SetConfig+0x148>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d01c      	beq.n	8007ddc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007da2:	4b40      	ldr	r3, [pc, #256]	; (8007ea4 <USBD_SetConfig+0x148>)
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007dac:	4b3d      	ldr	r3, [pc, #244]	; (8007ea4 <USBD_SetConfig+0x148>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	4619      	mov	r1, r3
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7ff f992 	bl	80070dc <USBD_SetClassConfig>
 8007db8:	4603      	mov	r3, r0
 8007dba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d004      	beq.n	8007dcc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f949 	bl	800805c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007dca:	e065      	b.n	8007e98 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f9f3 	bl	80081b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2203      	movs	r2, #3
 8007dd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007dda:	e05d      	b.n	8007e98 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f9eb 	bl	80081b8 <USBD_CtlSendStatus>
      break;
 8007de2:	e059      	b.n	8007e98 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007de4:	4b2f      	ldr	r3, [pc, #188]	; (8007ea4 <USBD_SetConfig+0x148>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d112      	bne.n	8007e12 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2202      	movs	r2, #2
 8007df0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007df4:	4b2b      	ldr	r3, [pc, #172]	; (8007ea4 <USBD_SetConfig+0x148>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007dfe:	4b29      	ldr	r3, [pc, #164]	; (8007ea4 <USBD_SetConfig+0x148>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7ff f985 	bl	8007114 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f9d4 	bl	80081b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e10:	e042      	b.n	8007e98 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007e12:	4b24      	ldr	r3, [pc, #144]	; (8007ea4 <USBD_SetConfig+0x148>)
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d02a      	beq.n	8007e76 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7ff f973 	bl	8007114 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007e2e:	4b1d      	ldr	r3, [pc, #116]	; (8007ea4 <USBD_SetConfig+0x148>)
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e38:	4b1a      	ldr	r3, [pc, #104]	; (8007ea4 <USBD_SetConfig+0x148>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7ff f94c 	bl	80070dc <USBD_SetClassConfig>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00f      	beq.n	8007e6e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f903 	bl	800805c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7ff f958 	bl	8007114 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007e6c:	e014      	b.n	8007e98 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f9a2 	bl	80081b8 <USBD_CtlSendStatus>
      break;
 8007e74:	e010      	b.n	8007e98 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f99e 	bl	80081b8 <USBD_CtlSendStatus>
      break;
 8007e7c:	e00c      	b.n	8007e98 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f8eb 	bl	800805c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e86:	4b07      	ldr	r3, [pc, #28]	; (8007ea4 <USBD_SetConfig+0x148>)
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f7ff f941 	bl	8007114 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007e92:	2303      	movs	r3, #3
 8007e94:	73fb      	strb	r3, [r7, #15]
      break;
 8007e96:	bf00      	nop
  }

  return ret;
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	20000155 	.word	0x20000155

08007ea8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	88db      	ldrh	r3, [r3, #6]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d004      	beq.n	8007ec4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007eba:	6839      	ldr	r1, [r7, #0]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f8cd 	bl	800805c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ec2:	e023      	b.n	8007f0c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	dc02      	bgt.n	8007ed6 <USBD_GetConfig+0x2e>
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	dc03      	bgt.n	8007edc <USBD_GetConfig+0x34>
 8007ed4:	e015      	b.n	8007f02 <USBD_GetConfig+0x5a>
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d00b      	beq.n	8007ef2 <USBD_GetConfig+0x4a>
 8007eda:	e012      	b.n	8007f02 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	4619      	mov	r1, r3
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f927 	bl	800813e <USBD_CtlSendData>
        break;
 8007ef0:	e00c      	b.n	8007f0c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	4619      	mov	r1, r3
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f91f 	bl	800813e <USBD_CtlSendData>
        break;
 8007f00:	e004      	b.n	8007f0c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f8a9 	bl	800805c <USBD_CtlError>
        break;
 8007f0a:	bf00      	nop
}
 8007f0c:	bf00      	nop
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	3b01      	subs	r3, #1
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d81e      	bhi.n	8007f6a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	88db      	ldrh	r3, [r3, #6]
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d004      	beq.n	8007f3e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f890 	bl	800805c <USBD_CtlError>
        break;
 8007f3c:	e01a      	b.n	8007f74 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d005      	beq.n	8007f5a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	f043 0202 	orr.w	r2, r3, #2
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	330c      	adds	r3, #12
 8007f5e:	2202      	movs	r2, #2
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f8eb 	bl	800813e <USBD_CtlSendData>
      break;
 8007f68:	e004      	b.n	8007f74 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f875 	bl	800805c <USBD_CtlError>
      break;
 8007f72:	bf00      	nop
  }
}
 8007f74:	bf00      	nop
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	885b      	ldrh	r3, [r3, #2]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d106      	bne.n	8007f9c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f90e 	bl	80081b8 <USBD_CtlSendStatus>
  }
}
 8007f9c:	bf00      	nop
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d80b      	bhi.n	8007fd4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	885b      	ldrh	r3, [r3, #2]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d10c      	bne.n	8007fde <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f8f3 	bl	80081b8 <USBD_CtlSendStatus>
      }
      break;
 8007fd2:	e004      	b.n	8007fde <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f840 	bl	800805c <USBD_CtlError>
      break;
 8007fdc:	e000      	b.n	8007fe0 <USBD_ClrFeature+0x3c>
      break;
 8007fde:	bf00      	nop
  }
}
 8007fe0:	bf00      	nop
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	781a      	ldrb	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3301      	adds	r3, #1
 8008002:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	781a      	ldrb	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	3301      	adds	r3, #1
 8008010:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f7ff fa92 	bl	800753c <SWAPBYTE>
 8008018:	4603      	mov	r3, r0
 800801a:	461a      	mov	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3301      	adds	r3, #1
 8008024:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3301      	adds	r3, #1
 800802a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f7ff fa85 	bl	800753c <SWAPBYTE>
 8008032:	4603      	mov	r3, r0
 8008034:	461a      	mov	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3301      	adds	r3, #1
 800803e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3301      	adds	r3, #1
 8008044:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f7ff fa78 	bl	800753c <SWAPBYTE>
 800804c:	4603      	mov	r3, r0
 800804e:	461a      	mov	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	80da      	strh	r2, [r3, #6]
}
 8008054:	bf00      	nop
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008066:	2180      	movs	r1, #128	; 0x80
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fc23 	bl	80088b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800806e:	2100      	movs	r1, #0
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fc1f 	bl	80088b4 <USBD_LL_StallEP>
}
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b086      	sub	sp, #24
 8008082:	af00      	add	r7, sp, #0
 8008084:	60f8      	str	r0, [r7, #12]
 8008086:	60b9      	str	r1, [r7, #8]
 8008088:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d036      	beq.n	8008102 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008098:	6938      	ldr	r0, [r7, #16]
 800809a:	f000 f836 	bl	800810a <USBD_GetLen>
 800809e:	4603      	mov	r3, r0
 80080a0:	3301      	adds	r3, #1
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80080ac:	7dfb      	ldrb	r3, [r7, #23]
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	4413      	add	r3, r2
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	7812      	ldrb	r2, [r2, #0]
 80080b6:	701a      	strb	r2, [r3, #0]
  idx++;
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
 80080ba:	3301      	adds	r3, #1
 80080bc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80080be:	7dfb      	ldrb	r3, [r7, #23]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	4413      	add	r3, r2
 80080c4:	2203      	movs	r2, #3
 80080c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
 80080ca:	3301      	adds	r3, #1
 80080cc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80080ce:	e013      	b.n	80080f8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80080d0:	7dfb      	ldrb	r3, [r7, #23]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	4413      	add	r3, r2
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	7812      	ldrb	r2, [r2, #0]
 80080da:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	3301      	adds	r3, #1
 80080e0:	613b      	str	r3, [r7, #16]
    idx++;
 80080e2:	7dfb      	ldrb	r3, [r7, #23]
 80080e4:	3301      	adds	r3, #1
 80080e6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	4413      	add	r3, r2
 80080ee:	2200      	movs	r2, #0
 80080f0:	701a      	strb	r2, [r3, #0]
    idx++;
 80080f2:	7dfb      	ldrb	r3, [r7, #23]
 80080f4:	3301      	adds	r3, #1
 80080f6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1e7      	bne.n	80080d0 <USBD_GetString+0x52>
 8008100:	e000      	b.n	8008104 <USBD_GetString+0x86>
    return;
 8008102:	bf00      	nop
  }
}
 8008104:	3718      	adds	r7, #24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800810a:	b480      	push	{r7}
 800810c:	b085      	sub	sp, #20
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008112:	2300      	movs	r3, #0
 8008114:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800811a:	e005      	b.n	8008128 <USBD_GetLen+0x1e>
  {
    len++;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
 800811e:	3301      	adds	r3, #1
 8008120:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	3301      	adds	r3, #1
 8008126:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1f5      	bne.n	800811c <USBD_GetLen+0x12>
  }

  return len;
 8008130:	7bfb      	ldrb	r3, [r7, #15]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b084      	sub	sp, #16
 8008142:	af00      	add	r7, sp, #0
 8008144:	60f8      	str	r0, [r7, #12]
 8008146:	60b9      	str	r1, [r7, #8]
 8008148:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2202      	movs	r2, #2
 800814e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	2100      	movs	r1, #0
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 fc75 	bl	8008a54 <USBD_LL_Transmit>

  return USBD_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	2100      	movs	r1, #0
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 fc64 	bl	8008a54 <USBD_LL_Transmit>

  return USBD_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b084      	sub	sp, #16
 800819a:	af00      	add	r7, sp, #0
 800819c:	60f8      	str	r0, [r7, #12]
 800819e:	60b9      	str	r1, [r7, #8]
 80081a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	2100      	movs	r1, #0
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 fc8b 	bl	8008ac4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2204      	movs	r2, #4
 80081c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081c8:	2300      	movs	r3, #0
 80081ca:	2200      	movs	r2, #0
 80081cc:	2100      	movs	r1, #0
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fc40 	bl	8008a54 <USBD_LL_Transmit>

  return USBD_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2205      	movs	r2, #5
 80081ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081ee:	2300      	movs	r3, #0
 80081f0:	2200      	movs	r2, #0
 80081f2:	2100      	movs	r1, #0
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fc65 	bl	8008ac4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	af00      	add	r7, sp, #0
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8008208:	2200      	movs	r2, #0
 800820a:	4908      	ldr	r1, [pc, #32]	; (800822c <MX_USB_DEVICE_Init+0x28>)
 800820c:	4808      	ldr	r0, [pc, #32]	; (8008230 <MX_USB_DEVICE_Init+0x2c>)
 800820e:	f7fe fef7 	bl	8007000 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI);
 8008212:	4908      	ldr	r1, [pc, #32]	; (8008234 <MX_USB_DEVICE_Init+0x30>)
 8008214:	4806      	ldr	r0, [pc, #24]	; (8008230 <MX_USB_DEVICE_Init+0x2c>)
 8008216:	f7fe ff23 	bl	8007060 <USBD_RegisterClass>

  USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_MIDI_fops_FS);
 800821a:	4907      	ldr	r1, [pc, #28]	; (8008238 <MX_USB_DEVICE_Init+0x34>)
 800821c:	4804      	ldr	r0, [pc, #16]	; (8008230 <MX_USB_DEVICE_Init+0x2c>)
 800821e:	f7fe fe9b 	bl	8006f58 <USBD_MIDI_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8008222:	4803      	ldr	r0, [pc, #12]	; (8008230 <MX_USB_DEVICE_Init+0x2c>)
 8008224:	f7fe ff43 	bl	80070ae <USBD_Start>

}
 8008228:	bf00      	nop
 800822a:	bd80      	pop	{r7, pc}
 800822c:	200000d0 	.word	0x200000d0
 8008230:	20001dc8 	.word	0x20001dc8
 8008234:	20000024 	.word	0x20000024
 8008238:	2000000c 	.word	0x2000000c

0800823c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	4603      	mov	r3, r0
 8008244:	6039      	str	r1, [r7, #0]
 8008246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2212      	movs	r2, #18
 800824c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800824e:	4b03      	ldr	r3, [pc, #12]	; (800825c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008250:	4618      	mov	r0, r3
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	200000f0 	.word	0x200000f0

08008260 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	4603      	mov	r3, r0
 8008268:	6039      	str	r1, [r7, #0]
 800826a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2204      	movs	r2, #4
 8008270:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008272:	4b03      	ldr	r3, [pc, #12]	; (8008280 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	20000110 	.word	0x20000110

08008284 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	4603      	mov	r3, r0
 800828c:	6039      	str	r1, [r7, #0]
 800828e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008290:	79fb      	ldrb	r3, [r7, #7]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d105      	bne.n	80082a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	4907      	ldr	r1, [pc, #28]	; (80082b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800829a:	4808      	ldr	r0, [pc, #32]	; (80082bc <USBD_FS_ProductStrDescriptor+0x38>)
 800829c:	f7ff feef 	bl	800807e <USBD_GetString>
 80082a0:	e004      	b.n	80082ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	4904      	ldr	r1, [pc, #16]	; (80082b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80082a6:	4805      	ldr	r0, [pc, #20]	; (80082bc <USBD_FS_ProductStrDescriptor+0x38>)
 80082a8:	f7ff fee9 	bl	800807e <USBD_GetString>
  }
  return USBD_StrDesc;
 80082ac:	4b02      	ldr	r3, [pc, #8]	; (80082b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	20002098 	.word	0x20002098
 80082bc:	08008c74 	.word	0x08008c74

080082c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	4603      	mov	r3, r0
 80082c8:	6039      	str	r1, [r7, #0]
 80082ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80082cc:	683a      	ldr	r2, [r7, #0]
 80082ce:	4904      	ldr	r1, [pc, #16]	; (80082e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80082d0:	4804      	ldr	r0, [pc, #16]	; (80082e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80082d2:	f7ff fed4 	bl	800807e <USBD_GetString>
  return USBD_StrDesc;
 80082d6:	4b02      	ldr	r3, [pc, #8]	; (80082e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	20002098 	.word	0x20002098
 80082e4:	08008c88 	.word	0x08008c88

080082e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	6039      	str	r1, [r7, #0]
 80082f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	221a      	movs	r2, #26
 80082f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80082fa:	f000 f855 	bl	80083a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80082fe:	4b02      	ldr	r3, [pc, #8]	; (8008308 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008300:	4618      	mov	r0, r3
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	20000114 	.word	0x20000114

0800830c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	4603      	mov	r3, r0
 8008314:	6039      	str	r1, [r7, #0]
 8008316:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008318:	79fb      	ldrb	r3, [r7, #7]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d105      	bne.n	800832a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800831e:	683a      	ldr	r2, [r7, #0]
 8008320:	4907      	ldr	r1, [pc, #28]	; (8008340 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008322:	4808      	ldr	r0, [pc, #32]	; (8008344 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008324:	f7ff feab 	bl	800807e <USBD_GetString>
 8008328:	e004      	b.n	8008334 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	4904      	ldr	r1, [pc, #16]	; (8008340 <USBD_FS_ConfigStrDescriptor+0x34>)
 800832e:	4805      	ldr	r0, [pc, #20]	; (8008344 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008330:	f7ff fea5 	bl	800807e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008334:	4b02      	ldr	r3, [pc, #8]	; (8008340 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008336:	4618      	mov	r0, r3
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	20002098 	.word	0x20002098
 8008344:	08008c9c 	.word	0x08008c9c

08008348 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	4603      	mov	r3, r0
 8008350:	6039      	str	r1, [r7, #0]
 8008352:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008354:	79fb      	ldrb	r3, [r7, #7]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d105      	bne.n	8008366 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	4907      	ldr	r1, [pc, #28]	; (800837c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800835e:	4808      	ldr	r0, [pc, #32]	; (8008380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008360:	f7ff fe8d 	bl	800807e <USBD_GetString>
 8008364:	e004      	b.n	8008370 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	4904      	ldr	r1, [pc, #16]	; (800837c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800836a:	4805      	ldr	r0, [pc, #20]	; (8008380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800836c:	f7ff fe87 	bl	800807e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008370:	4b02      	ldr	r3, [pc, #8]	; (800837c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20002098 	.word	0x20002098
 8008380:	08008cac 	.word	0x08008cac

08008384 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	4603      	mov	r3, r0
 800838c:	6039      	str	r1, [r7, #0]
 800838e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	220c      	movs	r2, #12
 8008394:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008396:	4b03      	ldr	r3, [pc, #12]	; (80083a4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	20000104 	.word	0x20000104

080083a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083ae:	4b0f      	ldr	r3, [pc, #60]	; (80083ec <Get_SerialNum+0x44>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80083b4:	4b0e      	ldr	r3, [pc, #56]	; (80083f0 <Get_SerialNum+0x48>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80083ba:	4b0e      	ldr	r3, [pc, #56]	; (80083f4 <Get_SerialNum+0x4c>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4413      	add	r3, r2
 80083c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d009      	beq.n	80083e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80083ce:	2208      	movs	r2, #8
 80083d0:	4909      	ldr	r1, [pc, #36]	; (80083f8 <Get_SerialNum+0x50>)
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f000 f814 	bl	8008400 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80083d8:	2204      	movs	r2, #4
 80083da:	4908      	ldr	r1, [pc, #32]	; (80083fc <Get_SerialNum+0x54>)
 80083dc:	68b8      	ldr	r0, [r7, #8]
 80083de:	f000 f80f 	bl	8008400 <IntToUnicode>
  }
}
 80083e2:	bf00      	nop
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	1fff7590 	.word	0x1fff7590
 80083f0:	1fff7594 	.word	0x1fff7594
 80083f4:	1fff7598 	.word	0x1fff7598
 80083f8:	20000116 	.word	0x20000116
 80083fc:	20000126 	.word	0x20000126

08008400 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008400:	b480      	push	{r7}
 8008402:	b087      	sub	sp, #28
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	4613      	mov	r3, r2
 800840c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800840e:	2300      	movs	r3, #0
 8008410:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008412:	2300      	movs	r3, #0
 8008414:	75fb      	strb	r3, [r7, #23]
 8008416:	e027      	b.n	8008468 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	0f1b      	lsrs	r3, r3, #28
 800841c:	2b09      	cmp	r3, #9
 800841e:	d80b      	bhi.n	8008438 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	0f1b      	lsrs	r3, r3, #28
 8008424:	b2da      	uxtb	r2, r3
 8008426:	7dfb      	ldrb	r3, [r7, #23]
 8008428:	005b      	lsls	r3, r3, #1
 800842a:	4619      	mov	r1, r3
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	440b      	add	r3, r1
 8008430:	3230      	adds	r2, #48	; 0x30
 8008432:	b2d2      	uxtb	r2, r2
 8008434:	701a      	strb	r2, [r3, #0]
 8008436:	e00a      	b.n	800844e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	0f1b      	lsrs	r3, r3, #28
 800843c:	b2da      	uxtb	r2, r3
 800843e:	7dfb      	ldrb	r3, [r7, #23]
 8008440:	005b      	lsls	r3, r3, #1
 8008442:	4619      	mov	r1, r3
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	440b      	add	r3, r1
 8008448:	3237      	adds	r2, #55	; 0x37
 800844a:	b2d2      	uxtb	r2, r2
 800844c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008454:	7dfb      	ldrb	r3, [r7, #23]
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	3301      	adds	r3, #1
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	4413      	add	r3, r2
 800845e:	2200      	movs	r2, #0
 8008460:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008462:	7dfb      	ldrb	r3, [r7, #23]
 8008464:	3301      	adds	r3, #1
 8008466:	75fb      	strb	r3, [r7, #23]
 8008468:	7dfa      	ldrb	r2, [r7, #23]
 800846a:	79fb      	ldrb	r3, [r7, #7]
 800846c:	429a      	cmp	r2, r3
 800846e:	d3d3      	bcc.n	8008418 <IntToUnicode+0x18>
  }
}
 8008470:	bf00      	nop
 8008472:	bf00      	nop
 8008474:	371c      	adds	r7, #28
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
	...

08008480 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08a      	sub	sp, #40	; 0x28
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008488:	f107 0314 	add.w	r3, r7, #20
 800848c:	2200      	movs	r2, #0
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	605a      	str	r2, [r3, #4]
 8008492:	609a      	str	r2, [r3, #8]
 8008494:	60da      	str	r2, [r3, #12]
 8008496:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a1c      	ldr	r2, [pc, #112]	; (8008510 <HAL_PCD_MspInit+0x90>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d131      	bne.n	8008506 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084a2:	4b1c      	ldr	r3, [pc, #112]	; (8008514 <HAL_PCD_MspInit+0x94>)
 80084a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084a6:	4a1b      	ldr	r2, [pc, #108]	; (8008514 <HAL_PCD_MspInit+0x94>)
 80084a8:	f043 0301 	orr.w	r3, r3, #1
 80084ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084ae:	4b19      	ldr	r3, [pc, #100]	; (8008514 <HAL_PCD_MspInit+0x94>)
 80084b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	613b      	str	r3, [r7, #16]
 80084b8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80084ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80084be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084c0:	2302      	movs	r3, #2
 80084c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084c4:	2300      	movs	r3, #0
 80084c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084c8:	2303      	movs	r3, #3
 80084ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 80084cc:	230a      	movs	r3, #10
 80084ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084d0:	f107 0314 	add.w	r3, r7, #20
 80084d4:	4619      	mov	r1, r3
 80084d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80084da:	f7f8 fc31 	bl	8000d40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80084de:	4b0d      	ldr	r3, [pc, #52]	; (8008514 <HAL_PCD_MspInit+0x94>)
 80084e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e2:	4a0c      	ldr	r2, [pc, #48]	; (8008514 <HAL_PCD_MspInit+0x94>)
 80084e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80084e8:	6593      	str	r3, [r2, #88]	; 0x58
 80084ea:	4b0a      	ldr	r3, [pc, #40]	; (8008514 <HAL_PCD_MspInit+0x94>)
 80084ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80084f6:	2200      	movs	r2, #0
 80084f8:	2100      	movs	r1, #0
 80084fa:	2043      	movs	r0, #67	; 0x43
 80084fc:	f7f8 fbe9 	bl	8000cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008500:	2043      	movs	r0, #67	; 0x43
 8008502:	f7f8 fc02 	bl	8000d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008506:	bf00      	nop
 8008508:	3728      	adds	r7, #40	; 0x28
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	40006800 	.word	0x40006800
 8008514:	40021000 	.word	0x40021000

08008518 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800852c:	4619      	mov	r1, r3
 800852e:	4610      	mov	r0, r2
 8008530:	f7fe fe08 	bl	8007144 <USBD_LL_SetupStage>
}
 8008534:	bf00      	nop
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800854e:	78fa      	ldrb	r2, [r7, #3]
 8008550:	6879      	ldr	r1, [r7, #4]
 8008552:	4613      	mov	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	4413      	add	r3, r2
 8008558:	00db      	lsls	r3, r3, #3
 800855a:	440b      	add	r3, r1
 800855c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	78fb      	ldrb	r3, [r7, #3]
 8008564:	4619      	mov	r1, r3
 8008566:	f7fe fe42 	bl	80071ee <USBD_LL_DataOutStage>
}
 800856a:	bf00      	nop
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b082      	sub	sp, #8
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	460b      	mov	r3, r1
 800857c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008584:	78fa      	ldrb	r2, [r7, #3]
 8008586:	6879      	ldr	r1, [r7, #4]
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	440b      	add	r3, r1
 8008592:	333c      	adds	r3, #60	; 0x3c
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	78fb      	ldrb	r3, [r7, #3]
 8008598:	4619      	mov	r1, r3
 800859a:	f7fe fe8b 	bl	80072b4 <USBD_LL_DataInStage>
}
 800859e:	bf00      	nop
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b082      	sub	sp, #8
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fe ff9f 	bl	80074f8 <USBD_LL_SOF>
}
 80085ba:	bf00      	nop
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80085ca:	2301      	movs	r3, #1
 80085cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d001      	beq.n	80085da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80085d6:	f7f8 f8c7 	bl	8000768 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80085e0:	7bfa      	ldrb	r2, [r7, #15]
 80085e2:	4611      	mov	r1, r2
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fe ff49 	bl	800747c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fe fef5 	bl	80073e0 <USBD_LL_Reset>
}
 80085f6:	bf00      	nop
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800860e:	4618      	mov	r0, r3
 8008610:	f7fe ff44 	bl	800749c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d005      	beq.n	8008628 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800861c:	4b04      	ldr	r3, [pc, #16]	; (8008630 <HAL_PCD_SuspendCallback+0x30>)
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	4a03      	ldr	r2, [pc, #12]	; (8008630 <HAL_PCD_SuspendCallback+0x30>)
 8008622:	f043 0306 	orr.w	r3, r3, #6
 8008626:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008628:	bf00      	nop
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	e000ed00 	.word	0xe000ed00

08008634 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d007      	beq.n	8008654 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008644:	4b08      	ldr	r3, [pc, #32]	; (8008668 <HAL_PCD_ResumeCallback+0x34>)
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	4a07      	ldr	r2, [pc, #28]	; (8008668 <HAL_PCD_ResumeCallback+0x34>)
 800864a:	f023 0306 	bic.w	r3, r3, #6
 800864e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008650:	f000 fad2 	bl	8008bf8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800865a:	4618      	mov	r0, r3
 800865c:	f7fe ff34 	bl	80074c8 <USBD_LL_Resume>
}
 8008660:	bf00      	nop
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	e000ed00 	.word	0xe000ed00

0800866c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8008674:	f7fa ff88 	bl	8003588 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008678:	4a1e      	ldr	r2, [pc, #120]	; (80086f4 <USBD_LL_Init+0x88>)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a1c      	ldr	r2, [pc, #112]	; (80086f4 <USBD_LL_Init+0x88>)
 8008684:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008688:	4b1a      	ldr	r3, [pc, #104]	; (80086f4 <USBD_LL_Init+0x88>)
 800868a:	4a1b      	ldr	r2, [pc, #108]	; (80086f8 <USBD_LL_Init+0x8c>)
 800868c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800868e:	4b19      	ldr	r3, [pc, #100]	; (80086f4 <USBD_LL_Init+0x88>)
 8008690:	2208      	movs	r2, #8
 8008692:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008694:	4b17      	ldr	r3, [pc, #92]	; (80086f4 <USBD_LL_Init+0x88>)
 8008696:	2202      	movs	r2, #2
 8008698:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800869a:	4b16      	ldr	r3, [pc, #88]	; (80086f4 <USBD_LL_Init+0x88>)
 800869c:	2202      	movs	r2, #2
 800869e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80086a0:	4b14      	ldr	r3, [pc, #80]	; (80086f4 <USBD_LL_Init+0x88>)
 80086a2:	2200      	movs	r2, #0
 80086a4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80086a6:	4b13      	ldr	r3, [pc, #76]	; (80086f4 <USBD_LL_Init+0x88>)
 80086a8:	2200      	movs	r2, #0
 80086aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80086ac:	4b11      	ldr	r3, [pc, #68]	; (80086f4 <USBD_LL_Init+0x88>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80086b2:	4b10      	ldr	r3, [pc, #64]	; (80086f4 <USBD_LL_Init+0x88>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80086b8:	480e      	ldr	r0, [pc, #56]	; (80086f4 <USBD_LL_Init+0x88>)
 80086ba:	f7f9 fa04 	bl	8001ac6 <HAL_PCD_Init>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d001      	beq.n	80086c8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80086c4:	f7f8 f850 	bl	8000768 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80086ce:	2318      	movs	r3, #24
 80086d0:	2200      	movs	r2, #0
 80086d2:	2100      	movs	r1, #0
 80086d4:	f7fa fe86 	bl	80033e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80086de:	2358      	movs	r3, #88	; 0x58
 80086e0:	2200      	movs	r2, #0
 80086e2:	2180      	movs	r1, #128	; 0x80
 80086e4:	f7fa fe7e 	bl	80033e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	20002298 	.word	0x20002298
 80086f8:	40006800 	.word	0x40006800

080086fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008712:	4618      	mov	r0, r3
 8008714:	f7f9 fae9 	bl	8001cea <HAL_PCD_Start>
 8008718:	4603      	mov	r3, r0
 800871a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	2b03      	cmp	r3, #3
 8008720:	d816      	bhi.n	8008750 <USBD_LL_Start+0x54>
 8008722:	a201      	add	r2, pc, #4	; (adr r2, 8008728 <USBD_LL_Start+0x2c>)
 8008724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008728:	08008739 	.word	0x08008739
 800872c:	0800873f 	.word	0x0800873f
 8008730:	08008745 	.word	0x08008745
 8008734:	0800874b 	.word	0x0800874b
    case HAL_OK :
      usb_status = USBD_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	73fb      	strb	r3, [r7, #15]
    break;
 800873c:	e00b      	b.n	8008756 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800873e:	2303      	movs	r3, #3
 8008740:	73fb      	strb	r3, [r7, #15]
    break;
 8008742:	e008      	b.n	8008756 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008744:	2301      	movs	r3, #1
 8008746:	73fb      	strb	r3, [r7, #15]
    break;
 8008748:	e005      	b.n	8008756 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800874a:	2303      	movs	r3, #3
 800874c:	73fb      	strb	r3, [r7, #15]
    break;
 800874e:	e002      	b.n	8008756 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008750:	2303      	movs	r3, #3
 8008752:	73fb      	strb	r3, [r7, #15]
    break;
 8008754:	bf00      	nop
  }
  return usb_status;
 8008756:	7bfb      	ldrb	r3, [r7, #15]
}
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	4608      	mov	r0, r1
 800876a:	4611      	mov	r1, r2
 800876c:	461a      	mov	r2, r3
 800876e:	4603      	mov	r3, r0
 8008770:	70fb      	strb	r3, [r7, #3]
 8008772:	460b      	mov	r3, r1
 8008774:	70bb      	strb	r3, [r7, #2]
 8008776:	4613      	mov	r3, r2
 8008778:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008788:	78bb      	ldrb	r3, [r7, #2]
 800878a:	883a      	ldrh	r2, [r7, #0]
 800878c:	78f9      	ldrb	r1, [r7, #3]
 800878e:	f7f9 fc41 	bl	8002014 <HAL_PCD_EP_Open>
 8008792:	4603      	mov	r3, r0
 8008794:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008796:	7bbb      	ldrb	r3, [r7, #14]
 8008798:	2b03      	cmp	r3, #3
 800879a:	d817      	bhi.n	80087cc <USBD_LL_OpenEP+0x6c>
 800879c:	a201      	add	r2, pc, #4	; (adr r2, 80087a4 <USBD_LL_OpenEP+0x44>)
 800879e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a2:	bf00      	nop
 80087a4:	080087b5 	.word	0x080087b5
 80087a8:	080087bb 	.word	0x080087bb
 80087ac:	080087c1 	.word	0x080087c1
 80087b0:	080087c7 	.word	0x080087c7
    case HAL_OK :
      usb_status = USBD_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	73fb      	strb	r3, [r7, #15]
    break;
 80087b8:	e00b      	b.n	80087d2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80087ba:	2303      	movs	r3, #3
 80087bc:	73fb      	strb	r3, [r7, #15]
    break;
 80087be:	e008      	b.n	80087d2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80087c0:	2301      	movs	r3, #1
 80087c2:	73fb      	strb	r3, [r7, #15]
    break;
 80087c4:	e005      	b.n	80087d2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087c6:	2303      	movs	r3, #3
 80087c8:	73fb      	strb	r3, [r7, #15]
    break;
 80087ca:	e002      	b.n	80087d2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80087cc:	2303      	movs	r3, #3
 80087ce:	73fb      	strb	r3, [r7, #15]
    break;
 80087d0:	bf00      	nop
  }
  return usb_status;
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	460b      	mov	r3, r1
 80087e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087f6:	78fa      	ldrb	r2, [r7, #3]
 80087f8:	4611      	mov	r1, r2
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7f9 fc70 	bl	80020e0 <HAL_PCD_EP_Close>
 8008800:	4603      	mov	r3, r0
 8008802:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	2b03      	cmp	r3, #3
 8008808:	d816      	bhi.n	8008838 <USBD_LL_CloseEP+0x5c>
 800880a:	a201      	add	r2, pc, #4	; (adr r2, 8008810 <USBD_LL_CloseEP+0x34>)
 800880c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008810:	08008821 	.word	0x08008821
 8008814:	08008827 	.word	0x08008827
 8008818:	0800882d 	.word	0x0800882d
 800881c:	08008833 	.word	0x08008833
    case HAL_OK :
      usb_status = USBD_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	73fb      	strb	r3, [r7, #15]
    break;
 8008824:	e00b      	b.n	800883e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008826:	2303      	movs	r3, #3
 8008828:	73fb      	strb	r3, [r7, #15]
    break;
 800882a:	e008      	b.n	800883e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800882c:	2301      	movs	r3, #1
 800882e:	73fb      	strb	r3, [r7, #15]
    break;
 8008830:	e005      	b.n	800883e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008832:	2303      	movs	r3, #3
 8008834:	73fb      	strb	r3, [r7, #15]
    break;
 8008836:	e002      	b.n	800883e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008838:	2303      	movs	r3, #3
 800883a:	73fb      	strb	r3, [r7, #15]
    break;
 800883c:	bf00      	nop
  }
  return usb_status;
 800883e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008862:	78fa      	ldrb	r2, [r7, #3]
 8008864:	4611      	mov	r1, r2
 8008866:	4618      	mov	r0, r3
 8008868:	f7f9 fdce 	bl	8002408 <HAL_PCD_EP_Flush>
 800886c:	4603      	mov	r3, r0
 800886e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008870:	7bbb      	ldrb	r3, [r7, #14]
 8008872:	2b03      	cmp	r3, #3
 8008874:	d816      	bhi.n	80088a4 <USBD_LL_FlushEP+0x5c>
 8008876:	a201      	add	r2, pc, #4	; (adr r2, 800887c <USBD_LL_FlushEP+0x34>)
 8008878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887c:	0800888d 	.word	0x0800888d
 8008880:	08008893 	.word	0x08008893
 8008884:	08008899 	.word	0x08008899
 8008888:	0800889f 	.word	0x0800889f
    case HAL_OK :
      usb_status = USBD_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	73fb      	strb	r3, [r7, #15]
    break;
 8008890:	e00b      	b.n	80088aa <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008892:	2303      	movs	r3, #3
 8008894:	73fb      	strb	r3, [r7, #15]
    break;
 8008896:	e008      	b.n	80088aa <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008898:	2301      	movs	r3, #1
 800889a:	73fb      	strb	r3, [r7, #15]
    break;
 800889c:	e005      	b.n	80088aa <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800889e:	2303      	movs	r3, #3
 80088a0:	73fb      	strb	r3, [r7, #15]
    break;
 80088a2:	e002      	b.n	80088aa <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80088a4:	2303      	movs	r3, #3
 80088a6:	73fb      	strb	r3, [r7, #15]
    break;
 80088a8:	bf00      	nop
  }
  return usb_status;
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088ce:	78fa      	ldrb	r2, [r7, #3]
 80088d0:	4611      	mov	r1, r2
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7f9 fce4 	bl	80022a0 <HAL_PCD_EP_SetStall>
 80088d8:	4603      	mov	r3, r0
 80088da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80088dc:	7bbb      	ldrb	r3, [r7, #14]
 80088de:	2b03      	cmp	r3, #3
 80088e0:	d816      	bhi.n	8008910 <USBD_LL_StallEP+0x5c>
 80088e2:	a201      	add	r2, pc, #4	; (adr r2, 80088e8 <USBD_LL_StallEP+0x34>)
 80088e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e8:	080088f9 	.word	0x080088f9
 80088ec:	080088ff 	.word	0x080088ff
 80088f0:	08008905 	.word	0x08008905
 80088f4:	0800890b 	.word	0x0800890b
    case HAL_OK :
      usb_status = USBD_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	73fb      	strb	r3, [r7, #15]
    break;
 80088fc:	e00b      	b.n	8008916 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088fe:	2303      	movs	r3, #3
 8008900:	73fb      	strb	r3, [r7, #15]
    break;
 8008902:	e008      	b.n	8008916 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008904:	2301      	movs	r3, #1
 8008906:	73fb      	strb	r3, [r7, #15]
    break;
 8008908:	e005      	b.n	8008916 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800890a:	2303      	movs	r3, #3
 800890c:	73fb      	strb	r3, [r7, #15]
    break;
 800890e:	e002      	b.n	8008916 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008910:	2303      	movs	r3, #3
 8008912:	73fb      	strb	r3, [r7, #15]
    break;
 8008914:	bf00      	nop
  }
  return usb_status;
 8008916:	7bfb      	ldrb	r3, [r7, #15]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800893a:	78fa      	ldrb	r2, [r7, #3]
 800893c:	4611      	mov	r1, r2
 800893e:	4618      	mov	r0, r3
 8008940:	f7f9 fd0e 	bl	8002360 <HAL_PCD_EP_ClrStall>
 8008944:	4603      	mov	r3, r0
 8008946:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008948:	7bbb      	ldrb	r3, [r7, #14]
 800894a:	2b03      	cmp	r3, #3
 800894c:	d816      	bhi.n	800897c <USBD_LL_ClearStallEP+0x5c>
 800894e:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <USBD_LL_ClearStallEP+0x34>)
 8008950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008954:	08008965 	.word	0x08008965
 8008958:	0800896b 	.word	0x0800896b
 800895c:	08008971 	.word	0x08008971
 8008960:	08008977 	.word	0x08008977
    case HAL_OK :
      usb_status = USBD_OK;
 8008964:	2300      	movs	r3, #0
 8008966:	73fb      	strb	r3, [r7, #15]
    break;
 8008968:	e00b      	b.n	8008982 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800896a:	2303      	movs	r3, #3
 800896c:	73fb      	strb	r3, [r7, #15]
    break;
 800896e:	e008      	b.n	8008982 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008970:	2301      	movs	r3, #1
 8008972:	73fb      	strb	r3, [r7, #15]
    break;
 8008974:	e005      	b.n	8008982 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008976:	2303      	movs	r3, #3
 8008978:	73fb      	strb	r3, [r7, #15]
    break;
 800897a:	e002      	b.n	8008982 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800897c:	2303      	movs	r3, #3
 800897e:	73fb      	strb	r3, [r7, #15]
    break;
 8008980:	bf00      	nop
  }
  return usb_status;
 8008982:	7bfb      	ldrb	r3, [r7, #15]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	460b      	mov	r3, r1
 8008996:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800899e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80089a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	da0c      	bge.n	80089c2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089a8:	78fb      	ldrb	r3, [r7, #3]
 80089aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ae:	68f9      	ldr	r1, [r7, #12]
 80089b0:	1c5a      	adds	r2, r3, #1
 80089b2:	4613      	mov	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	00db      	lsls	r3, r3, #3
 80089ba:	440b      	add	r3, r1
 80089bc:	3302      	adds	r3, #2
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	e00b      	b.n	80089da <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80089c2:	78fb      	ldrb	r3, [r7, #3]
 80089c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089c8:	68f9      	ldr	r1, [r7, #12]
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	00db      	lsls	r3, r3, #3
 80089d2:	440b      	add	r3, r1
 80089d4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80089d8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
	...

080089e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a02:	78fa      	ldrb	r2, [r7, #3]
 8008a04:	4611      	mov	r1, r2
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7f9 fadf 	bl	8001fca <HAL_PCD_SetAddress>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d816      	bhi.n	8008a44 <USBD_LL_SetUSBAddress+0x5c>
 8008a16:	a201      	add	r2, pc, #4	; (adr r2, 8008a1c <USBD_LL_SetUSBAddress+0x34>)
 8008a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1c:	08008a2d 	.word	0x08008a2d
 8008a20:	08008a33 	.word	0x08008a33
 8008a24:	08008a39 	.word	0x08008a39
 8008a28:	08008a3f 	.word	0x08008a3f
    case HAL_OK :
      usb_status = USBD_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a30:	e00b      	b.n	8008a4a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a32:	2303      	movs	r3, #3
 8008a34:	73fb      	strb	r3, [r7, #15]
    break;
 8008a36:	e008      	b.n	8008a4a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a3c:	e005      	b.n	8008a4a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	73fb      	strb	r3, [r7, #15]
    break;
 8008a42:	e002      	b.n	8008a4a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008a44:	2303      	movs	r3, #3
 8008a46:	73fb      	strb	r3, [r7, #15]
    break;
 8008a48:	bf00      	nop
  }
  return usb_status;
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	607a      	str	r2, [r7, #4]
 8008a5e:	603b      	str	r3, [r7, #0]
 8008a60:	460b      	mov	r3, r1
 8008a62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a72:	7af9      	ldrb	r1, [r7, #11]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	f7f9 fbcf 	bl	800221a <HAL_PCD_EP_Transmit>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008a80:	7dbb      	ldrb	r3, [r7, #22]
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d816      	bhi.n	8008ab4 <USBD_LL_Transmit+0x60>
 8008a86:	a201      	add	r2, pc, #4	; (adr r2, 8008a8c <USBD_LL_Transmit+0x38>)
 8008a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8c:	08008a9d 	.word	0x08008a9d
 8008a90:	08008aa3 	.word	0x08008aa3
 8008a94:	08008aa9 	.word	0x08008aa9
 8008a98:	08008aaf 	.word	0x08008aaf
    case HAL_OK :
      usb_status = USBD_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	75fb      	strb	r3, [r7, #23]
    break;
 8008aa0:	e00b      	b.n	8008aba <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	75fb      	strb	r3, [r7, #23]
    break;
 8008aa6:	e008      	b.n	8008aba <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	75fb      	strb	r3, [r7, #23]
    break;
 8008aac:	e005      	b.n	8008aba <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	75fb      	strb	r3, [r7, #23]
    break;
 8008ab2:	e002      	b.n	8008aba <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	75fb      	strb	r3, [r7, #23]
    break;
 8008ab8:	bf00      	nop
  }
  return usb_status;
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3718      	adds	r7, #24
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b086      	sub	sp, #24
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	607a      	str	r2, [r7, #4]
 8008ace:	603b      	str	r3, [r7, #0]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008ae2:	7af9      	ldrb	r1, [r7, #11]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	f7f9 fb42 	bl	8002170 <HAL_PCD_EP_Receive>
 8008aec:	4603      	mov	r3, r0
 8008aee:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008af0:	7dbb      	ldrb	r3, [r7, #22]
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d816      	bhi.n	8008b24 <USBD_LL_PrepareReceive+0x60>
 8008af6:	a201      	add	r2, pc, #4	; (adr r2, 8008afc <USBD_LL_PrepareReceive+0x38>)
 8008af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afc:	08008b0d 	.word	0x08008b0d
 8008b00:	08008b13 	.word	0x08008b13
 8008b04:	08008b19 	.word	0x08008b19
 8008b08:	08008b1f 	.word	0x08008b1f
    case HAL_OK :
      usb_status = USBD_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	75fb      	strb	r3, [r7, #23]
    break;
 8008b10:	e00b      	b.n	8008b2a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b12:	2303      	movs	r3, #3
 8008b14:	75fb      	strb	r3, [r7, #23]
    break;
 8008b16:	e008      	b.n	8008b2a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	75fb      	strb	r3, [r7, #23]
    break;
 8008b1c:	e005      	b.n	8008b2a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	75fb      	strb	r3, [r7, #23]
    break;
 8008b22:	e002      	b.n	8008b2a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008b24:	2303      	movs	r3, #3
 8008b26:	75fb      	strb	r3, [r7, #23]
    break;
 8008b28:	bf00      	nop
  }
  return usb_status;
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b46:	78fa      	ldrb	r2, [r7, #3]
 8008b48:	4611      	mov	r1, r2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7f9 fb4d 	bl	80021ea <HAL_PCD_EP_GetRxCount>
 8008b50:	4603      	mov	r3, r0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
	...

08008b5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008b68:	78fb      	ldrb	r3, [r7, #3]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d002      	beq.n	8008b74 <HAL_PCDEx_LPM_Callback+0x18>
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d013      	beq.n	8008b9a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008b72:	e023      	b.n	8008bbc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d007      	beq.n	8008b8c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008b7c:	f000 f83c 	bl	8008bf8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b80:	4b10      	ldr	r3, [pc, #64]	; (8008bc4 <HAL_PCDEx_LPM_Callback+0x68>)
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	4a0f      	ldr	r2, [pc, #60]	; (8008bc4 <HAL_PCDEx_LPM_Callback+0x68>)
 8008b86:	f023 0306 	bic.w	r3, r3, #6
 8008b8a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fe fc98 	bl	80074c8 <USBD_LL_Resume>
    break;
 8008b98:	e010      	b.n	8008bbc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7fe fc7b 	bl	800749c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d005      	beq.n	8008bba <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bae:	4b05      	ldr	r3, [pc, #20]	; (8008bc4 <HAL_PCDEx_LPM_Callback+0x68>)
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	4a04      	ldr	r2, [pc, #16]	; (8008bc4 <HAL_PCDEx_LPM_Callback+0x68>)
 8008bb4:	f043 0306 	orr.w	r3, r3, #6
 8008bb8:	6113      	str	r3, [r2, #16]
    break;
 8008bba:	bf00      	nop
}
 8008bbc:	bf00      	nop
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	e000ed00 	.word	0xe000ed00

08008bc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
	Number of sub-packets in the audio transfer buffer. You can modify this value but always make sure
    that it is an even number and higher than 3
	AUDIO_OUT_PACKET_NUM = 80
  */
  /* USER CODE END 4 */
  return mem;
 8008bd0:	4b03      	ldr	r3, [pc, #12]	; (8008be0 <USBD_static_malloc+0x18>)
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	20000158 	.word	0x20000158

08008be4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]

}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008bfc:	f7f7 fcb6 	bl	800056c <SystemClock_Config>
}
 8008c00:	bf00      	nop
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <__libc_init_array>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	4d0d      	ldr	r5, [pc, #52]	; (8008c3c <__libc_init_array+0x38>)
 8008c08:	4c0d      	ldr	r4, [pc, #52]	; (8008c40 <__libc_init_array+0x3c>)
 8008c0a:	1b64      	subs	r4, r4, r5
 8008c0c:	10a4      	asrs	r4, r4, #2
 8008c0e:	2600      	movs	r6, #0
 8008c10:	42a6      	cmp	r6, r4
 8008c12:	d109      	bne.n	8008c28 <__libc_init_array+0x24>
 8008c14:	4d0b      	ldr	r5, [pc, #44]	; (8008c44 <__libc_init_array+0x40>)
 8008c16:	4c0c      	ldr	r4, [pc, #48]	; (8008c48 <__libc_init_array+0x44>)
 8008c18:	f000 f820 	bl	8008c5c <_init>
 8008c1c:	1b64      	subs	r4, r4, r5
 8008c1e:	10a4      	asrs	r4, r4, #2
 8008c20:	2600      	movs	r6, #0
 8008c22:	42a6      	cmp	r6, r4
 8008c24:	d105      	bne.n	8008c32 <__libc_init_array+0x2e>
 8008c26:	bd70      	pop	{r4, r5, r6, pc}
 8008c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c2c:	4798      	blx	r3
 8008c2e:	3601      	adds	r6, #1
 8008c30:	e7ee      	b.n	8008c10 <__libc_init_array+0xc>
 8008c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c36:	4798      	blx	r3
 8008c38:	3601      	adds	r6, #1
 8008c3a:	e7f2      	b.n	8008c22 <__libc_init_array+0x1e>
 8008c3c:	08008cfc 	.word	0x08008cfc
 8008c40:	08008cfc 	.word	0x08008cfc
 8008c44:	08008cfc 	.word	0x08008cfc
 8008c48:	08008d00 	.word	0x08008d00

08008c4c <memset>:
 8008c4c:	4402      	add	r2, r0
 8008c4e:	4603      	mov	r3, r0
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d100      	bne.n	8008c56 <memset+0xa>
 8008c54:	4770      	bx	lr
 8008c56:	f803 1b01 	strb.w	r1, [r3], #1
 8008c5a:	e7f9      	b.n	8008c50 <memset+0x4>

08008c5c <_init>:
 8008c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5e:	bf00      	nop
 8008c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c62:	bc08      	pop	{r3}
 8008c64:	469e      	mov	lr, r3
 8008c66:	4770      	bx	lr

08008c68 <_fini>:
 8008c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6a:	bf00      	nop
 8008c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c6e:	bc08      	pop	{r3}
 8008c70:	469e      	mov	lr, r3
 8008c72:	4770      	bx	lr
